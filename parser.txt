Grammar:

Rule 0     S' -> program
Rule 1     program -> empty
Rule 2     program -> statement
Rule 3     program -> program statement
Rule 4     statement -> sandbox
Rule 5     statement -> import_statement
Rule 6     statement -> variable_operation
Rule 7     statement -> return_statement
Rule 8     statement -> delete_statement
Rule 9     statement -> for_loop
Rule 10    statement -> break_statement
Rule 11    statement -> variable_assignment
Rule 12    statement -> python_code_statement
Rule 13    statement -> while_loop
Rule 14    statement -> conditional
Rule 15    statement -> class_attribute_assignment
Rule 16    statement -> function_call_statement
Rule 17    statement -> class_declaration
Rule 18    statement -> function_declaration
Rule 19    sandbox -> SANDBOX { program }
Rule 20    sandbox -> LIMPORT expression ;
Rule 21    function_call_statement -> function_call ;
Rule 22    python_code_statement -> python_code ;
Rule 23    break_statement -> BREAK ;
Rule 24    return_statement -> RETURN expression ;
Rule 25    function_call -> expression ( empty ) FARROW { program }
Rule 26    function_call -> expression ( empty )
Rule 27    function_call -> expression ( function_arguments ) FARROW { program }
Rule 28    function_call -> expression ( function_arguments )
Rule 29    debug_call -> ? ;
Rule 30    function_declaration -> FUNC ID ( empty ) { program } TARROW expression
Rule 31    function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
Rule 32    function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
Rule 33    function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression
Rule 34    function_arguments -> kwargs
Rule 35    function_arguments -> positional_args , kwargs  [precedence=left, level=2]
Rule 36    function_arguments -> positional_args
Rule 37    class_declaration -> NAMESPACE ID { program }
Rule 38    class_declaration -> CLASS ID { program }
Rule 39    for_loop -> FOR expression IN expression { program }
Rule 40    while_loop -> WHILE ( expression ) { program }
Rule 41    positional_args -> expression
Rule 42    positional_args -> positional_args , expression  [precedence=left, level=2]
Rule 43    kwargs -> ID = expression  [precedence=right, level=3]
Rule 44    kwargs -> kwargs , id = expression  [precedence=right, level=3]
Rule 45    variable_assignment -> LET get_index = expression ;
Rule 46    variable_assignment -> LET ID = expression ;
Rule 47    variable_operation -> get_index EQ_DIV expression ;
Rule 48    variable_operation -> ID EQ_DIV expression ;
Rule 49    variable_operation -> get_index EQ_MOD expression ;
Rule 50    variable_operation -> ID EQ_MOD expression ;
Rule 51    variable_operation -> get_index EQ_MUL expression ;
Rule 52    variable_operation -> ID EQ_MUL expression ;
Rule 53    variable_operation -> get_index EQ_SUB expression ;
Rule 54    variable_operation -> ID EQ_SUB expression ;
Rule 55    variable_operation -> get_index EQ_ADD expression ;
Rule 56    variable_operation -> ID EQ_ADD expression ;
Rule 57    class_attribute_assignment -> class_attribute = expression ;
Rule 58    conditional -> if_statement else_statement
Rule 59    conditional -> if_statement else_if_loop else_statement
Rule 60    conditional -> if_statement else_if_loop
Rule 61    conditional -> if_statement
Rule 62    if_statement -> IF ( expression ) { program }
Rule 63    else_if_loop -> else_if_statement
Rule 64    else_if_loop -> else_if_loop else_if_statement
Rule 65    else_if_statement -> ELSE IF ( expression ) { program }
Rule 66    else_statement -> ELSE { program }
Rule 67    delete_statement -> DEL ID ;
Rule 68    import_statement -> . GLOBAL ;
Rule 69    import_statement -> IMPORT expression ;
Rule 70    expression -> assoc_array
Rule 71    expression -> _numpy
Rule 72    expression -> _list
Rule 73    expression -> _tuple
Rule 74    expression -> class_attribute
Rule 75    expression -> id
Rule 76    expression -> string
Rule 77    expression -> bool
Rule 78    expression -> float
Rule 79    expression -> int
Rule 80    expression -> null
Rule 81    expression -> get_index
Rule 82    expression -> function_call
Rule 83    expression -> python_code
Rule 84    expression -> ( expression )
Rule 85    expression -> expression > expression  [precedence=left, level=7]
Rule 86    expression -> expression < expression  [precedence=left, level=7]
Rule 87    expression -> ! expression  [precedence=right, level=11]
Rule 88    expression -> expression & expression  [precedence=left, level=5]
Rule 89    expression -> expression | expression  [precedence=left, level=4]
Rule 90    expression -> expression EQ_GREATER expression  [precedence=left, level=7]
Rule 91    expression -> expression EQ_LESS expression  [precedence=left, level=7]
Rule 92    expression -> expression NOT_EQEQ expression  [precedence=left, level=6]
Rule 93    expression -> expression EQEQ expression  [precedence=left, level=6]
Rule 94    expression -> expression % expression  [precedence=left, level=9]
Rule 95    expression -> expression * expression  [precedence=left, level=9]
Rule 96    expression -> expression / expression  [precedence=left, level=9]
Rule 97    expression -> expression - expression  [precedence=left, level=8]
Rule 98    expression -> expression + expression  [precedence=left, level=8]
Rule 99    expression -> + expression  [precedence=right, level=10]
Rule 100   expression -> - expression  [precedence=right, level=10]
Rule 101   expression -> ID OF ID
Rule 102   null -> NULL
Rule 103   get_index -> expression [ expression ]
Rule 104   _tuple -> { positional_args , }
Rule 105   _tuple -> { positional_args }
Rule 106   _list -> [ positional_args , ]
Rule 107   _list -> [ positional_args ]
Rule 108   _numpy -> ( , )
Rule 109   _numpy -> ( )
Rule 110   _numpy -> ( expression , )
Rule 111   _numpy -> ( items , )
Rule 112   _numpy -> ( items )
Rule 113   items -> expression , expression  [precedence=left, level=2]
Rule 114   items -> items , expression  [precedence=left, level=2]
Rule 115   int -> INT
Rule 116   string -> STRING
Rule 117   float -> FLOAT
Rule 118   bool -> FALSE
Rule 119   bool -> TRUE
Rule 120   class_attribute -> expression COLON_COLON ID
Rule 121   id -> ID
Rule 122   assoc_array -> \ assoc_array_items \
Rule 123   assoc_array_items -> expression : expression
Rule 124   assoc_array_items -> assoc_array_items , expression : expression
Rule 125   python_code -> PYTHON_CODE_EXEC
Rule 126   python_code -> PYTHON_CODE
Rule 127   empty -> <empty>  [precedence=left, level=1]

Unused terminals:

    TELSE

Terminals, with rules where they appear:

!                    : 87
%                    : 94
&                    : 88
(                    : 25 26 27 28 30 31 32 33 40 62 65 84 108 109 110 111 112
)                    : 25 26 27 28 30 31 32 33 40 62 65 84 108 109 110 111 112
*                    : 95
+                    : 98 99
,                    : 35 42 44 104 106 108 110 111 113 114 124
-                    : 97 100
.                    : 68
/                    : 96
:                    : 123 124
;                    : 20 21 22 23 24 29 45 46 47 48 49 50 51 52 53 54 55 56 57 67 68 69
<                    : 86
=                    : 43 44 45 46 57
>                    : 85
?                    : 29
BREAK                : 23
CLASS                : 38
COLON_COLON          : 31 32 120
DEL                  : 67
ELSE                 : 65 66
EQEQ                 : 93
EQ_ADD               : 55 56
EQ_DIV               : 47 48
EQ_GREATER           : 90
EQ_LESS              : 91
EQ_MOD               : 49 50
EQ_MUL               : 51 52
EQ_SUB               : 53 54
FALSE                : 118
FARROW               : 25 27
FLOAT                : 117
FOR                  : 39
FUNC                 : 30 31 32 33
GLOBAL               : 68
ID                   : 30 31 31 32 32 33 37 38 43 46 48 50 52 54 56 67 101 101 120 121
IF                   : 62 65
IMPORT               : 69
IN                   : 39
INT                  : 115
LET                  : 45 46
LIMPORT              : 20
NAMESPACE            : 37
NOT_EQEQ             : 92
NULL                 : 102
OF                   : 101
PYTHON_CODE          : 126
PYTHON_CODE_EXEC     : 125
RETURN               : 24
SANDBOX              : 19
STRING               : 116
TARROW               : 30 31 32 33
TELSE                : 
TRUE                 : 119
WHILE                : 40
[                    : 103 106 107
\                    : 122 122
]                    : 103 106 107
error                : 
{                    : 19 25 27 30 31 32 33 37 38 39 40 62 65 66 104 105
|                    : 89
}                    : 19 25 27 30 31 32 33 37 38 39 40 62 65 66 104 105

Nonterminals, with rules where they appear:

_list                : 72
_numpy               : 71
_tuple               : 73
assoc_array          : 70
assoc_array_items    : 122 124
bool                 : 77
break_statement      : 10
class_attribute      : 57 74
class_attribute_assignment : 15
class_declaration    : 17
conditional          : 14
debug_call           : 
delete_statement     : 8
else_if_loop         : 59 60 64
else_if_statement    : 63 64
else_statement       : 58 59
empty                : 1 25 26 30 31
expression           : 20 24 25 26 27 28 30 31 32 33 39 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 62 65 69 84 85 85 86 86 87 88 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 100 103 103 110 113 113 114 120 123 123 124 124
float                : 78
for_loop             : 9
function_arguments   : 27 28 32 33
function_call        : 21 82
function_call_statement : 16
function_declaration : 18
get_index            : 45 47 49 51 53 55 81
id                   : 44 75
if_statement         : 58 59 60 61
import_statement     : 5
int                  : 79
items                : 111 112 114
kwargs               : 34 35 44
null                 : 80
positional_args      : 35 36 42 104 105 106 107
program              : 3 19 25 27 30 31 32 33 37 38 39 40 62 65 66 0
python_code          : 22 83
python_code_statement : 12
return_statement     : 7
sandbox              : 4
statement            : 2 3
string               : 76
variable_assignment  : 11
variable_operation   : 6
while_loop           : 13


state 0

    (0) S' -> . program
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (127) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    SANDBOX         reduce using rule 127 (empty -> .)
    LIMPORT         reduce using rule 127 (empty -> .)
    .               reduce using rule 127 (empty -> .)
    IMPORT          reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    DEL             reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    BREAK           reduce using rule 127 (empty -> .)
    LET             reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    NAMESPACE       reduce using rule 127 (empty -> .)
    CLASS           reduce using rule 127 (empty -> .)
    FUNC            reduce using rule 127 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 127 (empty -> .)
    PYTHON_CODE     reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    (               reduce using rule 127 (empty -> .)
    \               reduce using rule 127 (empty -> .)
    [               reduce using rule 127 (empty -> .)
    {               reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    NULL            reduce using rule 127 (empty -> .)
    $end            reduce using rule 127 (empty -> .)
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56

    program                        shift and go to state 1
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 1

    (0) S' -> program .
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 31
    WHILE           shift and go to state 33
    NAMESPACE       shift and go to state 38
    CLASS           shift and go to state 39
    FUNC            shift and go to state 40
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43
    IF              shift and go to state 44
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64

    statement                      shift and go to state 65
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 2

    (1) program -> empty .
    SANDBOX         reduce using rule 1 (program -> empty .)
    LIMPORT         reduce using rule 1 (program -> empty .)
    .               reduce using rule 1 (program -> empty .)
    IMPORT          reduce using rule 1 (program -> empty .)
    ID              reduce using rule 1 (program -> empty .)
    RETURN          reduce using rule 1 (program -> empty .)
    DEL             reduce using rule 1 (program -> empty .)
    FOR             reduce using rule 1 (program -> empty .)
    BREAK           reduce using rule 1 (program -> empty .)
    LET             reduce using rule 1 (program -> empty .)
    WHILE           reduce using rule 1 (program -> empty .)
    NAMESPACE       reduce using rule 1 (program -> empty .)
    CLASS           reduce using rule 1 (program -> empty .)
    FUNC            reduce using rule 1 (program -> empty .)
    PYTHON_CODE_EXEC reduce using rule 1 (program -> empty .)
    PYTHON_CODE     reduce using rule 1 (program -> empty .)
    IF              reduce using rule 1 (program -> empty .)
    (               reduce using rule 1 (program -> empty .)
    !               reduce using rule 1 (program -> empty .)
    +               reduce using rule 1 (program -> empty .)
    -               reduce using rule 1 (program -> empty .)
    \               reduce using rule 1 (program -> empty .)
    [               reduce using rule 1 (program -> empty .)
    {               reduce using rule 1 (program -> empty .)
    STRING          reduce using rule 1 (program -> empty .)
    FALSE           reduce using rule 1 (program -> empty .)
    TRUE            reduce using rule 1 (program -> empty .)
    FLOAT           reduce using rule 1 (program -> empty .)
    INT             reduce using rule 1 (program -> empty .)
    NULL            reduce using rule 1 (program -> empty .)
    $end            reduce using rule 1 (program -> empty .)
    }               reduce using rule 1 (program -> empty .)


state 3

    (2) program -> statement .
    SANDBOX         reduce using rule 2 (program -> statement .)
    LIMPORT         reduce using rule 2 (program -> statement .)
    .               reduce using rule 2 (program -> statement .)
    IMPORT          reduce using rule 2 (program -> statement .)
    ID              reduce using rule 2 (program -> statement .)
    RETURN          reduce using rule 2 (program -> statement .)
    DEL             reduce using rule 2 (program -> statement .)
    FOR             reduce using rule 2 (program -> statement .)
    BREAK           reduce using rule 2 (program -> statement .)
    LET             reduce using rule 2 (program -> statement .)
    WHILE           reduce using rule 2 (program -> statement .)
    NAMESPACE       reduce using rule 2 (program -> statement .)
    CLASS           reduce using rule 2 (program -> statement .)
    FUNC            reduce using rule 2 (program -> statement .)
    PYTHON_CODE_EXEC reduce using rule 2 (program -> statement .)
    PYTHON_CODE     reduce using rule 2 (program -> statement .)
    IF              reduce using rule 2 (program -> statement .)
    (               reduce using rule 2 (program -> statement .)
    !               reduce using rule 2 (program -> statement .)
    +               reduce using rule 2 (program -> statement .)
    -               reduce using rule 2 (program -> statement .)
    \               reduce using rule 2 (program -> statement .)
    [               reduce using rule 2 (program -> statement .)
    {               reduce using rule 2 (program -> statement .)
    STRING          reduce using rule 2 (program -> statement .)
    FALSE           reduce using rule 2 (program -> statement .)
    TRUE            reduce using rule 2 (program -> statement .)
    FLOAT           reduce using rule 2 (program -> statement .)
    INT             reduce using rule 2 (program -> statement .)
    NULL            reduce using rule 2 (program -> statement .)
    $end            reduce using rule 2 (program -> statement .)
    }               reduce using rule 2 (program -> statement .)


state 4

    (4) statement -> sandbox .
    SANDBOX         reduce using rule 4 (statement -> sandbox .)
    LIMPORT         reduce using rule 4 (statement -> sandbox .)
    .               reduce using rule 4 (statement -> sandbox .)
    IMPORT          reduce using rule 4 (statement -> sandbox .)
    ID              reduce using rule 4 (statement -> sandbox .)
    RETURN          reduce using rule 4 (statement -> sandbox .)
    DEL             reduce using rule 4 (statement -> sandbox .)
    FOR             reduce using rule 4 (statement -> sandbox .)
    BREAK           reduce using rule 4 (statement -> sandbox .)
    LET             reduce using rule 4 (statement -> sandbox .)
    WHILE           reduce using rule 4 (statement -> sandbox .)
    NAMESPACE       reduce using rule 4 (statement -> sandbox .)
    CLASS           reduce using rule 4 (statement -> sandbox .)
    FUNC            reduce using rule 4 (statement -> sandbox .)
    PYTHON_CODE_EXEC reduce using rule 4 (statement -> sandbox .)
    PYTHON_CODE     reduce using rule 4 (statement -> sandbox .)
    IF              reduce using rule 4 (statement -> sandbox .)
    (               reduce using rule 4 (statement -> sandbox .)
    !               reduce using rule 4 (statement -> sandbox .)
    +               reduce using rule 4 (statement -> sandbox .)
    -               reduce using rule 4 (statement -> sandbox .)
    \               reduce using rule 4 (statement -> sandbox .)
    [               reduce using rule 4 (statement -> sandbox .)
    {               reduce using rule 4 (statement -> sandbox .)
    STRING          reduce using rule 4 (statement -> sandbox .)
    FALSE           reduce using rule 4 (statement -> sandbox .)
    TRUE            reduce using rule 4 (statement -> sandbox .)
    FLOAT           reduce using rule 4 (statement -> sandbox .)
    INT             reduce using rule 4 (statement -> sandbox .)
    NULL            reduce using rule 4 (statement -> sandbox .)
    $end            reduce using rule 4 (statement -> sandbox .)
    }               reduce using rule 4 (statement -> sandbox .)


state 5

    (5) statement -> import_statement .
    SANDBOX         reduce using rule 5 (statement -> import_statement .)
    LIMPORT         reduce using rule 5 (statement -> import_statement .)
    .               reduce using rule 5 (statement -> import_statement .)
    IMPORT          reduce using rule 5 (statement -> import_statement .)
    ID              reduce using rule 5 (statement -> import_statement .)
    RETURN          reduce using rule 5 (statement -> import_statement .)
    DEL             reduce using rule 5 (statement -> import_statement .)
    FOR             reduce using rule 5 (statement -> import_statement .)
    BREAK           reduce using rule 5 (statement -> import_statement .)
    LET             reduce using rule 5 (statement -> import_statement .)
    WHILE           reduce using rule 5 (statement -> import_statement .)
    NAMESPACE       reduce using rule 5 (statement -> import_statement .)
    CLASS           reduce using rule 5 (statement -> import_statement .)
    FUNC            reduce using rule 5 (statement -> import_statement .)
    PYTHON_CODE_EXEC reduce using rule 5 (statement -> import_statement .)
    PYTHON_CODE     reduce using rule 5 (statement -> import_statement .)
    IF              reduce using rule 5 (statement -> import_statement .)
    (               reduce using rule 5 (statement -> import_statement .)
    !               reduce using rule 5 (statement -> import_statement .)
    +               reduce using rule 5 (statement -> import_statement .)
    -               reduce using rule 5 (statement -> import_statement .)
    \               reduce using rule 5 (statement -> import_statement .)
    [               reduce using rule 5 (statement -> import_statement .)
    {               reduce using rule 5 (statement -> import_statement .)
    STRING          reduce using rule 5 (statement -> import_statement .)
    FALSE           reduce using rule 5 (statement -> import_statement .)
    TRUE            reduce using rule 5 (statement -> import_statement .)
    FLOAT           reduce using rule 5 (statement -> import_statement .)
    INT             reduce using rule 5 (statement -> import_statement .)
    NULL            reduce using rule 5 (statement -> import_statement .)
    $end            reduce using rule 5 (statement -> import_statement .)
    }               reduce using rule 5 (statement -> import_statement .)


state 6

    (6) statement -> variable_operation .
    SANDBOX         reduce using rule 6 (statement -> variable_operation .)
    LIMPORT         reduce using rule 6 (statement -> variable_operation .)
    .               reduce using rule 6 (statement -> variable_operation .)
    IMPORT          reduce using rule 6 (statement -> variable_operation .)
    ID              reduce using rule 6 (statement -> variable_operation .)
    RETURN          reduce using rule 6 (statement -> variable_operation .)
    DEL             reduce using rule 6 (statement -> variable_operation .)
    FOR             reduce using rule 6 (statement -> variable_operation .)
    BREAK           reduce using rule 6 (statement -> variable_operation .)
    LET             reduce using rule 6 (statement -> variable_operation .)
    WHILE           reduce using rule 6 (statement -> variable_operation .)
    NAMESPACE       reduce using rule 6 (statement -> variable_operation .)
    CLASS           reduce using rule 6 (statement -> variable_operation .)
    FUNC            reduce using rule 6 (statement -> variable_operation .)
    PYTHON_CODE_EXEC reduce using rule 6 (statement -> variable_operation .)
    PYTHON_CODE     reduce using rule 6 (statement -> variable_operation .)
    IF              reduce using rule 6 (statement -> variable_operation .)
    (               reduce using rule 6 (statement -> variable_operation .)
    !               reduce using rule 6 (statement -> variable_operation .)
    +               reduce using rule 6 (statement -> variable_operation .)
    -               reduce using rule 6 (statement -> variable_operation .)
    \               reduce using rule 6 (statement -> variable_operation .)
    [               reduce using rule 6 (statement -> variable_operation .)
    {               reduce using rule 6 (statement -> variable_operation .)
    STRING          reduce using rule 6 (statement -> variable_operation .)
    FALSE           reduce using rule 6 (statement -> variable_operation .)
    TRUE            reduce using rule 6 (statement -> variable_operation .)
    FLOAT           reduce using rule 6 (statement -> variable_operation .)
    INT             reduce using rule 6 (statement -> variable_operation .)
    NULL            reduce using rule 6 (statement -> variable_operation .)
    $end            reduce using rule 6 (statement -> variable_operation .)
    }               reduce using rule 6 (statement -> variable_operation .)


state 7

    (7) statement -> return_statement .
    SANDBOX         reduce using rule 7 (statement -> return_statement .)
    LIMPORT         reduce using rule 7 (statement -> return_statement .)
    .               reduce using rule 7 (statement -> return_statement .)
    IMPORT          reduce using rule 7 (statement -> return_statement .)
    ID              reduce using rule 7 (statement -> return_statement .)
    RETURN          reduce using rule 7 (statement -> return_statement .)
    DEL             reduce using rule 7 (statement -> return_statement .)
    FOR             reduce using rule 7 (statement -> return_statement .)
    BREAK           reduce using rule 7 (statement -> return_statement .)
    LET             reduce using rule 7 (statement -> return_statement .)
    WHILE           reduce using rule 7 (statement -> return_statement .)
    NAMESPACE       reduce using rule 7 (statement -> return_statement .)
    CLASS           reduce using rule 7 (statement -> return_statement .)
    FUNC            reduce using rule 7 (statement -> return_statement .)
    PYTHON_CODE_EXEC reduce using rule 7 (statement -> return_statement .)
    PYTHON_CODE     reduce using rule 7 (statement -> return_statement .)
    IF              reduce using rule 7 (statement -> return_statement .)
    (               reduce using rule 7 (statement -> return_statement .)
    !               reduce using rule 7 (statement -> return_statement .)
    +               reduce using rule 7 (statement -> return_statement .)
    -               reduce using rule 7 (statement -> return_statement .)
    \               reduce using rule 7 (statement -> return_statement .)
    [               reduce using rule 7 (statement -> return_statement .)
    {               reduce using rule 7 (statement -> return_statement .)
    STRING          reduce using rule 7 (statement -> return_statement .)
    FALSE           reduce using rule 7 (statement -> return_statement .)
    TRUE            reduce using rule 7 (statement -> return_statement .)
    FLOAT           reduce using rule 7 (statement -> return_statement .)
    INT             reduce using rule 7 (statement -> return_statement .)
    NULL            reduce using rule 7 (statement -> return_statement .)
    $end            reduce using rule 7 (statement -> return_statement .)
    }               reduce using rule 7 (statement -> return_statement .)


state 8

    (8) statement -> delete_statement .
    SANDBOX         reduce using rule 8 (statement -> delete_statement .)
    LIMPORT         reduce using rule 8 (statement -> delete_statement .)
    .               reduce using rule 8 (statement -> delete_statement .)
    IMPORT          reduce using rule 8 (statement -> delete_statement .)
    ID              reduce using rule 8 (statement -> delete_statement .)
    RETURN          reduce using rule 8 (statement -> delete_statement .)
    DEL             reduce using rule 8 (statement -> delete_statement .)
    FOR             reduce using rule 8 (statement -> delete_statement .)
    BREAK           reduce using rule 8 (statement -> delete_statement .)
    LET             reduce using rule 8 (statement -> delete_statement .)
    WHILE           reduce using rule 8 (statement -> delete_statement .)
    NAMESPACE       reduce using rule 8 (statement -> delete_statement .)
    CLASS           reduce using rule 8 (statement -> delete_statement .)
    FUNC            reduce using rule 8 (statement -> delete_statement .)
    PYTHON_CODE_EXEC reduce using rule 8 (statement -> delete_statement .)
    PYTHON_CODE     reduce using rule 8 (statement -> delete_statement .)
    IF              reduce using rule 8 (statement -> delete_statement .)
    (               reduce using rule 8 (statement -> delete_statement .)
    !               reduce using rule 8 (statement -> delete_statement .)
    +               reduce using rule 8 (statement -> delete_statement .)
    -               reduce using rule 8 (statement -> delete_statement .)
    \               reduce using rule 8 (statement -> delete_statement .)
    [               reduce using rule 8 (statement -> delete_statement .)
    {               reduce using rule 8 (statement -> delete_statement .)
    STRING          reduce using rule 8 (statement -> delete_statement .)
    FALSE           reduce using rule 8 (statement -> delete_statement .)
    TRUE            reduce using rule 8 (statement -> delete_statement .)
    FLOAT           reduce using rule 8 (statement -> delete_statement .)
    INT             reduce using rule 8 (statement -> delete_statement .)
    NULL            reduce using rule 8 (statement -> delete_statement .)
    $end            reduce using rule 8 (statement -> delete_statement .)
    }               reduce using rule 8 (statement -> delete_statement .)


state 9

    (9) statement -> for_loop .
    SANDBOX         reduce using rule 9 (statement -> for_loop .)
    LIMPORT         reduce using rule 9 (statement -> for_loop .)
    .               reduce using rule 9 (statement -> for_loop .)
    IMPORT          reduce using rule 9 (statement -> for_loop .)
    ID              reduce using rule 9 (statement -> for_loop .)
    RETURN          reduce using rule 9 (statement -> for_loop .)
    DEL             reduce using rule 9 (statement -> for_loop .)
    FOR             reduce using rule 9 (statement -> for_loop .)
    BREAK           reduce using rule 9 (statement -> for_loop .)
    LET             reduce using rule 9 (statement -> for_loop .)
    WHILE           reduce using rule 9 (statement -> for_loop .)
    NAMESPACE       reduce using rule 9 (statement -> for_loop .)
    CLASS           reduce using rule 9 (statement -> for_loop .)
    FUNC            reduce using rule 9 (statement -> for_loop .)
    PYTHON_CODE_EXEC reduce using rule 9 (statement -> for_loop .)
    PYTHON_CODE     reduce using rule 9 (statement -> for_loop .)
    IF              reduce using rule 9 (statement -> for_loop .)
    (               reduce using rule 9 (statement -> for_loop .)
    !               reduce using rule 9 (statement -> for_loop .)
    +               reduce using rule 9 (statement -> for_loop .)
    -               reduce using rule 9 (statement -> for_loop .)
    \               reduce using rule 9 (statement -> for_loop .)
    [               reduce using rule 9 (statement -> for_loop .)
    {               reduce using rule 9 (statement -> for_loop .)
    STRING          reduce using rule 9 (statement -> for_loop .)
    FALSE           reduce using rule 9 (statement -> for_loop .)
    TRUE            reduce using rule 9 (statement -> for_loop .)
    FLOAT           reduce using rule 9 (statement -> for_loop .)
    INT             reduce using rule 9 (statement -> for_loop .)
    NULL            reduce using rule 9 (statement -> for_loop .)
    $end            reduce using rule 9 (statement -> for_loop .)
    }               reduce using rule 9 (statement -> for_loop .)


state 10

    (10) statement -> break_statement .
    SANDBOX         reduce using rule 10 (statement -> break_statement .)
    LIMPORT         reduce using rule 10 (statement -> break_statement .)
    .               reduce using rule 10 (statement -> break_statement .)
    IMPORT          reduce using rule 10 (statement -> break_statement .)
    ID              reduce using rule 10 (statement -> break_statement .)
    RETURN          reduce using rule 10 (statement -> break_statement .)
    DEL             reduce using rule 10 (statement -> break_statement .)
    FOR             reduce using rule 10 (statement -> break_statement .)
    BREAK           reduce using rule 10 (statement -> break_statement .)
    LET             reduce using rule 10 (statement -> break_statement .)
    WHILE           reduce using rule 10 (statement -> break_statement .)
    NAMESPACE       reduce using rule 10 (statement -> break_statement .)
    CLASS           reduce using rule 10 (statement -> break_statement .)
    FUNC            reduce using rule 10 (statement -> break_statement .)
    PYTHON_CODE_EXEC reduce using rule 10 (statement -> break_statement .)
    PYTHON_CODE     reduce using rule 10 (statement -> break_statement .)
    IF              reduce using rule 10 (statement -> break_statement .)
    (               reduce using rule 10 (statement -> break_statement .)
    !               reduce using rule 10 (statement -> break_statement .)
    +               reduce using rule 10 (statement -> break_statement .)
    -               reduce using rule 10 (statement -> break_statement .)
    \               reduce using rule 10 (statement -> break_statement .)
    [               reduce using rule 10 (statement -> break_statement .)
    {               reduce using rule 10 (statement -> break_statement .)
    STRING          reduce using rule 10 (statement -> break_statement .)
    FALSE           reduce using rule 10 (statement -> break_statement .)
    TRUE            reduce using rule 10 (statement -> break_statement .)
    FLOAT           reduce using rule 10 (statement -> break_statement .)
    INT             reduce using rule 10 (statement -> break_statement .)
    NULL            reduce using rule 10 (statement -> break_statement .)
    $end            reduce using rule 10 (statement -> break_statement .)
    }               reduce using rule 10 (statement -> break_statement .)


state 11

    (11) statement -> variable_assignment .
    SANDBOX         reduce using rule 11 (statement -> variable_assignment .)
    LIMPORT         reduce using rule 11 (statement -> variable_assignment .)
    .               reduce using rule 11 (statement -> variable_assignment .)
    IMPORT          reduce using rule 11 (statement -> variable_assignment .)
    ID              reduce using rule 11 (statement -> variable_assignment .)
    RETURN          reduce using rule 11 (statement -> variable_assignment .)
    DEL             reduce using rule 11 (statement -> variable_assignment .)
    FOR             reduce using rule 11 (statement -> variable_assignment .)
    BREAK           reduce using rule 11 (statement -> variable_assignment .)
    LET             reduce using rule 11 (statement -> variable_assignment .)
    WHILE           reduce using rule 11 (statement -> variable_assignment .)
    NAMESPACE       reduce using rule 11 (statement -> variable_assignment .)
    CLASS           reduce using rule 11 (statement -> variable_assignment .)
    FUNC            reduce using rule 11 (statement -> variable_assignment .)
    PYTHON_CODE_EXEC reduce using rule 11 (statement -> variable_assignment .)
    PYTHON_CODE     reduce using rule 11 (statement -> variable_assignment .)
    IF              reduce using rule 11 (statement -> variable_assignment .)
    (               reduce using rule 11 (statement -> variable_assignment .)
    !               reduce using rule 11 (statement -> variable_assignment .)
    +               reduce using rule 11 (statement -> variable_assignment .)
    -               reduce using rule 11 (statement -> variable_assignment .)
    \               reduce using rule 11 (statement -> variable_assignment .)
    [               reduce using rule 11 (statement -> variable_assignment .)
    {               reduce using rule 11 (statement -> variable_assignment .)
    STRING          reduce using rule 11 (statement -> variable_assignment .)
    FALSE           reduce using rule 11 (statement -> variable_assignment .)
    TRUE            reduce using rule 11 (statement -> variable_assignment .)
    FLOAT           reduce using rule 11 (statement -> variable_assignment .)
    INT             reduce using rule 11 (statement -> variable_assignment .)
    NULL            reduce using rule 11 (statement -> variable_assignment .)
    $end            reduce using rule 11 (statement -> variable_assignment .)
    }               reduce using rule 11 (statement -> variable_assignment .)


state 12

    (12) statement -> python_code_statement .
    SANDBOX         reduce using rule 12 (statement -> python_code_statement .)
    LIMPORT         reduce using rule 12 (statement -> python_code_statement .)
    .               reduce using rule 12 (statement -> python_code_statement .)
    IMPORT          reduce using rule 12 (statement -> python_code_statement .)
    ID              reduce using rule 12 (statement -> python_code_statement .)
    RETURN          reduce using rule 12 (statement -> python_code_statement .)
    DEL             reduce using rule 12 (statement -> python_code_statement .)
    FOR             reduce using rule 12 (statement -> python_code_statement .)
    BREAK           reduce using rule 12 (statement -> python_code_statement .)
    LET             reduce using rule 12 (statement -> python_code_statement .)
    WHILE           reduce using rule 12 (statement -> python_code_statement .)
    NAMESPACE       reduce using rule 12 (statement -> python_code_statement .)
    CLASS           reduce using rule 12 (statement -> python_code_statement .)
    FUNC            reduce using rule 12 (statement -> python_code_statement .)
    PYTHON_CODE_EXEC reduce using rule 12 (statement -> python_code_statement .)
    PYTHON_CODE     reduce using rule 12 (statement -> python_code_statement .)
    IF              reduce using rule 12 (statement -> python_code_statement .)
    (               reduce using rule 12 (statement -> python_code_statement .)
    !               reduce using rule 12 (statement -> python_code_statement .)
    +               reduce using rule 12 (statement -> python_code_statement .)
    -               reduce using rule 12 (statement -> python_code_statement .)
    \               reduce using rule 12 (statement -> python_code_statement .)
    [               reduce using rule 12 (statement -> python_code_statement .)
    {               reduce using rule 12 (statement -> python_code_statement .)
    STRING          reduce using rule 12 (statement -> python_code_statement .)
    FALSE           reduce using rule 12 (statement -> python_code_statement .)
    TRUE            reduce using rule 12 (statement -> python_code_statement .)
    FLOAT           reduce using rule 12 (statement -> python_code_statement .)
    INT             reduce using rule 12 (statement -> python_code_statement .)
    NULL            reduce using rule 12 (statement -> python_code_statement .)
    $end            reduce using rule 12 (statement -> python_code_statement .)
    }               reduce using rule 12 (statement -> python_code_statement .)


state 13

    (13) statement -> while_loop .
    SANDBOX         reduce using rule 13 (statement -> while_loop .)
    LIMPORT         reduce using rule 13 (statement -> while_loop .)
    .               reduce using rule 13 (statement -> while_loop .)
    IMPORT          reduce using rule 13 (statement -> while_loop .)
    ID              reduce using rule 13 (statement -> while_loop .)
    RETURN          reduce using rule 13 (statement -> while_loop .)
    DEL             reduce using rule 13 (statement -> while_loop .)
    FOR             reduce using rule 13 (statement -> while_loop .)
    BREAK           reduce using rule 13 (statement -> while_loop .)
    LET             reduce using rule 13 (statement -> while_loop .)
    WHILE           reduce using rule 13 (statement -> while_loop .)
    NAMESPACE       reduce using rule 13 (statement -> while_loop .)
    CLASS           reduce using rule 13 (statement -> while_loop .)
    FUNC            reduce using rule 13 (statement -> while_loop .)
    PYTHON_CODE_EXEC reduce using rule 13 (statement -> while_loop .)
    PYTHON_CODE     reduce using rule 13 (statement -> while_loop .)
    IF              reduce using rule 13 (statement -> while_loop .)
    (               reduce using rule 13 (statement -> while_loop .)
    !               reduce using rule 13 (statement -> while_loop .)
    +               reduce using rule 13 (statement -> while_loop .)
    -               reduce using rule 13 (statement -> while_loop .)
    \               reduce using rule 13 (statement -> while_loop .)
    [               reduce using rule 13 (statement -> while_loop .)
    {               reduce using rule 13 (statement -> while_loop .)
    STRING          reduce using rule 13 (statement -> while_loop .)
    FALSE           reduce using rule 13 (statement -> while_loop .)
    TRUE            reduce using rule 13 (statement -> while_loop .)
    FLOAT           reduce using rule 13 (statement -> while_loop .)
    INT             reduce using rule 13 (statement -> while_loop .)
    NULL            reduce using rule 13 (statement -> while_loop .)
    $end            reduce using rule 13 (statement -> while_loop .)
    }               reduce using rule 13 (statement -> while_loop .)


state 14

    (14) statement -> conditional .
    SANDBOX         reduce using rule 14 (statement -> conditional .)
    LIMPORT         reduce using rule 14 (statement -> conditional .)
    .               reduce using rule 14 (statement -> conditional .)
    IMPORT          reduce using rule 14 (statement -> conditional .)
    ID              reduce using rule 14 (statement -> conditional .)
    RETURN          reduce using rule 14 (statement -> conditional .)
    DEL             reduce using rule 14 (statement -> conditional .)
    FOR             reduce using rule 14 (statement -> conditional .)
    BREAK           reduce using rule 14 (statement -> conditional .)
    LET             reduce using rule 14 (statement -> conditional .)
    WHILE           reduce using rule 14 (statement -> conditional .)
    NAMESPACE       reduce using rule 14 (statement -> conditional .)
    CLASS           reduce using rule 14 (statement -> conditional .)
    FUNC            reduce using rule 14 (statement -> conditional .)
    PYTHON_CODE_EXEC reduce using rule 14 (statement -> conditional .)
    PYTHON_CODE     reduce using rule 14 (statement -> conditional .)
    IF              reduce using rule 14 (statement -> conditional .)
    (               reduce using rule 14 (statement -> conditional .)
    !               reduce using rule 14 (statement -> conditional .)
    +               reduce using rule 14 (statement -> conditional .)
    -               reduce using rule 14 (statement -> conditional .)
    \               reduce using rule 14 (statement -> conditional .)
    [               reduce using rule 14 (statement -> conditional .)
    {               reduce using rule 14 (statement -> conditional .)
    STRING          reduce using rule 14 (statement -> conditional .)
    FALSE           reduce using rule 14 (statement -> conditional .)
    TRUE            reduce using rule 14 (statement -> conditional .)
    FLOAT           reduce using rule 14 (statement -> conditional .)
    INT             reduce using rule 14 (statement -> conditional .)
    NULL            reduce using rule 14 (statement -> conditional .)
    $end            reduce using rule 14 (statement -> conditional .)
    }               reduce using rule 14 (statement -> conditional .)


state 15

    (15) statement -> class_attribute_assignment .
    SANDBOX         reduce using rule 15 (statement -> class_attribute_assignment .)
    LIMPORT         reduce using rule 15 (statement -> class_attribute_assignment .)
    .               reduce using rule 15 (statement -> class_attribute_assignment .)
    IMPORT          reduce using rule 15 (statement -> class_attribute_assignment .)
    ID              reduce using rule 15 (statement -> class_attribute_assignment .)
    RETURN          reduce using rule 15 (statement -> class_attribute_assignment .)
    DEL             reduce using rule 15 (statement -> class_attribute_assignment .)
    FOR             reduce using rule 15 (statement -> class_attribute_assignment .)
    BREAK           reduce using rule 15 (statement -> class_attribute_assignment .)
    LET             reduce using rule 15 (statement -> class_attribute_assignment .)
    WHILE           reduce using rule 15 (statement -> class_attribute_assignment .)
    NAMESPACE       reduce using rule 15 (statement -> class_attribute_assignment .)
    CLASS           reduce using rule 15 (statement -> class_attribute_assignment .)
    FUNC            reduce using rule 15 (statement -> class_attribute_assignment .)
    PYTHON_CODE_EXEC reduce using rule 15 (statement -> class_attribute_assignment .)
    PYTHON_CODE     reduce using rule 15 (statement -> class_attribute_assignment .)
    IF              reduce using rule 15 (statement -> class_attribute_assignment .)
    (               reduce using rule 15 (statement -> class_attribute_assignment .)
    !               reduce using rule 15 (statement -> class_attribute_assignment .)
    +               reduce using rule 15 (statement -> class_attribute_assignment .)
    -               reduce using rule 15 (statement -> class_attribute_assignment .)
    \               reduce using rule 15 (statement -> class_attribute_assignment .)
    [               reduce using rule 15 (statement -> class_attribute_assignment .)
    {               reduce using rule 15 (statement -> class_attribute_assignment .)
    STRING          reduce using rule 15 (statement -> class_attribute_assignment .)
    FALSE           reduce using rule 15 (statement -> class_attribute_assignment .)
    TRUE            reduce using rule 15 (statement -> class_attribute_assignment .)
    FLOAT           reduce using rule 15 (statement -> class_attribute_assignment .)
    INT             reduce using rule 15 (statement -> class_attribute_assignment .)
    NULL            reduce using rule 15 (statement -> class_attribute_assignment .)
    $end            reduce using rule 15 (statement -> class_attribute_assignment .)
    }               reduce using rule 15 (statement -> class_attribute_assignment .)


state 16

    (16) statement -> function_call_statement .
    SANDBOX         reduce using rule 16 (statement -> function_call_statement .)
    LIMPORT         reduce using rule 16 (statement -> function_call_statement .)
    .               reduce using rule 16 (statement -> function_call_statement .)
    IMPORT          reduce using rule 16 (statement -> function_call_statement .)
    ID              reduce using rule 16 (statement -> function_call_statement .)
    RETURN          reduce using rule 16 (statement -> function_call_statement .)
    DEL             reduce using rule 16 (statement -> function_call_statement .)
    FOR             reduce using rule 16 (statement -> function_call_statement .)
    BREAK           reduce using rule 16 (statement -> function_call_statement .)
    LET             reduce using rule 16 (statement -> function_call_statement .)
    WHILE           reduce using rule 16 (statement -> function_call_statement .)
    NAMESPACE       reduce using rule 16 (statement -> function_call_statement .)
    CLASS           reduce using rule 16 (statement -> function_call_statement .)
    FUNC            reduce using rule 16 (statement -> function_call_statement .)
    PYTHON_CODE_EXEC reduce using rule 16 (statement -> function_call_statement .)
    PYTHON_CODE     reduce using rule 16 (statement -> function_call_statement .)
    IF              reduce using rule 16 (statement -> function_call_statement .)
    (               reduce using rule 16 (statement -> function_call_statement .)
    !               reduce using rule 16 (statement -> function_call_statement .)
    +               reduce using rule 16 (statement -> function_call_statement .)
    -               reduce using rule 16 (statement -> function_call_statement .)
    \               reduce using rule 16 (statement -> function_call_statement .)
    [               reduce using rule 16 (statement -> function_call_statement .)
    {               reduce using rule 16 (statement -> function_call_statement .)
    STRING          reduce using rule 16 (statement -> function_call_statement .)
    FALSE           reduce using rule 16 (statement -> function_call_statement .)
    TRUE            reduce using rule 16 (statement -> function_call_statement .)
    FLOAT           reduce using rule 16 (statement -> function_call_statement .)
    INT             reduce using rule 16 (statement -> function_call_statement .)
    NULL            reduce using rule 16 (statement -> function_call_statement .)
    $end            reduce using rule 16 (statement -> function_call_statement .)
    }               reduce using rule 16 (statement -> function_call_statement .)


state 17

    (17) statement -> class_declaration .
    SANDBOX         reduce using rule 17 (statement -> class_declaration .)
    LIMPORT         reduce using rule 17 (statement -> class_declaration .)
    .               reduce using rule 17 (statement -> class_declaration .)
    IMPORT          reduce using rule 17 (statement -> class_declaration .)
    ID              reduce using rule 17 (statement -> class_declaration .)
    RETURN          reduce using rule 17 (statement -> class_declaration .)
    DEL             reduce using rule 17 (statement -> class_declaration .)
    FOR             reduce using rule 17 (statement -> class_declaration .)
    BREAK           reduce using rule 17 (statement -> class_declaration .)
    LET             reduce using rule 17 (statement -> class_declaration .)
    WHILE           reduce using rule 17 (statement -> class_declaration .)
    NAMESPACE       reduce using rule 17 (statement -> class_declaration .)
    CLASS           reduce using rule 17 (statement -> class_declaration .)
    FUNC            reduce using rule 17 (statement -> class_declaration .)
    PYTHON_CODE_EXEC reduce using rule 17 (statement -> class_declaration .)
    PYTHON_CODE     reduce using rule 17 (statement -> class_declaration .)
    IF              reduce using rule 17 (statement -> class_declaration .)
    (               reduce using rule 17 (statement -> class_declaration .)
    !               reduce using rule 17 (statement -> class_declaration .)
    +               reduce using rule 17 (statement -> class_declaration .)
    -               reduce using rule 17 (statement -> class_declaration .)
    \               reduce using rule 17 (statement -> class_declaration .)
    [               reduce using rule 17 (statement -> class_declaration .)
    {               reduce using rule 17 (statement -> class_declaration .)
    STRING          reduce using rule 17 (statement -> class_declaration .)
    FALSE           reduce using rule 17 (statement -> class_declaration .)
    TRUE            reduce using rule 17 (statement -> class_declaration .)
    FLOAT           reduce using rule 17 (statement -> class_declaration .)
    INT             reduce using rule 17 (statement -> class_declaration .)
    NULL            reduce using rule 17 (statement -> class_declaration .)
    $end            reduce using rule 17 (statement -> class_declaration .)
    }               reduce using rule 17 (statement -> class_declaration .)


state 18

    (18) statement -> function_declaration .
    SANDBOX         reduce using rule 18 (statement -> function_declaration .)
    LIMPORT         reduce using rule 18 (statement -> function_declaration .)
    .               reduce using rule 18 (statement -> function_declaration .)
    IMPORT          reduce using rule 18 (statement -> function_declaration .)
    ID              reduce using rule 18 (statement -> function_declaration .)
    RETURN          reduce using rule 18 (statement -> function_declaration .)
    DEL             reduce using rule 18 (statement -> function_declaration .)
    FOR             reduce using rule 18 (statement -> function_declaration .)
    BREAK           reduce using rule 18 (statement -> function_declaration .)
    LET             reduce using rule 18 (statement -> function_declaration .)
    WHILE           reduce using rule 18 (statement -> function_declaration .)
    NAMESPACE       reduce using rule 18 (statement -> function_declaration .)
    CLASS           reduce using rule 18 (statement -> function_declaration .)
    FUNC            reduce using rule 18 (statement -> function_declaration .)
    PYTHON_CODE_EXEC reduce using rule 18 (statement -> function_declaration .)
    PYTHON_CODE     reduce using rule 18 (statement -> function_declaration .)
    IF              reduce using rule 18 (statement -> function_declaration .)
    (               reduce using rule 18 (statement -> function_declaration .)
    !               reduce using rule 18 (statement -> function_declaration .)
    +               reduce using rule 18 (statement -> function_declaration .)
    -               reduce using rule 18 (statement -> function_declaration .)
    \               reduce using rule 18 (statement -> function_declaration .)
    [               reduce using rule 18 (statement -> function_declaration .)
    {               reduce using rule 18 (statement -> function_declaration .)
    STRING          reduce using rule 18 (statement -> function_declaration .)
    FALSE           reduce using rule 18 (statement -> function_declaration .)
    TRUE            reduce using rule 18 (statement -> function_declaration .)
    FLOAT           reduce using rule 18 (statement -> function_declaration .)
    INT             reduce using rule 18 (statement -> function_declaration .)
    NULL            reduce using rule 18 (statement -> function_declaration .)
    $end            reduce using rule 18 (statement -> function_declaration .)
    }               reduce using rule 18 (statement -> function_declaration .)


state 19

    (19) sandbox -> SANDBOX . { program }
    {               shift and go to state 66


state 20

    (104) _tuple -> { . positional_args , }
    (105) _tuple -> { . positional_args }
    (41) positional_args -> . expression
    (42) positional_args -> . positional_args , expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    positional_args                shift and go to state 67
    expression                     shift and go to state 68
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 21

    (20) sandbox -> LIMPORT . expression ;
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 74
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 22

    (103) get_index -> expression . [ expression ]
    (120) class_attribute -> expression . COLON_COLON ID
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    [               shift and go to state 75
    COLON_COLON     shift and go to state 76
    (               shift and go to state 77
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90


state 23

    (68) import_statement -> . . GLOBAL ;
    GLOBAL          shift and go to state 91


state 24

    (69) import_statement -> IMPORT . expression ;
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 92
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 25

    (47) variable_operation -> get_index . EQ_DIV expression ;
    (49) variable_operation -> get_index . EQ_MOD expression ;
    (51) variable_operation -> get_index . EQ_MUL expression ;
    (53) variable_operation -> get_index . EQ_SUB expression ;
    (55) variable_operation -> get_index . EQ_ADD expression ;
    (81) expression -> get_index .
    EQ_DIV          shift and go to state 93
    EQ_MOD          shift and go to state 94
    EQ_MUL          shift and go to state 95
    EQ_SUB          shift and go to state 96
    EQ_ADD          shift and go to state 97
    [               reduce using rule 81 (expression -> get_index .)
    COLON_COLON     reduce using rule 81 (expression -> get_index .)
    (               reduce using rule 81 (expression -> get_index .)
    >               reduce using rule 81 (expression -> get_index .)
    <               reduce using rule 81 (expression -> get_index .)
    &               reduce using rule 81 (expression -> get_index .)
    |               reduce using rule 81 (expression -> get_index .)
    EQ_GREATER      reduce using rule 81 (expression -> get_index .)
    EQ_LESS         reduce using rule 81 (expression -> get_index .)
    NOT_EQEQ        reduce using rule 81 (expression -> get_index .)
    EQEQ            reduce using rule 81 (expression -> get_index .)
    %               reduce using rule 81 (expression -> get_index .)
    *               reduce using rule 81 (expression -> get_index .)
    /               reduce using rule 81 (expression -> get_index .)
    -               reduce using rule 81 (expression -> get_index .)
    +               reduce using rule 81 (expression -> get_index .)


state 26

    (48) variable_operation -> ID . EQ_DIV expression ;
    (50) variable_operation -> ID . EQ_MOD expression ;
    (52) variable_operation -> ID . EQ_MUL expression ;
    (54) variable_operation -> ID . EQ_SUB expression ;
    (56) variable_operation -> ID . EQ_ADD expression ;
    (101) expression -> ID . OF ID
    (121) id -> ID .
    EQ_DIV          shift and go to state 98
    EQ_MOD          shift and go to state 99
    EQ_MUL          shift and go to state 100
    EQ_SUB          shift and go to state 101
    EQ_ADD          shift and go to state 102
    OF              shift and go to state 103
    [               reduce using rule 121 (id -> ID .)
    COLON_COLON     reduce using rule 121 (id -> ID .)
    (               reduce using rule 121 (id -> ID .)
    >               reduce using rule 121 (id -> ID .)
    <               reduce using rule 121 (id -> ID .)
    &               reduce using rule 121 (id -> ID .)
    |               reduce using rule 121 (id -> ID .)
    EQ_GREATER      reduce using rule 121 (id -> ID .)
    EQ_LESS         reduce using rule 121 (id -> ID .)
    NOT_EQEQ        reduce using rule 121 (id -> ID .)
    EQEQ            reduce using rule 121 (id -> ID .)
    %               reduce using rule 121 (id -> ID .)
    *               reduce using rule 121 (id -> ID .)
    /               reduce using rule 121 (id -> ID .)
    -               reduce using rule 121 (id -> ID .)
    +               reduce using rule 121 (id -> ID .)


state 27

    (24) return_statement -> RETURN . expression ;
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 104
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 28

    (67) delete_statement -> DEL . ID ;
    ID              shift and go to state 105


state 29

    (39) for_loop -> FOR . expression IN expression { program }
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 106
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 30

    (23) break_statement -> BREAK . ;
    ;               shift and go to state 107


state 31

    (45) variable_assignment -> LET . get_index = expression ;
    (46) variable_assignment -> LET . ID = expression ;
    (103) get_index -> . expression [ expression ]
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    ID              shift and go to state 110
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    get_index                      shift and go to state 108
    expression                     shift and go to state 109
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 32

    (22) python_code_statement -> python_code . ;
    (83) expression -> python_code .
    ;               shift and go to state 111
    [               reduce using rule 83 (expression -> python_code .)
    COLON_COLON     reduce using rule 83 (expression -> python_code .)
    (               reduce using rule 83 (expression -> python_code .)
    >               reduce using rule 83 (expression -> python_code .)
    <               reduce using rule 83 (expression -> python_code .)
    &               reduce using rule 83 (expression -> python_code .)
    |               reduce using rule 83 (expression -> python_code .)
    EQ_GREATER      reduce using rule 83 (expression -> python_code .)
    EQ_LESS         reduce using rule 83 (expression -> python_code .)
    NOT_EQEQ        reduce using rule 83 (expression -> python_code .)
    EQEQ            reduce using rule 83 (expression -> python_code .)
    %               reduce using rule 83 (expression -> python_code .)
    *               reduce using rule 83 (expression -> python_code .)
    /               reduce using rule 83 (expression -> python_code .)
    -               reduce using rule 83 (expression -> python_code .)
    +               reduce using rule 83 (expression -> python_code .)


state 33

    (40) while_loop -> WHILE . ( expression ) { program }
    (               shift and go to state 112


state 34

    (84) expression -> ( . expression )
    (108) _numpy -> ( . , )
    (109) _numpy -> ( . )
    (110) _numpy -> ( . expression , )
    (111) _numpy -> ( . items , )
    (112) _numpy -> ( . items )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (113) items -> . expression , expression
    (114) items -> . items , expression
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    ,               shift and go to state 115
    )               shift and go to state 114
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 113
    items                          shift and go to state 116
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 35

    (58) conditional -> if_statement . else_statement
    (59) conditional -> if_statement . else_if_loop else_statement
    (60) conditional -> if_statement . else_if_loop
    (61) conditional -> if_statement .
    (66) else_statement -> . ELSE { program }
    (63) else_if_loop -> . else_if_statement
    (64) else_if_loop -> . else_if_loop else_if_statement
    (65) else_if_statement -> . ELSE IF ( expression ) { program }
    SANDBOX         reduce using rule 61 (conditional -> if_statement .)
    LIMPORT         reduce using rule 61 (conditional -> if_statement .)
    .               reduce using rule 61 (conditional -> if_statement .)
    IMPORT          reduce using rule 61 (conditional -> if_statement .)
    ID              reduce using rule 61 (conditional -> if_statement .)
    RETURN          reduce using rule 61 (conditional -> if_statement .)
    DEL             reduce using rule 61 (conditional -> if_statement .)
    FOR             reduce using rule 61 (conditional -> if_statement .)
    BREAK           reduce using rule 61 (conditional -> if_statement .)
    LET             reduce using rule 61 (conditional -> if_statement .)
    WHILE           reduce using rule 61 (conditional -> if_statement .)
    NAMESPACE       reduce using rule 61 (conditional -> if_statement .)
    CLASS           reduce using rule 61 (conditional -> if_statement .)
    FUNC            reduce using rule 61 (conditional -> if_statement .)
    PYTHON_CODE_EXEC reduce using rule 61 (conditional -> if_statement .)
    PYTHON_CODE     reduce using rule 61 (conditional -> if_statement .)
    IF              reduce using rule 61 (conditional -> if_statement .)
    (               reduce using rule 61 (conditional -> if_statement .)
    !               reduce using rule 61 (conditional -> if_statement .)
    +               reduce using rule 61 (conditional -> if_statement .)
    -               reduce using rule 61 (conditional -> if_statement .)
    \               reduce using rule 61 (conditional -> if_statement .)
    [               reduce using rule 61 (conditional -> if_statement .)
    {               reduce using rule 61 (conditional -> if_statement .)
    STRING          reduce using rule 61 (conditional -> if_statement .)
    FALSE           reduce using rule 61 (conditional -> if_statement .)
    TRUE            reduce using rule 61 (conditional -> if_statement .)
    FLOAT           reduce using rule 61 (conditional -> if_statement .)
    INT             reduce using rule 61 (conditional -> if_statement .)
    NULL            reduce using rule 61 (conditional -> if_statement .)
    $end            reduce using rule 61 (conditional -> if_statement .)
    }               reduce using rule 61 (conditional -> if_statement .)
    ELSE            shift and go to state 119

    else_statement                 shift and go to state 117
    else_if_loop                   shift and go to state 118
    else_if_statement              shift and go to state 120

state 36

    (57) class_attribute_assignment -> class_attribute . = expression ;
    (74) expression -> class_attribute .
    =               shift and go to state 121
    [               reduce using rule 74 (expression -> class_attribute .)
    COLON_COLON     reduce using rule 74 (expression -> class_attribute .)
    (               reduce using rule 74 (expression -> class_attribute .)
    >               reduce using rule 74 (expression -> class_attribute .)
    <               reduce using rule 74 (expression -> class_attribute .)
    &               reduce using rule 74 (expression -> class_attribute .)
    |               reduce using rule 74 (expression -> class_attribute .)
    EQ_GREATER      reduce using rule 74 (expression -> class_attribute .)
    EQ_LESS         reduce using rule 74 (expression -> class_attribute .)
    NOT_EQEQ        reduce using rule 74 (expression -> class_attribute .)
    EQEQ            reduce using rule 74 (expression -> class_attribute .)
    %               reduce using rule 74 (expression -> class_attribute .)
    *               reduce using rule 74 (expression -> class_attribute .)
    /               reduce using rule 74 (expression -> class_attribute .)
    -               reduce using rule 74 (expression -> class_attribute .)
    +               reduce using rule 74 (expression -> class_attribute .)


state 37

    (21) function_call_statement -> function_call . ;
    (82) expression -> function_call .
    ;               shift and go to state 122
    [               reduce using rule 82 (expression -> function_call .)
    COLON_COLON     reduce using rule 82 (expression -> function_call .)
    (               reduce using rule 82 (expression -> function_call .)
    >               reduce using rule 82 (expression -> function_call .)
    <               reduce using rule 82 (expression -> function_call .)
    &               reduce using rule 82 (expression -> function_call .)
    |               reduce using rule 82 (expression -> function_call .)
    EQ_GREATER      reduce using rule 82 (expression -> function_call .)
    EQ_LESS         reduce using rule 82 (expression -> function_call .)
    NOT_EQEQ        reduce using rule 82 (expression -> function_call .)
    EQEQ            reduce using rule 82 (expression -> function_call .)
    %               reduce using rule 82 (expression -> function_call .)
    *               reduce using rule 82 (expression -> function_call .)
    /               reduce using rule 82 (expression -> function_call .)
    -               reduce using rule 82 (expression -> function_call .)
    +               reduce using rule 82 (expression -> function_call .)


state 38

    (37) class_declaration -> NAMESPACE . ID { program }
    ID              shift and go to state 123


state 39

    (38) class_declaration -> CLASS . ID { program }
    ID              shift and go to state 124


state 40

    (30) function_declaration -> FUNC . ID ( empty ) { program } TARROW expression
    (31) function_declaration -> FUNC . ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> FUNC . ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> FUNC . ID ( function_arguments ) { program } TARROW expression
    ID              shift and go to state 125


state 41

    (106) _list -> [ . positional_args , ]
    (107) _list -> [ . positional_args ]
    (41) positional_args -> . expression
    (42) positional_args -> . positional_args , expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    positional_args                shift and go to state 126
    expression                     shift and go to state 68
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 42

    (125) python_code -> PYTHON_CODE_EXEC .
    ;               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    [               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    COLON_COLON     reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    (               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    >               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    <               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    &               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    |               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    EQ_GREATER      reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    EQ_LESS         reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    NOT_EQEQ        reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    EQEQ            reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    %               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    *               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    /               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    -               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    +               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    ,               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    }               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    IN              reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    )               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    ]               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    :               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    {               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    \               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    SANDBOX         reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    LIMPORT         reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    .               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    IMPORT          reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    ID              reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    RETURN          reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    DEL             reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    FOR             reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    BREAK           reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    LET             reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    WHILE           reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    NAMESPACE       reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    CLASS           reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    FUNC            reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    PYTHON_CODE_EXEC reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    PYTHON_CODE     reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    IF              reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    !               reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    STRING          reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    FALSE           reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    TRUE            reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    FLOAT           reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    INT             reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    NULL            reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)
    $end            reduce using rule 125 (python_code -> PYTHON_CODE_EXEC .)


state 43

    (126) python_code -> PYTHON_CODE .
    ;               reduce using rule 126 (python_code -> PYTHON_CODE .)
    [               reduce using rule 126 (python_code -> PYTHON_CODE .)
    COLON_COLON     reduce using rule 126 (python_code -> PYTHON_CODE .)
    (               reduce using rule 126 (python_code -> PYTHON_CODE .)
    >               reduce using rule 126 (python_code -> PYTHON_CODE .)
    <               reduce using rule 126 (python_code -> PYTHON_CODE .)
    &               reduce using rule 126 (python_code -> PYTHON_CODE .)
    |               reduce using rule 126 (python_code -> PYTHON_CODE .)
    EQ_GREATER      reduce using rule 126 (python_code -> PYTHON_CODE .)
    EQ_LESS         reduce using rule 126 (python_code -> PYTHON_CODE .)
    NOT_EQEQ        reduce using rule 126 (python_code -> PYTHON_CODE .)
    EQEQ            reduce using rule 126 (python_code -> PYTHON_CODE .)
    %               reduce using rule 126 (python_code -> PYTHON_CODE .)
    *               reduce using rule 126 (python_code -> PYTHON_CODE .)
    /               reduce using rule 126 (python_code -> PYTHON_CODE .)
    -               reduce using rule 126 (python_code -> PYTHON_CODE .)
    +               reduce using rule 126 (python_code -> PYTHON_CODE .)
    ,               reduce using rule 126 (python_code -> PYTHON_CODE .)
    }               reduce using rule 126 (python_code -> PYTHON_CODE .)
    IN              reduce using rule 126 (python_code -> PYTHON_CODE .)
    )               reduce using rule 126 (python_code -> PYTHON_CODE .)
    ]               reduce using rule 126 (python_code -> PYTHON_CODE .)
    :               reduce using rule 126 (python_code -> PYTHON_CODE .)
    {               reduce using rule 126 (python_code -> PYTHON_CODE .)
    \               reduce using rule 126 (python_code -> PYTHON_CODE .)
    SANDBOX         reduce using rule 126 (python_code -> PYTHON_CODE .)
    LIMPORT         reduce using rule 126 (python_code -> PYTHON_CODE .)
    .               reduce using rule 126 (python_code -> PYTHON_CODE .)
    IMPORT          reduce using rule 126 (python_code -> PYTHON_CODE .)
    ID              reduce using rule 126 (python_code -> PYTHON_CODE .)
    RETURN          reduce using rule 126 (python_code -> PYTHON_CODE .)
    DEL             reduce using rule 126 (python_code -> PYTHON_CODE .)
    FOR             reduce using rule 126 (python_code -> PYTHON_CODE .)
    BREAK           reduce using rule 126 (python_code -> PYTHON_CODE .)
    LET             reduce using rule 126 (python_code -> PYTHON_CODE .)
    WHILE           reduce using rule 126 (python_code -> PYTHON_CODE .)
    NAMESPACE       reduce using rule 126 (python_code -> PYTHON_CODE .)
    CLASS           reduce using rule 126 (python_code -> PYTHON_CODE .)
    FUNC            reduce using rule 126 (python_code -> PYTHON_CODE .)
    PYTHON_CODE_EXEC reduce using rule 126 (python_code -> PYTHON_CODE .)
    PYTHON_CODE     reduce using rule 126 (python_code -> PYTHON_CODE .)
    IF              reduce using rule 126 (python_code -> PYTHON_CODE .)
    !               reduce using rule 126 (python_code -> PYTHON_CODE .)
    STRING          reduce using rule 126 (python_code -> PYTHON_CODE .)
    FALSE           reduce using rule 126 (python_code -> PYTHON_CODE .)
    TRUE            reduce using rule 126 (python_code -> PYTHON_CODE .)
    FLOAT           reduce using rule 126 (python_code -> PYTHON_CODE .)
    INT             reduce using rule 126 (python_code -> PYTHON_CODE .)
    NULL            reduce using rule 126 (python_code -> PYTHON_CODE .)
    $end            reduce using rule 126 (python_code -> PYTHON_CODE .)


state 44

    (62) if_statement -> IF . ( expression ) { program }
    (               shift and go to state 127


state 45

    (70) expression -> assoc_array .
    [               reduce using rule 70 (expression -> assoc_array .)
    COLON_COLON     reduce using rule 70 (expression -> assoc_array .)
    (               reduce using rule 70 (expression -> assoc_array .)
    >               reduce using rule 70 (expression -> assoc_array .)
    <               reduce using rule 70 (expression -> assoc_array .)
    &               reduce using rule 70 (expression -> assoc_array .)
    |               reduce using rule 70 (expression -> assoc_array .)
    EQ_GREATER      reduce using rule 70 (expression -> assoc_array .)
    EQ_LESS         reduce using rule 70 (expression -> assoc_array .)
    NOT_EQEQ        reduce using rule 70 (expression -> assoc_array .)
    EQEQ            reduce using rule 70 (expression -> assoc_array .)
    %               reduce using rule 70 (expression -> assoc_array .)
    *               reduce using rule 70 (expression -> assoc_array .)
    /               reduce using rule 70 (expression -> assoc_array .)
    -               reduce using rule 70 (expression -> assoc_array .)
    +               reduce using rule 70 (expression -> assoc_array .)
    ,               reduce using rule 70 (expression -> assoc_array .)
    }               reduce using rule 70 (expression -> assoc_array .)
    ;               reduce using rule 70 (expression -> assoc_array .)
    IN              reduce using rule 70 (expression -> assoc_array .)
    )               reduce using rule 70 (expression -> assoc_array .)
    ]               reduce using rule 70 (expression -> assoc_array .)
    :               reduce using rule 70 (expression -> assoc_array .)
    {               reduce using rule 70 (expression -> assoc_array .)
    \               reduce using rule 70 (expression -> assoc_array .)
    SANDBOX         reduce using rule 70 (expression -> assoc_array .)
    LIMPORT         reduce using rule 70 (expression -> assoc_array .)
    .               reduce using rule 70 (expression -> assoc_array .)
    IMPORT          reduce using rule 70 (expression -> assoc_array .)
    ID              reduce using rule 70 (expression -> assoc_array .)
    RETURN          reduce using rule 70 (expression -> assoc_array .)
    DEL             reduce using rule 70 (expression -> assoc_array .)
    FOR             reduce using rule 70 (expression -> assoc_array .)
    BREAK           reduce using rule 70 (expression -> assoc_array .)
    LET             reduce using rule 70 (expression -> assoc_array .)
    WHILE           reduce using rule 70 (expression -> assoc_array .)
    NAMESPACE       reduce using rule 70 (expression -> assoc_array .)
    CLASS           reduce using rule 70 (expression -> assoc_array .)
    FUNC            reduce using rule 70 (expression -> assoc_array .)
    PYTHON_CODE_EXEC reduce using rule 70 (expression -> assoc_array .)
    PYTHON_CODE     reduce using rule 70 (expression -> assoc_array .)
    IF              reduce using rule 70 (expression -> assoc_array .)
    !               reduce using rule 70 (expression -> assoc_array .)
    STRING          reduce using rule 70 (expression -> assoc_array .)
    FALSE           reduce using rule 70 (expression -> assoc_array .)
    TRUE            reduce using rule 70 (expression -> assoc_array .)
    FLOAT           reduce using rule 70 (expression -> assoc_array .)
    INT             reduce using rule 70 (expression -> assoc_array .)
    NULL            reduce using rule 70 (expression -> assoc_array .)
    $end            reduce using rule 70 (expression -> assoc_array .)


state 46

    (71) expression -> _numpy .
    [               reduce using rule 71 (expression -> _numpy .)
    COLON_COLON     reduce using rule 71 (expression -> _numpy .)
    (               reduce using rule 71 (expression -> _numpy .)
    >               reduce using rule 71 (expression -> _numpy .)
    <               reduce using rule 71 (expression -> _numpy .)
    &               reduce using rule 71 (expression -> _numpy .)
    |               reduce using rule 71 (expression -> _numpy .)
    EQ_GREATER      reduce using rule 71 (expression -> _numpy .)
    EQ_LESS         reduce using rule 71 (expression -> _numpy .)
    NOT_EQEQ        reduce using rule 71 (expression -> _numpy .)
    EQEQ            reduce using rule 71 (expression -> _numpy .)
    %               reduce using rule 71 (expression -> _numpy .)
    *               reduce using rule 71 (expression -> _numpy .)
    /               reduce using rule 71 (expression -> _numpy .)
    -               reduce using rule 71 (expression -> _numpy .)
    +               reduce using rule 71 (expression -> _numpy .)
    ,               reduce using rule 71 (expression -> _numpy .)
    }               reduce using rule 71 (expression -> _numpy .)
    ;               reduce using rule 71 (expression -> _numpy .)
    IN              reduce using rule 71 (expression -> _numpy .)
    )               reduce using rule 71 (expression -> _numpy .)
    ]               reduce using rule 71 (expression -> _numpy .)
    :               reduce using rule 71 (expression -> _numpy .)
    {               reduce using rule 71 (expression -> _numpy .)
    \               reduce using rule 71 (expression -> _numpy .)
    SANDBOX         reduce using rule 71 (expression -> _numpy .)
    LIMPORT         reduce using rule 71 (expression -> _numpy .)
    .               reduce using rule 71 (expression -> _numpy .)
    IMPORT          reduce using rule 71 (expression -> _numpy .)
    ID              reduce using rule 71 (expression -> _numpy .)
    RETURN          reduce using rule 71 (expression -> _numpy .)
    DEL             reduce using rule 71 (expression -> _numpy .)
    FOR             reduce using rule 71 (expression -> _numpy .)
    BREAK           reduce using rule 71 (expression -> _numpy .)
    LET             reduce using rule 71 (expression -> _numpy .)
    WHILE           reduce using rule 71 (expression -> _numpy .)
    NAMESPACE       reduce using rule 71 (expression -> _numpy .)
    CLASS           reduce using rule 71 (expression -> _numpy .)
    FUNC            reduce using rule 71 (expression -> _numpy .)
    PYTHON_CODE_EXEC reduce using rule 71 (expression -> _numpy .)
    PYTHON_CODE     reduce using rule 71 (expression -> _numpy .)
    IF              reduce using rule 71 (expression -> _numpy .)
    !               reduce using rule 71 (expression -> _numpy .)
    STRING          reduce using rule 71 (expression -> _numpy .)
    FALSE           reduce using rule 71 (expression -> _numpy .)
    TRUE            reduce using rule 71 (expression -> _numpy .)
    FLOAT           reduce using rule 71 (expression -> _numpy .)
    INT             reduce using rule 71 (expression -> _numpy .)
    NULL            reduce using rule 71 (expression -> _numpy .)
    $end            reduce using rule 71 (expression -> _numpy .)


state 47

    (72) expression -> _list .
    [               reduce using rule 72 (expression -> _list .)
    COLON_COLON     reduce using rule 72 (expression -> _list .)
    (               reduce using rule 72 (expression -> _list .)
    >               reduce using rule 72 (expression -> _list .)
    <               reduce using rule 72 (expression -> _list .)
    &               reduce using rule 72 (expression -> _list .)
    |               reduce using rule 72 (expression -> _list .)
    EQ_GREATER      reduce using rule 72 (expression -> _list .)
    EQ_LESS         reduce using rule 72 (expression -> _list .)
    NOT_EQEQ        reduce using rule 72 (expression -> _list .)
    EQEQ            reduce using rule 72 (expression -> _list .)
    %               reduce using rule 72 (expression -> _list .)
    *               reduce using rule 72 (expression -> _list .)
    /               reduce using rule 72 (expression -> _list .)
    -               reduce using rule 72 (expression -> _list .)
    +               reduce using rule 72 (expression -> _list .)
    ,               reduce using rule 72 (expression -> _list .)
    }               reduce using rule 72 (expression -> _list .)
    ;               reduce using rule 72 (expression -> _list .)
    IN              reduce using rule 72 (expression -> _list .)
    )               reduce using rule 72 (expression -> _list .)
    ]               reduce using rule 72 (expression -> _list .)
    :               reduce using rule 72 (expression -> _list .)
    {               reduce using rule 72 (expression -> _list .)
    \               reduce using rule 72 (expression -> _list .)
    SANDBOX         reduce using rule 72 (expression -> _list .)
    LIMPORT         reduce using rule 72 (expression -> _list .)
    .               reduce using rule 72 (expression -> _list .)
    IMPORT          reduce using rule 72 (expression -> _list .)
    ID              reduce using rule 72 (expression -> _list .)
    RETURN          reduce using rule 72 (expression -> _list .)
    DEL             reduce using rule 72 (expression -> _list .)
    FOR             reduce using rule 72 (expression -> _list .)
    BREAK           reduce using rule 72 (expression -> _list .)
    LET             reduce using rule 72 (expression -> _list .)
    WHILE           reduce using rule 72 (expression -> _list .)
    NAMESPACE       reduce using rule 72 (expression -> _list .)
    CLASS           reduce using rule 72 (expression -> _list .)
    FUNC            reduce using rule 72 (expression -> _list .)
    PYTHON_CODE_EXEC reduce using rule 72 (expression -> _list .)
    PYTHON_CODE     reduce using rule 72 (expression -> _list .)
    IF              reduce using rule 72 (expression -> _list .)
    !               reduce using rule 72 (expression -> _list .)
    STRING          reduce using rule 72 (expression -> _list .)
    FALSE           reduce using rule 72 (expression -> _list .)
    TRUE            reduce using rule 72 (expression -> _list .)
    FLOAT           reduce using rule 72 (expression -> _list .)
    INT             reduce using rule 72 (expression -> _list .)
    NULL            reduce using rule 72 (expression -> _list .)
    $end            reduce using rule 72 (expression -> _list .)


state 48

    (73) expression -> _tuple .
    [               reduce using rule 73 (expression -> _tuple .)
    COLON_COLON     reduce using rule 73 (expression -> _tuple .)
    (               reduce using rule 73 (expression -> _tuple .)
    >               reduce using rule 73 (expression -> _tuple .)
    <               reduce using rule 73 (expression -> _tuple .)
    &               reduce using rule 73 (expression -> _tuple .)
    |               reduce using rule 73 (expression -> _tuple .)
    EQ_GREATER      reduce using rule 73 (expression -> _tuple .)
    EQ_LESS         reduce using rule 73 (expression -> _tuple .)
    NOT_EQEQ        reduce using rule 73 (expression -> _tuple .)
    EQEQ            reduce using rule 73 (expression -> _tuple .)
    %               reduce using rule 73 (expression -> _tuple .)
    *               reduce using rule 73 (expression -> _tuple .)
    /               reduce using rule 73 (expression -> _tuple .)
    -               reduce using rule 73 (expression -> _tuple .)
    +               reduce using rule 73 (expression -> _tuple .)
    ,               reduce using rule 73 (expression -> _tuple .)
    }               reduce using rule 73 (expression -> _tuple .)
    ;               reduce using rule 73 (expression -> _tuple .)
    IN              reduce using rule 73 (expression -> _tuple .)
    )               reduce using rule 73 (expression -> _tuple .)
    ]               reduce using rule 73 (expression -> _tuple .)
    :               reduce using rule 73 (expression -> _tuple .)
    {               reduce using rule 73 (expression -> _tuple .)
    \               reduce using rule 73 (expression -> _tuple .)
    SANDBOX         reduce using rule 73 (expression -> _tuple .)
    LIMPORT         reduce using rule 73 (expression -> _tuple .)
    .               reduce using rule 73 (expression -> _tuple .)
    IMPORT          reduce using rule 73 (expression -> _tuple .)
    ID              reduce using rule 73 (expression -> _tuple .)
    RETURN          reduce using rule 73 (expression -> _tuple .)
    DEL             reduce using rule 73 (expression -> _tuple .)
    FOR             reduce using rule 73 (expression -> _tuple .)
    BREAK           reduce using rule 73 (expression -> _tuple .)
    LET             reduce using rule 73 (expression -> _tuple .)
    WHILE           reduce using rule 73 (expression -> _tuple .)
    NAMESPACE       reduce using rule 73 (expression -> _tuple .)
    CLASS           reduce using rule 73 (expression -> _tuple .)
    FUNC            reduce using rule 73 (expression -> _tuple .)
    PYTHON_CODE_EXEC reduce using rule 73 (expression -> _tuple .)
    PYTHON_CODE     reduce using rule 73 (expression -> _tuple .)
    IF              reduce using rule 73 (expression -> _tuple .)
    !               reduce using rule 73 (expression -> _tuple .)
    STRING          reduce using rule 73 (expression -> _tuple .)
    FALSE           reduce using rule 73 (expression -> _tuple .)
    TRUE            reduce using rule 73 (expression -> _tuple .)
    FLOAT           reduce using rule 73 (expression -> _tuple .)
    INT             reduce using rule 73 (expression -> _tuple .)
    NULL            reduce using rule 73 (expression -> _tuple .)
    $end            reduce using rule 73 (expression -> _tuple .)


state 49

    (75) expression -> id .
    [               reduce using rule 75 (expression -> id .)
    COLON_COLON     reduce using rule 75 (expression -> id .)
    (               reduce using rule 75 (expression -> id .)
    >               reduce using rule 75 (expression -> id .)
    <               reduce using rule 75 (expression -> id .)
    &               reduce using rule 75 (expression -> id .)
    |               reduce using rule 75 (expression -> id .)
    EQ_GREATER      reduce using rule 75 (expression -> id .)
    EQ_LESS         reduce using rule 75 (expression -> id .)
    NOT_EQEQ        reduce using rule 75 (expression -> id .)
    EQEQ            reduce using rule 75 (expression -> id .)
    %               reduce using rule 75 (expression -> id .)
    *               reduce using rule 75 (expression -> id .)
    /               reduce using rule 75 (expression -> id .)
    -               reduce using rule 75 (expression -> id .)
    +               reduce using rule 75 (expression -> id .)
    ,               reduce using rule 75 (expression -> id .)
    }               reduce using rule 75 (expression -> id .)
    ;               reduce using rule 75 (expression -> id .)
    IN              reduce using rule 75 (expression -> id .)
    )               reduce using rule 75 (expression -> id .)
    ]               reduce using rule 75 (expression -> id .)
    :               reduce using rule 75 (expression -> id .)
    {               reduce using rule 75 (expression -> id .)
    \               reduce using rule 75 (expression -> id .)
    SANDBOX         reduce using rule 75 (expression -> id .)
    LIMPORT         reduce using rule 75 (expression -> id .)
    .               reduce using rule 75 (expression -> id .)
    IMPORT          reduce using rule 75 (expression -> id .)
    ID              reduce using rule 75 (expression -> id .)
    RETURN          reduce using rule 75 (expression -> id .)
    DEL             reduce using rule 75 (expression -> id .)
    FOR             reduce using rule 75 (expression -> id .)
    BREAK           reduce using rule 75 (expression -> id .)
    LET             reduce using rule 75 (expression -> id .)
    WHILE           reduce using rule 75 (expression -> id .)
    NAMESPACE       reduce using rule 75 (expression -> id .)
    CLASS           reduce using rule 75 (expression -> id .)
    FUNC            reduce using rule 75 (expression -> id .)
    PYTHON_CODE_EXEC reduce using rule 75 (expression -> id .)
    PYTHON_CODE     reduce using rule 75 (expression -> id .)
    IF              reduce using rule 75 (expression -> id .)
    !               reduce using rule 75 (expression -> id .)
    STRING          reduce using rule 75 (expression -> id .)
    FALSE           reduce using rule 75 (expression -> id .)
    TRUE            reduce using rule 75 (expression -> id .)
    FLOAT           reduce using rule 75 (expression -> id .)
    INT             reduce using rule 75 (expression -> id .)
    NULL            reduce using rule 75 (expression -> id .)
    $end            reduce using rule 75 (expression -> id .)


state 50

    (76) expression -> string .
    [               reduce using rule 76 (expression -> string .)
    COLON_COLON     reduce using rule 76 (expression -> string .)
    (               reduce using rule 76 (expression -> string .)
    >               reduce using rule 76 (expression -> string .)
    <               reduce using rule 76 (expression -> string .)
    &               reduce using rule 76 (expression -> string .)
    |               reduce using rule 76 (expression -> string .)
    EQ_GREATER      reduce using rule 76 (expression -> string .)
    EQ_LESS         reduce using rule 76 (expression -> string .)
    NOT_EQEQ        reduce using rule 76 (expression -> string .)
    EQEQ            reduce using rule 76 (expression -> string .)
    %               reduce using rule 76 (expression -> string .)
    *               reduce using rule 76 (expression -> string .)
    /               reduce using rule 76 (expression -> string .)
    -               reduce using rule 76 (expression -> string .)
    +               reduce using rule 76 (expression -> string .)
    ,               reduce using rule 76 (expression -> string .)
    }               reduce using rule 76 (expression -> string .)
    ;               reduce using rule 76 (expression -> string .)
    IN              reduce using rule 76 (expression -> string .)
    )               reduce using rule 76 (expression -> string .)
    ]               reduce using rule 76 (expression -> string .)
    :               reduce using rule 76 (expression -> string .)
    {               reduce using rule 76 (expression -> string .)
    \               reduce using rule 76 (expression -> string .)
    SANDBOX         reduce using rule 76 (expression -> string .)
    LIMPORT         reduce using rule 76 (expression -> string .)
    .               reduce using rule 76 (expression -> string .)
    IMPORT          reduce using rule 76 (expression -> string .)
    ID              reduce using rule 76 (expression -> string .)
    RETURN          reduce using rule 76 (expression -> string .)
    DEL             reduce using rule 76 (expression -> string .)
    FOR             reduce using rule 76 (expression -> string .)
    BREAK           reduce using rule 76 (expression -> string .)
    LET             reduce using rule 76 (expression -> string .)
    WHILE           reduce using rule 76 (expression -> string .)
    NAMESPACE       reduce using rule 76 (expression -> string .)
    CLASS           reduce using rule 76 (expression -> string .)
    FUNC            reduce using rule 76 (expression -> string .)
    PYTHON_CODE_EXEC reduce using rule 76 (expression -> string .)
    PYTHON_CODE     reduce using rule 76 (expression -> string .)
    IF              reduce using rule 76 (expression -> string .)
    !               reduce using rule 76 (expression -> string .)
    STRING          reduce using rule 76 (expression -> string .)
    FALSE           reduce using rule 76 (expression -> string .)
    TRUE            reduce using rule 76 (expression -> string .)
    FLOAT           reduce using rule 76 (expression -> string .)
    INT             reduce using rule 76 (expression -> string .)
    NULL            reduce using rule 76 (expression -> string .)
    $end            reduce using rule 76 (expression -> string .)


state 51

    (77) expression -> bool .
    [               reduce using rule 77 (expression -> bool .)
    COLON_COLON     reduce using rule 77 (expression -> bool .)
    (               reduce using rule 77 (expression -> bool .)
    >               reduce using rule 77 (expression -> bool .)
    <               reduce using rule 77 (expression -> bool .)
    &               reduce using rule 77 (expression -> bool .)
    |               reduce using rule 77 (expression -> bool .)
    EQ_GREATER      reduce using rule 77 (expression -> bool .)
    EQ_LESS         reduce using rule 77 (expression -> bool .)
    NOT_EQEQ        reduce using rule 77 (expression -> bool .)
    EQEQ            reduce using rule 77 (expression -> bool .)
    %               reduce using rule 77 (expression -> bool .)
    *               reduce using rule 77 (expression -> bool .)
    /               reduce using rule 77 (expression -> bool .)
    -               reduce using rule 77 (expression -> bool .)
    +               reduce using rule 77 (expression -> bool .)
    ,               reduce using rule 77 (expression -> bool .)
    }               reduce using rule 77 (expression -> bool .)
    ;               reduce using rule 77 (expression -> bool .)
    IN              reduce using rule 77 (expression -> bool .)
    )               reduce using rule 77 (expression -> bool .)
    ]               reduce using rule 77 (expression -> bool .)
    :               reduce using rule 77 (expression -> bool .)
    {               reduce using rule 77 (expression -> bool .)
    \               reduce using rule 77 (expression -> bool .)
    SANDBOX         reduce using rule 77 (expression -> bool .)
    LIMPORT         reduce using rule 77 (expression -> bool .)
    .               reduce using rule 77 (expression -> bool .)
    IMPORT          reduce using rule 77 (expression -> bool .)
    ID              reduce using rule 77 (expression -> bool .)
    RETURN          reduce using rule 77 (expression -> bool .)
    DEL             reduce using rule 77 (expression -> bool .)
    FOR             reduce using rule 77 (expression -> bool .)
    BREAK           reduce using rule 77 (expression -> bool .)
    LET             reduce using rule 77 (expression -> bool .)
    WHILE           reduce using rule 77 (expression -> bool .)
    NAMESPACE       reduce using rule 77 (expression -> bool .)
    CLASS           reduce using rule 77 (expression -> bool .)
    FUNC            reduce using rule 77 (expression -> bool .)
    PYTHON_CODE_EXEC reduce using rule 77 (expression -> bool .)
    PYTHON_CODE     reduce using rule 77 (expression -> bool .)
    IF              reduce using rule 77 (expression -> bool .)
    !               reduce using rule 77 (expression -> bool .)
    STRING          reduce using rule 77 (expression -> bool .)
    FALSE           reduce using rule 77 (expression -> bool .)
    TRUE            reduce using rule 77 (expression -> bool .)
    FLOAT           reduce using rule 77 (expression -> bool .)
    INT             reduce using rule 77 (expression -> bool .)
    NULL            reduce using rule 77 (expression -> bool .)
    $end            reduce using rule 77 (expression -> bool .)


state 52

    (78) expression -> float .
    [               reduce using rule 78 (expression -> float .)
    COLON_COLON     reduce using rule 78 (expression -> float .)
    (               reduce using rule 78 (expression -> float .)
    >               reduce using rule 78 (expression -> float .)
    <               reduce using rule 78 (expression -> float .)
    &               reduce using rule 78 (expression -> float .)
    |               reduce using rule 78 (expression -> float .)
    EQ_GREATER      reduce using rule 78 (expression -> float .)
    EQ_LESS         reduce using rule 78 (expression -> float .)
    NOT_EQEQ        reduce using rule 78 (expression -> float .)
    EQEQ            reduce using rule 78 (expression -> float .)
    %               reduce using rule 78 (expression -> float .)
    *               reduce using rule 78 (expression -> float .)
    /               reduce using rule 78 (expression -> float .)
    -               reduce using rule 78 (expression -> float .)
    +               reduce using rule 78 (expression -> float .)
    ,               reduce using rule 78 (expression -> float .)
    }               reduce using rule 78 (expression -> float .)
    ;               reduce using rule 78 (expression -> float .)
    IN              reduce using rule 78 (expression -> float .)
    )               reduce using rule 78 (expression -> float .)
    ]               reduce using rule 78 (expression -> float .)
    :               reduce using rule 78 (expression -> float .)
    {               reduce using rule 78 (expression -> float .)
    \               reduce using rule 78 (expression -> float .)
    SANDBOX         reduce using rule 78 (expression -> float .)
    LIMPORT         reduce using rule 78 (expression -> float .)
    .               reduce using rule 78 (expression -> float .)
    IMPORT          reduce using rule 78 (expression -> float .)
    ID              reduce using rule 78 (expression -> float .)
    RETURN          reduce using rule 78 (expression -> float .)
    DEL             reduce using rule 78 (expression -> float .)
    FOR             reduce using rule 78 (expression -> float .)
    BREAK           reduce using rule 78 (expression -> float .)
    LET             reduce using rule 78 (expression -> float .)
    WHILE           reduce using rule 78 (expression -> float .)
    NAMESPACE       reduce using rule 78 (expression -> float .)
    CLASS           reduce using rule 78 (expression -> float .)
    FUNC            reduce using rule 78 (expression -> float .)
    PYTHON_CODE_EXEC reduce using rule 78 (expression -> float .)
    PYTHON_CODE     reduce using rule 78 (expression -> float .)
    IF              reduce using rule 78 (expression -> float .)
    !               reduce using rule 78 (expression -> float .)
    STRING          reduce using rule 78 (expression -> float .)
    FALSE           reduce using rule 78 (expression -> float .)
    TRUE            reduce using rule 78 (expression -> float .)
    FLOAT           reduce using rule 78 (expression -> float .)
    INT             reduce using rule 78 (expression -> float .)
    NULL            reduce using rule 78 (expression -> float .)
    $end            reduce using rule 78 (expression -> float .)


state 53

    (79) expression -> int .
    [               reduce using rule 79 (expression -> int .)
    COLON_COLON     reduce using rule 79 (expression -> int .)
    (               reduce using rule 79 (expression -> int .)
    >               reduce using rule 79 (expression -> int .)
    <               reduce using rule 79 (expression -> int .)
    &               reduce using rule 79 (expression -> int .)
    |               reduce using rule 79 (expression -> int .)
    EQ_GREATER      reduce using rule 79 (expression -> int .)
    EQ_LESS         reduce using rule 79 (expression -> int .)
    NOT_EQEQ        reduce using rule 79 (expression -> int .)
    EQEQ            reduce using rule 79 (expression -> int .)
    %               reduce using rule 79 (expression -> int .)
    *               reduce using rule 79 (expression -> int .)
    /               reduce using rule 79 (expression -> int .)
    -               reduce using rule 79 (expression -> int .)
    +               reduce using rule 79 (expression -> int .)
    ,               reduce using rule 79 (expression -> int .)
    }               reduce using rule 79 (expression -> int .)
    ;               reduce using rule 79 (expression -> int .)
    IN              reduce using rule 79 (expression -> int .)
    )               reduce using rule 79 (expression -> int .)
    ]               reduce using rule 79 (expression -> int .)
    :               reduce using rule 79 (expression -> int .)
    {               reduce using rule 79 (expression -> int .)
    \               reduce using rule 79 (expression -> int .)
    SANDBOX         reduce using rule 79 (expression -> int .)
    LIMPORT         reduce using rule 79 (expression -> int .)
    .               reduce using rule 79 (expression -> int .)
    IMPORT          reduce using rule 79 (expression -> int .)
    ID              reduce using rule 79 (expression -> int .)
    RETURN          reduce using rule 79 (expression -> int .)
    DEL             reduce using rule 79 (expression -> int .)
    FOR             reduce using rule 79 (expression -> int .)
    BREAK           reduce using rule 79 (expression -> int .)
    LET             reduce using rule 79 (expression -> int .)
    WHILE           reduce using rule 79 (expression -> int .)
    NAMESPACE       reduce using rule 79 (expression -> int .)
    CLASS           reduce using rule 79 (expression -> int .)
    FUNC            reduce using rule 79 (expression -> int .)
    PYTHON_CODE_EXEC reduce using rule 79 (expression -> int .)
    PYTHON_CODE     reduce using rule 79 (expression -> int .)
    IF              reduce using rule 79 (expression -> int .)
    !               reduce using rule 79 (expression -> int .)
    STRING          reduce using rule 79 (expression -> int .)
    FALSE           reduce using rule 79 (expression -> int .)
    TRUE            reduce using rule 79 (expression -> int .)
    FLOAT           reduce using rule 79 (expression -> int .)
    INT             reduce using rule 79 (expression -> int .)
    NULL            reduce using rule 79 (expression -> int .)
    $end            reduce using rule 79 (expression -> int .)


state 54

    (80) expression -> null .
    [               reduce using rule 80 (expression -> null .)
    COLON_COLON     reduce using rule 80 (expression -> null .)
    (               reduce using rule 80 (expression -> null .)
    >               reduce using rule 80 (expression -> null .)
    <               reduce using rule 80 (expression -> null .)
    &               reduce using rule 80 (expression -> null .)
    |               reduce using rule 80 (expression -> null .)
    EQ_GREATER      reduce using rule 80 (expression -> null .)
    EQ_LESS         reduce using rule 80 (expression -> null .)
    NOT_EQEQ        reduce using rule 80 (expression -> null .)
    EQEQ            reduce using rule 80 (expression -> null .)
    %               reduce using rule 80 (expression -> null .)
    *               reduce using rule 80 (expression -> null .)
    /               reduce using rule 80 (expression -> null .)
    -               reduce using rule 80 (expression -> null .)
    +               reduce using rule 80 (expression -> null .)
    ,               reduce using rule 80 (expression -> null .)
    }               reduce using rule 80 (expression -> null .)
    ;               reduce using rule 80 (expression -> null .)
    IN              reduce using rule 80 (expression -> null .)
    )               reduce using rule 80 (expression -> null .)
    ]               reduce using rule 80 (expression -> null .)
    :               reduce using rule 80 (expression -> null .)
    {               reduce using rule 80 (expression -> null .)
    \               reduce using rule 80 (expression -> null .)
    SANDBOX         reduce using rule 80 (expression -> null .)
    LIMPORT         reduce using rule 80 (expression -> null .)
    .               reduce using rule 80 (expression -> null .)
    IMPORT          reduce using rule 80 (expression -> null .)
    ID              reduce using rule 80 (expression -> null .)
    RETURN          reduce using rule 80 (expression -> null .)
    DEL             reduce using rule 80 (expression -> null .)
    FOR             reduce using rule 80 (expression -> null .)
    BREAK           reduce using rule 80 (expression -> null .)
    LET             reduce using rule 80 (expression -> null .)
    WHILE           reduce using rule 80 (expression -> null .)
    NAMESPACE       reduce using rule 80 (expression -> null .)
    CLASS           reduce using rule 80 (expression -> null .)
    FUNC            reduce using rule 80 (expression -> null .)
    PYTHON_CODE_EXEC reduce using rule 80 (expression -> null .)
    PYTHON_CODE     reduce using rule 80 (expression -> null .)
    IF              reduce using rule 80 (expression -> null .)
    !               reduce using rule 80 (expression -> null .)
    STRING          reduce using rule 80 (expression -> null .)
    FALSE           reduce using rule 80 (expression -> null .)
    TRUE            reduce using rule 80 (expression -> null .)
    FLOAT           reduce using rule 80 (expression -> null .)
    INT             reduce using rule 80 (expression -> null .)
    NULL            reduce using rule 80 (expression -> null .)
    $end            reduce using rule 80 (expression -> null .)


state 55

    (87) expression -> ! . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 128
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 56

    (100) expression -> - . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 129
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 57

    (99) expression -> + . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 130
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 58

    (122) assoc_array -> \ . assoc_array_items \
    (123) assoc_array_items -> . expression : expression
    (124) assoc_array_items -> . assoc_array_items , expression : expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    assoc_array_items              shift and go to state 131
    expression                     shift and go to state 132
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 59

    (116) string -> STRING .
    [               reduce using rule 116 (string -> STRING .)
    COLON_COLON     reduce using rule 116 (string -> STRING .)
    (               reduce using rule 116 (string -> STRING .)
    >               reduce using rule 116 (string -> STRING .)
    <               reduce using rule 116 (string -> STRING .)
    &               reduce using rule 116 (string -> STRING .)
    |               reduce using rule 116 (string -> STRING .)
    EQ_GREATER      reduce using rule 116 (string -> STRING .)
    EQ_LESS         reduce using rule 116 (string -> STRING .)
    NOT_EQEQ        reduce using rule 116 (string -> STRING .)
    EQEQ            reduce using rule 116 (string -> STRING .)
    %               reduce using rule 116 (string -> STRING .)
    *               reduce using rule 116 (string -> STRING .)
    /               reduce using rule 116 (string -> STRING .)
    -               reduce using rule 116 (string -> STRING .)
    +               reduce using rule 116 (string -> STRING .)
    ,               reduce using rule 116 (string -> STRING .)
    }               reduce using rule 116 (string -> STRING .)
    ;               reduce using rule 116 (string -> STRING .)
    IN              reduce using rule 116 (string -> STRING .)
    )               reduce using rule 116 (string -> STRING .)
    ]               reduce using rule 116 (string -> STRING .)
    :               reduce using rule 116 (string -> STRING .)
    {               reduce using rule 116 (string -> STRING .)
    \               reduce using rule 116 (string -> STRING .)
    SANDBOX         reduce using rule 116 (string -> STRING .)
    LIMPORT         reduce using rule 116 (string -> STRING .)
    .               reduce using rule 116 (string -> STRING .)
    IMPORT          reduce using rule 116 (string -> STRING .)
    ID              reduce using rule 116 (string -> STRING .)
    RETURN          reduce using rule 116 (string -> STRING .)
    DEL             reduce using rule 116 (string -> STRING .)
    FOR             reduce using rule 116 (string -> STRING .)
    BREAK           reduce using rule 116 (string -> STRING .)
    LET             reduce using rule 116 (string -> STRING .)
    WHILE           reduce using rule 116 (string -> STRING .)
    NAMESPACE       reduce using rule 116 (string -> STRING .)
    CLASS           reduce using rule 116 (string -> STRING .)
    FUNC            reduce using rule 116 (string -> STRING .)
    PYTHON_CODE_EXEC reduce using rule 116 (string -> STRING .)
    PYTHON_CODE     reduce using rule 116 (string -> STRING .)
    IF              reduce using rule 116 (string -> STRING .)
    !               reduce using rule 116 (string -> STRING .)
    STRING          reduce using rule 116 (string -> STRING .)
    FALSE           reduce using rule 116 (string -> STRING .)
    TRUE            reduce using rule 116 (string -> STRING .)
    FLOAT           reduce using rule 116 (string -> STRING .)
    INT             reduce using rule 116 (string -> STRING .)
    NULL            reduce using rule 116 (string -> STRING .)
    $end            reduce using rule 116 (string -> STRING .)


state 60

    (118) bool -> FALSE .
    [               reduce using rule 118 (bool -> FALSE .)
    COLON_COLON     reduce using rule 118 (bool -> FALSE .)
    (               reduce using rule 118 (bool -> FALSE .)
    >               reduce using rule 118 (bool -> FALSE .)
    <               reduce using rule 118 (bool -> FALSE .)
    &               reduce using rule 118 (bool -> FALSE .)
    |               reduce using rule 118 (bool -> FALSE .)
    EQ_GREATER      reduce using rule 118 (bool -> FALSE .)
    EQ_LESS         reduce using rule 118 (bool -> FALSE .)
    NOT_EQEQ        reduce using rule 118 (bool -> FALSE .)
    EQEQ            reduce using rule 118 (bool -> FALSE .)
    %               reduce using rule 118 (bool -> FALSE .)
    *               reduce using rule 118 (bool -> FALSE .)
    /               reduce using rule 118 (bool -> FALSE .)
    -               reduce using rule 118 (bool -> FALSE .)
    +               reduce using rule 118 (bool -> FALSE .)
    ,               reduce using rule 118 (bool -> FALSE .)
    }               reduce using rule 118 (bool -> FALSE .)
    ;               reduce using rule 118 (bool -> FALSE .)
    IN              reduce using rule 118 (bool -> FALSE .)
    )               reduce using rule 118 (bool -> FALSE .)
    ]               reduce using rule 118 (bool -> FALSE .)
    :               reduce using rule 118 (bool -> FALSE .)
    {               reduce using rule 118 (bool -> FALSE .)
    \               reduce using rule 118 (bool -> FALSE .)
    SANDBOX         reduce using rule 118 (bool -> FALSE .)
    LIMPORT         reduce using rule 118 (bool -> FALSE .)
    .               reduce using rule 118 (bool -> FALSE .)
    IMPORT          reduce using rule 118 (bool -> FALSE .)
    ID              reduce using rule 118 (bool -> FALSE .)
    RETURN          reduce using rule 118 (bool -> FALSE .)
    DEL             reduce using rule 118 (bool -> FALSE .)
    FOR             reduce using rule 118 (bool -> FALSE .)
    BREAK           reduce using rule 118 (bool -> FALSE .)
    LET             reduce using rule 118 (bool -> FALSE .)
    WHILE           reduce using rule 118 (bool -> FALSE .)
    NAMESPACE       reduce using rule 118 (bool -> FALSE .)
    CLASS           reduce using rule 118 (bool -> FALSE .)
    FUNC            reduce using rule 118 (bool -> FALSE .)
    PYTHON_CODE_EXEC reduce using rule 118 (bool -> FALSE .)
    PYTHON_CODE     reduce using rule 118 (bool -> FALSE .)
    IF              reduce using rule 118 (bool -> FALSE .)
    !               reduce using rule 118 (bool -> FALSE .)
    STRING          reduce using rule 118 (bool -> FALSE .)
    FALSE           reduce using rule 118 (bool -> FALSE .)
    TRUE            reduce using rule 118 (bool -> FALSE .)
    FLOAT           reduce using rule 118 (bool -> FALSE .)
    INT             reduce using rule 118 (bool -> FALSE .)
    NULL            reduce using rule 118 (bool -> FALSE .)
    $end            reduce using rule 118 (bool -> FALSE .)


state 61

    (119) bool -> TRUE .
    [               reduce using rule 119 (bool -> TRUE .)
    COLON_COLON     reduce using rule 119 (bool -> TRUE .)
    (               reduce using rule 119 (bool -> TRUE .)
    >               reduce using rule 119 (bool -> TRUE .)
    <               reduce using rule 119 (bool -> TRUE .)
    &               reduce using rule 119 (bool -> TRUE .)
    |               reduce using rule 119 (bool -> TRUE .)
    EQ_GREATER      reduce using rule 119 (bool -> TRUE .)
    EQ_LESS         reduce using rule 119 (bool -> TRUE .)
    NOT_EQEQ        reduce using rule 119 (bool -> TRUE .)
    EQEQ            reduce using rule 119 (bool -> TRUE .)
    %               reduce using rule 119 (bool -> TRUE .)
    *               reduce using rule 119 (bool -> TRUE .)
    /               reduce using rule 119 (bool -> TRUE .)
    -               reduce using rule 119 (bool -> TRUE .)
    +               reduce using rule 119 (bool -> TRUE .)
    ,               reduce using rule 119 (bool -> TRUE .)
    }               reduce using rule 119 (bool -> TRUE .)
    ;               reduce using rule 119 (bool -> TRUE .)
    IN              reduce using rule 119 (bool -> TRUE .)
    )               reduce using rule 119 (bool -> TRUE .)
    ]               reduce using rule 119 (bool -> TRUE .)
    :               reduce using rule 119 (bool -> TRUE .)
    {               reduce using rule 119 (bool -> TRUE .)
    \               reduce using rule 119 (bool -> TRUE .)
    SANDBOX         reduce using rule 119 (bool -> TRUE .)
    LIMPORT         reduce using rule 119 (bool -> TRUE .)
    .               reduce using rule 119 (bool -> TRUE .)
    IMPORT          reduce using rule 119 (bool -> TRUE .)
    ID              reduce using rule 119 (bool -> TRUE .)
    RETURN          reduce using rule 119 (bool -> TRUE .)
    DEL             reduce using rule 119 (bool -> TRUE .)
    FOR             reduce using rule 119 (bool -> TRUE .)
    BREAK           reduce using rule 119 (bool -> TRUE .)
    LET             reduce using rule 119 (bool -> TRUE .)
    WHILE           reduce using rule 119 (bool -> TRUE .)
    NAMESPACE       reduce using rule 119 (bool -> TRUE .)
    CLASS           reduce using rule 119 (bool -> TRUE .)
    FUNC            reduce using rule 119 (bool -> TRUE .)
    PYTHON_CODE_EXEC reduce using rule 119 (bool -> TRUE .)
    PYTHON_CODE     reduce using rule 119 (bool -> TRUE .)
    IF              reduce using rule 119 (bool -> TRUE .)
    !               reduce using rule 119 (bool -> TRUE .)
    STRING          reduce using rule 119 (bool -> TRUE .)
    FALSE           reduce using rule 119 (bool -> TRUE .)
    TRUE            reduce using rule 119 (bool -> TRUE .)
    FLOAT           reduce using rule 119 (bool -> TRUE .)
    INT             reduce using rule 119 (bool -> TRUE .)
    NULL            reduce using rule 119 (bool -> TRUE .)
    $end            reduce using rule 119 (bool -> TRUE .)


state 62

    (117) float -> FLOAT .
    [               reduce using rule 117 (float -> FLOAT .)
    COLON_COLON     reduce using rule 117 (float -> FLOAT .)
    (               reduce using rule 117 (float -> FLOAT .)
    >               reduce using rule 117 (float -> FLOAT .)
    <               reduce using rule 117 (float -> FLOAT .)
    &               reduce using rule 117 (float -> FLOAT .)
    |               reduce using rule 117 (float -> FLOAT .)
    EQ_GREATER      reduce using rule 117 (float -> FLOAT .)
    EQ_LESS         reduce using rule 117 (float -> FLOAT .)
    NOT_EQEQ        reduce using rule 117 (float -> FLOAT .)
    EQEQ            reduce using rule 117 (float -> FLOAT .)
    %               reduce using rule 117 (float -> FLOAT .)
    *               reduce using rule 117 (float -> FLOAT .)
    /               reduce using rule 117 (float -> FLOAT .)
    -               reduce using rule 117 (float -> FLOAT .)
    +               reduce using rule 117 (float -> FLOAT .)
    ,               reduce using rule 117 (float -> FLOAT .)
    }               reduce using rule 117 (float -> FLOAT .)
    ;               reduce using rule 117 (float -> FLOAT .)
    IN              reduce using rule 117 (float -> FLOAT .)
    )               reduce using rule 117 (float -> FLOAT .)
    ]               reduce using rule 117 (float -> FLOAT .)
    :               reduce using rule 117 (float -> FLOAT .)
    {               reduce using rule 117 (float -> FLOAT .)
    \               reduce using rule 117 (float -> FLOAT .)
    SANDBOX         reduce using rule 117 (float -> FLOAT .)
    LIMPORT         reduce using rule 117 (float -> FLOAT .)
    .               reduce using rule 117 (float -> FLOAT .)
    IMPORT          reduce using rule 117 (float -> FLOAT .)
    ID              reduce using rule 117 (float -> FLOAT .)
    RETURN          reduce using rule 117 (float -> FLOAT .)
    DEL             reduce using rule 117 (float -> FLOAT .)
    FOR             reduce using rule 117 (float -> FLOAT .)
    BREAK           reduce using rule 117 (float -> FLOAT .)
    LET             reduce using rule 117 (float -> FLOAT .)
    WHILE           reduce using rule 117 (float -> FLOAT .)
    NAMESPACE       reduce using rule 117 (float -> FLOAT .)
    CLASS           reduce using rule 117 (float -> FLOAT .)
    FUNC            reduce using rule 117 (float -> FLOAT .)
    PYTHON_CODE_EXEC reduce using rule 117 (float -> FLOAT .)
    PYTHON_CODE     reduce using rule 117 (float -> FLOAT .)
    IF              reduce using rule 117 (float -> FLOAT .)
    !               reduce using rule 117 (float -> FLOAT .)
    STRING          reduce using rule 117 (float -> FLOAT .)
    FALSE           reduce using rule 117 (float -> FLOAT .)
    TRUE            reduce using rule 117 (float -> FLOAT .)
    FLOAT           reduce using rule 117 (float -> FLOAT .)
    INT             reduce using rule 117 (float -> FLOAT .)
    NULL            reduce using rule 117 (float -> FLOAT .)
    $end            reduce using rule 117 (float -> FLOAT .)


state 63

    (115) int -> INT .
    [               reduce using rule 115 (int -> INT .)
    COLON_COLON     reduce using rule 115 (int -> INT .)
    (               reduce using rule 115 (int -> INT .)
    >               reduce using rule 115 (int -> INT .)
    <               reduce using rule 115 (int -> INT .)
    &               reduce using rule 115 (int -> INT .)
    |               reduce using rule 115 (int -> INT .)
    EQ_GREATER      reduce using rule 115 (int -> INT .)
    EQ_LESS         reduce using rule 115 (int -> INT .)
    NOT_EQEQ        reduce using rule 115 (int -> INT .)
    EQEQ            reduce using rule 115 (int -> INT .)
    %               reduce using rule 115 (int -> INT .)
    *               reduce using rule 115 (int -> INT .)
    /               reduce using rule 115 (int -> INT .)
    -               reduce using rule 115 (int -> INT .)
    +               reduce using rule 115 (int -> INT .)
    ,               reduce using rule 115 (int -> INT .)
    }               reduce using rule 115 (int -> INT .)
    ;               reduce using rule 115 (int -> INT .)
    IN              reduce using rule 115 (int -> INT .)
    )               reduce using rule 115 (int -> INT .)
    ]               reduce using rule 115 (int -> INT .)
    :               reduce using rule 115 (int -> INT .)
    {               reduce using rule 115 (int -> INT .)
    \               reduce using rule 115 (int -> INT .)
    SANDBOX         reduce using rule 115 (int -> INT .)
    LIMPORT         reduce using rule 115 (int -> INT .)
    .               reduce using rule 115 (int -> INT .)
    IMPORT          reduce using rule 115 (int -> INT .)
    ID              reduce using rule 115 (int -> INT .)
    RETURN          reduce using rule 115 (int -> INT .)
    DEL             reduce using rule 115 (int -> INT .)
    FOR             reduce using rule 115 (int -> INT .)
    BREAK           reduce using rule 115 (int -> INT .)
    LET             reduce using rule 115 (int -> INT .)
    WHILE           reduce using rule 115 (int -> INT .)
    NAMESPACE       reduce using rule 115 (int -> INT .)
    CLASS           reduce using rule 115 (int -> INT .)
    FUNC            reduce using rule 115 (int -> INT .)
    PYTHON_CODE_EXEC reduce using rule 115 (int -> INT .)
    PYTHON_CODE     reduce using rule 115 (int -> INT .)
    IF              reduce using rule 115 (int -> INT .)
    !               reduce using rule 115 (int -> INT .)
    STRING          reduce using rule 115 (int -> INT .)
    FALSE           reduce using rule 115 (int -> INT .)
    TRUE            reduce using rule 115 (int -> INT .)
    FLOAT           reduce using rule 115 (int -> INT .)
    INT             reduce using rule 115 (int -> INT .)
    NULL            reduce using rule 115 (int -> INT .)
    $end            reduce using rule 115 (int -> INT .)


state 64

    (102) null -> NULL .
    [               reduce using rule 102 (null -> NULL .)
    COLON_COLON     reduce using rule 102 (null -> NULL .)
    (               reduce using rule 102 (null -> NULL .)
    >               reduce using rule 102 (null -> NULL .)
    <               reduce using rule 102 (null -> NULL .)
    &               reduce using rule 102 (null -> NULL .)
    |               reduce using rule 102 (null -> NULL .)
    EQ_GREATER      reduce using rule 102 (null -> NULL .)
    EQ_LESS         reduce using rule 102 (null -> NULL .)
    NOT_EQEQ        reduce using rule 102 (null -> NULL .)
    EQEQ            reduce using rule 102 (null -> NULL .)
    %               reduce using rule 102 (null -> NULL .)
    *               reduce using rule 102 (null -> NULL .)
    /               reduce using rule 102 (null -> NULL .)
    -               reduce using rule 102 (null -> NULL .)
    +               reduce using rule 102 (null -> NULL .)
    ,               reduce using rule 102 (null -> NULL .)
    }               reduce using rule 102 (null -> NULL .)
    ;               reduce using rule 102 (null -> NULL .)
    IN              reduce using rule 102 (null -> NULL .)
    )               reduce using rule 102 (null -> NULL .)
    ]               reduce using rule 102 (null -> NULL .)
    :               reduce using rule 102 (null -> NULL .)
    {               reduce using rule 102 (null -> NULL .)
    \               reduce using rule 102 (null -> NULL .)
    SANDBOX         reduce using rule 102 (null -> NULL .)
    LIMPORT         reduce using rule 102 (null -> NULL .)
    .               reduce using rule 102 (null -> NULL .)
    IMPORT          reduce using rule 102 (null -> NULL .)
    ID              reduce using rule 102 (null -> NULL .)
    RETURN          reduce using rule 102 (null -> NULL .)
    DEL             reduce using rule 102 (null -> NULL .)
    FOR             reduce using rule 102 (null -> NULL .)
    BREAK           reduce using rule 102 (null -> NULL .)
    LET             reduce using rule 102 (null -> NULL .)
    WHILE           reduce using rule 102 (null -> NULL .)
    NAMESPACE       reduce using rule 102 (null -> NULL .)
    CLASS           reduce using rule 102 (null -> NULL .)
    FUNC            reduce using rule 102 (null -> NULL .)
    PYTHON_CODE_EXEC reduce using rule 102 (null -> NULL .)
    PYTHON_CODE     reduce using rule 102 (null -> NULL .)
    IF              reduce using rule 102 (null -> NULL .)
    !               reduce using rule 102 (null -> NULL .)
    STRING          reduce using rule 102 (null -> NULL .)
    FALSE           reduce using rule 102 (null -> NULL .)
    TRUE            reduce using rule 102 (null -> NULL .)
    FLOAT           reduce using rule 102 (null -> NULL .)
    INT             reduce using rule 102 (null -> NULL .)
    NULL            reduce using rule 102 (null -> NULL .)
    $end            reduce using rule 102 (null -> NULL .)


state 65

    (3) program -> program statement .
    SANDBOX         reduce using rule 3 (program -> program statement .)
    LIMPORT         reduce using rule 3 (program -> program statement .)
    .               reduce using rule 3 (program -> program statement .)
    IMPORT          reduce using rule 3 (program -> program statement .)
    ID              reduce using rule 3 (program -> program statement .)
    RETURN          reduce using rule 3 (program -> program statement .)
    DEL             reduce using rule 3 (program -> program statement .)
    FOR             reduce using rule 3 (program -> program statement .)
    BREAK           reduce using rule 3 (program -> program statement .)
    LET             reduce using rule 3 (program -> program statement .)
    WHILE           reduce using rule 3 (program -> program statement .)
    NAMESPACE       reduce using rule 3 (program -> program statement .)
    CLASS           reduce using rule 3 (program -> program statement .)
    FUNC            reduce using rule 3 (program -> program statement .)
    PYTHON_CODE_EXEC reduce using rule 3 (program -> program statement .)
    PYTHON_CODE     reduce using rule 3 (program -> program statement .)
    IF              reduce using rule 3 (program -> program statement .)
    (               reduce using rule 3 (program -> program statement .)
    !               reduce using rule 3 (program -> program statement .)
    +               reduce using rule 3 (program -> program statement .)
    -               reduce using rule 3 (program -> program statement .)
    \               reduce using rule 3 (program -> program statement .)
    [               reduce using rule 3 (program -> program statement .)
    {               reduce using rule 3 (program -> program statement .)
    STRING          reduce using rule 3 (program -> program statement .)
    FALSE           reduce using rule 3 (program -> program statement .)
    TRUE            reduce using rule 3 (program -> program statement .)
    FLOAT           reduce using rule 3 (program -> program statement .)
    INT             reduce using rule 3 (program -> program statement .)
    NULL            reduce using rule 3 (program -> program statement .)
    $end            reduce using rule 3 (program -> program statement .)
    }               reduce using rule 3 (program -> program statement .)


state 66

    (19) sandbox -> SANDBOX { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (127) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               reduce using rule 127 (empty -> .)
    SANDBOX         reduce using rule 127 (empty -> .)
    LIMPORT         reduce using rule 127 (empty -> .)
    .               reduce using rule 127 (empty -> .)
    IMPORT          reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    DEL             reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    BREAK           reduce using rule 127 (empty -> .)
    LET             reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    NAMESPACE       reduce using rule 127 (empty -> .)
    CLASS           reduce using rule 127 (empty -> .)
    FUNC            reduce using rule 127 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 127 (empty -> .)
    PYTHON_CODE     reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    (               reduce using rule 127 (empty -> .)
    \               reduce using rule 127 (empty -> .)
    [               reduce using rule 127 (empty -> .)
    {               reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    NULL            reduce using rule 127 (empty -> .)
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56

    program                        shift and go to state 133
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 67

    (104) _tuple -> { positional_args . , }
    (105) _tuple -> { positional_args . }
    (42) positional_args -> positional_args . , expression
    ,               shift and go to state 134
    }               shift and go to state 135


state 68

    (41) positional_args -> expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ,               reduce using rule 41 (positional_args -> expression .)
    }               reduce using rule 41 (positional_args -> expression .)
    ]               reduce using rule 41 (positional_args -> expression .)
    )               reduce using rule 41 (positional_args -> expression .)
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 69

    (74) expression -> class_attribute .
    >               reduce using rule 74 (expression -> class_attribute .)
    <               reduce using rule 74 (expression -> class_attribute .)
    &               reduce using rule 74 (expression -> class_attribute .)
    |               reduce using rule 74 (expression -> class_attribute .)
    EQ_GREATER      reduce using rule 74 (expression -> class_attribute .)
    EQ_LESS         reduce using rule 74 (expression -> class_attribute .)
    NOT_EQEQ        reduce using rule 74 (expression -> class_attribute .)
    EQEQ            reduce using rule 74 (expression -> class_attribute .)
    %               reduce using rule 74 (expression -> class_attribute .)
    *               reduce using rule 74 (expression -> class_attribute .)
    /               reduce using rule 74 (expression -> class_attribute .)
    -               reduce using rule 74 (expression -> class_attribute .)
    +               reduce using rule 74 (expression -> class_attribute .)
    COLON_COLON     reduce using rule 74 (expression -> class_attribute .)
    [               reduce using rule 74 (expression -> class_attribute .)
    (               reduce using rule 74 (expression -> class_attribute .)
    ,               reduce using rule 74 (expression -> class_attribute .)
    }               reduce using rule 74 (expression -> class_attribute .)
    ;               reduce using rule 74 (expression -> class_attribute .)
    IN              reduce using rule 74 (expression -> class_attribute .)
    )               reduce using rule 74 (expression -> class_attribute .)
    ]               reduce using rule 74 (expression -> class_attribute .)
    :               reduce using rule 74 (expression -> class_attribute .)
    {               reduce using rule 74 (expression -> class_attribute .)
    \               reduce using rule 74 (expression -> class_attribute .)
    SANDBOX         reduce using rule 74 (expression -> class_attribute .)
    LIMPORT         reduce using rule 74 (expression -> class_attribute .)
    .               reduce using rule 74 (expression -> class_attribute .)
    IMPORT          reduce using rule 74 (expression -> class_attribute .)
    ID              reduce using rule 74 (expression -> class_attribute .)
    RETURN          reduce using rule 74 (expression -> class_attribute .)
    DEL             reduce using rule 74 (expression -> class_attribute .)
    FOR             reduce using rule 74 (expression -> class_attribute .)
    BREAK           reduce using rule 74 (expression -> class_attribute .)
    LET             reduce using rule 74 (expression -> class_attribute .)
    WHILE           reduce using rule 74 (expression -> class_attribute .)
    NAMESPACE       reduce using rule 74 (expression -> class_attribute .)
    CLASS           reduce using rule 74 (expression -> class_attribute .)
    FUNC            reduce using rule 74 (expression -> class_attribute .)
    PYTHON_CODE_EXEC reduce using rule 74 (expression -> class_attribute .)
    PYTHON_CODE     reduce using rule 74 (expression -> class_attribute .)
    IF              reduce using rule 74 (expression -> class_attribute .)
    !               reduce using rule 74 (expression -> class_attribute .)
    STRING          reduce using rule 74 (expression -> class_attribute .)
    FALSE           reduce using rule 74 (expression -> class_attribute .)
    TRUE            reduce using rule 74 (expression -> class_attribute .)
    FLOAT           reduce using rule 74 (expression -> class_attribute .)
    INT             reduce using rule 74 (expression -> class_attribute .)
    NULL            reduce using rule 74 (expression -> class_attribute .)
    $end            reduce using rule 74 (expression -> class_attribute .)


state 70

    (81) expression -> get_index .
    >               reduce using rule 81 (expression -> get_index .)
    <               reduce using rule 81 (expression -> get_index .)
    &               reduce using rule 81 (expression -> get_index .)
    |               reduce using rule 81 (expression -> get_index .)
    EQ_GREATER      reduce using rule 81 (expression -> get_index .)
    EQ_LESS         reduce using rule 81 (expression -> get_index .)
    NOT_EQEQ        reduce using rule 81 (expression -> get_index .)
    EQEQ            reduce using rule 81 (expression -> get_index .)
    %               reduce using rule 81 (expression -> get_index .)
    *               reduce using rule 81 (expression -> get_index .)
    /               reduce using rule 81 (expression -> get_index .)
    -               reduce using rule 81 (expression -> get_index .)
    +               reduce using rule 81 (expression -> get_index .)
    COLON_COLON     reduce using rule 81 (expression -> get_index .)
    [               reduce using rule 81 (expression -> get_index .)
    (               reduce using rule 81 (expression -> get_index .)
    ,               reduce using rule 81 (expression -> get_index .)
    }               reduce using rule 81 (expression -> get_index .)
    ;               reduce using rule 81 (expression -> get_index .)
    IN              reduce using rule 81 (expression -> get_index .)
    )               reduce using rule 81 (expression -> get_index .)
    ]               reduce using rule 81 (expression -> get_index .)
    :               reduce using rule 81 (expression -> get_index .)
    {               reduce using rule 81 (expression -> get_index .)
    \               reduce using rule 81 (expression -> get_index .)
    SANDBOX         reduce using rule 81 (expression -> get_index .)
    LIMPORT         reduce using rule 81 (expression -> get_index .)
    .               reduce using rule 81 (expression -> get_index .)
    IMPORT          reduce using rule 81 (expression -> get_index .)
    ID              reduce using rule 81 (expression -> get_index .)
    RETURN          reduce using rule 81 (expression -> get_index .)
    DEL             reduce using rule 81 (expression -> get_index .)
    FOR             reduce using rule 81 (expression -> get_index .)
    BREAK           reduce using rule 81 (expression -> get_index .)
    LET             reduce using rule 81 (expression -> get_index .)
    WHILE           reduce using rule 81 (expression -> get_index .)
    NAMESPACE       reduce using rule 81 (expression -> get_index .)
    CLASS           reduce using rule 81 (expression -> get_index .)
    FUNC            reduce using rule 81 (expression -> get_index .)
    PYTHON_CODE_EXEC reduce using rule 81 (expression -> get_index .)
    PYTHON_CODE     reduce using rule 81 (expression -> get_index .)
    IF              reduce using rule 81 (expression -> get_index .)
    !               reduce using rule 81 (expression -> get_index .)
    STRING          reduce using rule 81 (expression -> get_index .)
    FALSE           reduce using rule 81 (expression -> get_index .)
    TRUE            reduce using rule 81 (expression -> get_index .)
    FLOAT           reduce using rule 81 (expression -> get_index .)
    INT             reduce using rule 81 (expression -> get_index .)
    NULL            reduce using rule 81 (expression -> get_index .)
    $end            reduce using rule 81 (expression -> get_index .)


state 71

    (82) expression -> function_call .
    >               reduce using rule 82 (expression -> function_call .)
    <               reduce using rule 82 (expression -> function_call .)
    &               reduce using rule 82 (expression -> function_call .)
    |               reduce using rule 82 (expression -> function_call .)
    EQ_GREATER      reduce using rule 82 (expression -> function_call .)
    EQ_LESS         reduce using rule 82 (expression -> function_call .)
    NOT_EQEQ        reduce using rule 82 (expression -> function_call .)
    EQEQ            reduce using rule 82 (expression -> function_call .)
    %               reduce using rule 82 (expression -> function_call .)
    *               reduce using rule 82 (expression -> function_call .)
    /               reduce using rule 82 (expression -> function_call .)
    -               reduce using rule 82 (expression -> function_call .)
    +               reduce using rule 82 (expression -> function_call .)
    COLON_COLON     reduce using rule 82 (expression -> function_call .)
    [               reduce using rule 82 (expression -> function_call .)
    (               reduce using rule 82 (expression -> function_call .)
    ,               reduce using rule 82 (expression -> function_call .)
    }               reduce using rule 82 (expression -> function_call .)
    ;               reduce using rule 82 (expression -> function_call .)
    IN              reduce using rule 82 (expression -> function_call .)
    )               reduce using rule 82 (expression -> function_call .)
    ]               reduce using rule 82 (expression -> function_call .)
    :               reduce using rule 82 (expression -> function_call .)
    {               reduce using rule 82 (expression -> function_call .)
    \               reduce using rule 82 (expression -> function_call .)
    SANDBOX         reduce using rule 82 (expression -> function_call .)
    LIMPORT         reduce using rule 82 (expression -> function_call .)
    .               reduce using rule 82 (expression -> function_call .)
    IMPORT          reduce using rule 82 (expression -> function_call .)
    ID              reduce using rule 82 (expression -> function_call .)
    RETURN          reduce using rule 82 (expression -> function_call .)
    DEL             reduce using rule 82 (expression -> function_call .)
    FOR             reduce using rule 82 (expression -> function_call .)
    BREAK           reduce using rule 82 (expression -> function_call .)
    LET             reduce using rule 82 (expression -> function_call .)
    WHILE           reduce using rule 82 (expression -> function_call .)
    NAMESPACE       reduce using rule 82 (expression -> function_call .)
    CLASS           reduce using rule 82 (expression -> function_call .)
    FUNC            reduce using rule 82 (expression -> function_call .)
    PYTHON_CODE_EXEC reduce using rule 82 (expression -> function_call .)
    PYTHON_CODE     reduce using rule 82 (expression -> function_call .)
    IF              reduce using rule 82 (expression -> function_call .)
    !               reduce using rule 82 (expression -> function_call .)
    STRING          reduce using rule 82 (expression -> function_call .)
    FALSE           reduce using rule 82 (expression -> function_call .)
    TRUE            reduce using rule 82 (expression -> function_call .)
    FLOAT           reduce using rule 82 (expression -> function_call .)
    INT             reduce using rule 82 (expression -> function_call .)
    NULL            reduce using rule 82 (expression -> function_call .)
    $end            reduce using rule 82 (expression -> function_call .)


state 72

    (83) expression -> python_code .
    >               reduce using rule 83 (expression -> python_code .)
    <               reduce using rule 83 (expression -> python_code .)
    &               reduce using rule 83 (expression -> python_code .)
    |               reduce using rule 83 (expression -> python_code .)
    EQ_GREATER      reduce using rule 83 (expression -> python_code .)
    EQ_LESS         reduce using rule 83 (expression -> python_code .)
    NOT_EQEQ        reduce using rule 83 (expression -> python_code .)
    EQEQ            reduce using rule 83 (expression -> python_code .)
    %               reduce using rule 83 (expression -> python_code .)
    *               reduce using rule 83 (expression -> python_code .)
    /               reduce using rule 83 (expression -> python_code .)
    -               reduce using rule 83 (expression -> python_code .)
    +               reduce using rule 83 (expression -> python_code .)
    COLON_COLON     reduce using rule 83 (expression -> python_code .)
    [               reduce using rule 83 (expression -> python_code .)
    (               reduce using rule 83 (expression -> python_code .)
    ,               reduce using rule 83 (expression -> python_code .)
    }               reduce using rule 83 (expression -> python_code .)
    ;               reduce using rule 83 (expression -> python_code .)
    IN              reduce using rule 83 (expression -> python_code .)
    )               reduce using rule 83 (expression -> python_code .)
    ]               reduce using rule 83 (expression -> python_code .)
    :               reduce using rule 83 (expression -> python_code .)
    {               reduce using rule 83 (expression -> python_code .)
    \               reduce using rule 83 (expression -> python_code .)
    SANDBOX         reduce using rule 83 (expression -> python_code .)
    LIMPORT         reduce using rule 83 (expression -> python_code .)
    .               reduce using rule 83 (expression -> python_code .)
    IMPORT          reduce using rule 83 (expression -> python_code .)
    ID              reduce using rule 83 (expression -> python_code .)
    RETURN          reduce using rule 83 (expression -> python_code .)
    DEL             reduce using rule 83 (expression -> python_code .)
    FOR             reduce using rule 83 (expression -> python_code .)
    BREAK           reduce using rule 83 (expression -> python_code .)
    LET             reduce using rule 83 (expression -> python_code .)
    WHILE           reduce using rule 83 (expression -> python_code .)
    NAMESPACE       reduce using rule 83 (expression -> python_code .)
    CLASS           reduce using rule 83 (expression -> python_code .)
    FUNC            reduce using rule 83 (expression -> python_code .)
    PYTHON_CODE_EXEC reduce using rule 83 (expression -> python_code .)
    PYTHON_CODE     reduce using rule 83 (expression -> python_code .)
    IF              reduce using rule 83 (expression -> python_code .)
    !               reduce using rule 83 (expression -> python_code .)
    STRING          reduce using rule 83 (expression -> python_code .)
    FALSE           reduce using rule 83 (expression -> python_code .)
    TRUE            reduce using rule 83 (expression -> python_code .)
    FLOAT           reduce using rule 83 (expression -> python_code .)
    INT             reduce using rule 83 (expression -> python_code .)
    NULL            reduce using rule 83 (expression -> python_code .)
    $end            reduce using rule 83 (expression -> python_code .)


state 73

    (101) expression -> ID . OF ID
    (121) id -> ID .
    OF              shift and go to state 103
    >               reduce using rule 121 (id -> ID .)
    <               reduce using rule 121 (id -> ID .)
    &               reduce using rule 121 (id -> ID .)
    |               reduce using rule 121 (id -> ID .)
    EQ_GREATER      reduce using rule 121 (id -> ID .)
    EQ_LESS         reduce using rule 121 (id -> ID .)
    NOT_EQEQ        reduce using rule 121 (id -> ID .)
    EQEQ            reduce using rule 121 (id -> ID .)
    %               reduce using rule 121 (id -> ID .)
    *               reduce using rule 121 (id -> ID .)
    /               reduce using rule 121 (id -> ID .)
    -               reduce using rule 121 (id -> ID .)
    +               reduce using rule 121 (id -> ID .)
    COLON_COLON     reduce using rule 121 (id -> ID .)
    [               reduce using rule 121 (id -> ID .)
    (               reduce using rule 121 (id -> ID .)
    ,               reduce using rule 121 (id -> ID .)
    }               reduce using rule 121 (id -> ID .)
    ;               reduce using rule 121 (id -> ID .)
    IN              reduce using rule 121 (id -> ID .)
    )               reduce using rule 121 (id -> ID .)
    ]               reduce using rule 121 (id -> ID .)
    :               reduce using rule 121 (id -> ID .)
    {               reduce using rule 121 (id -> ID .)
    \               reduce using rule 121 (id -> ID .)
    SANDBOX         reduce using rule 121 (id -> ID .)
    LIMPORT         reduce using rule 121 (id -> ID .)
    .               reduce using rule 121 (id -> ID .)
    IMPORT          reduce using rule 121 (id -> ID .)
    ID              reduce using rule 121 (id -> ID .)
    RETURN          reduce using rule 121 (id -> ID .)
    DEL             reduce using rule 121 (id -> ID .)
    FOR             reduce using rule 121 (id -> ID .)
    BREAK           reduce using rule 121 (id -> ID .)
    LET             reduce using rule 121 (id -> ID .)
    WHILE           reduce using rule 121 (id -> ID .)
    NAMESPACE       reduce using rule 121 (id -> ID .)
    CLASS           reduce using rule 121 (id -> ID .)
    FUNC            reduce using rule 121 (id -> ID .)
    PYTHON_CODE_EXEC reduce using rule 121 (id -> ID .)
    PYTHON_CODE     reduce using rule 121 (id -> ID .)
    IF              reduce using rule 121 (id -> ID .)
    !               reduce using rule 121 (id -> ID .)
    STRING          reduce using rule 121 (id -> ID .)
    FALSE           reduce using rule 121 (id -> ID .)
    TRUE            reduce using rule 121 (id -> ID .)
    FLOAT           reduce using rule 121 (id -> ID .)
    INT             reduce using rule 121 (id -> ID .)
    NULL            reduce using rule 121 (id -> ID .)
    $end            reduce using rule 121 (id -> ID .)


state 74

    (20) sandbox -> LIMPORT expression . ;
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ;               shift and go to state 136
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 75

    (103) get_index -> expression [ . expression ]
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 137
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 76

    (120) class_attribute -> expression COLON_COLON . ID
    ID              shift and go to state 138


state 77

    (25) function_call -> expression ( . empty ) FARROW { program }
    (26) function_call -> expression ( . empty )
    (27) function_call -> expression ( . function_arguments ) FARROW { program }
    (28) function_call -> expression ( . function_arguments )
    (127) empty -> .
    (34) function_arguments -> . kwargs
    (35) function_arguments -> . positional_args , kwargs
    (36) function_arguments -> . positional_args
    (43) kwargs -> . ID = expression
    (44) kwargs -> . kwargs , id = expression
    (41) positional_args -> . expression
    (42) positional_args -> . positional_args , expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    )               reduce using rule 127 (empty -> .)
    ID              shift and go to state 143
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 68
    empty                          shift and go to state 139
    function_arguments             shift and go to state 140
    kwargs                         shift and go to state 141
    positional_args                shift and go to state 142
    id                             shift and go to state 49
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 78

    (85) expression -> expression > . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 144
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 79

    (86) expression -> expression < . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 145
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 80

    (88) expression -> expression & . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 146
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 81

    (89) expression -> expression | . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 147
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 82

    (90) expression -> expression EQ_GREATER . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 148
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 83

    (91) expression -> expression EQ_LESS . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 149
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 84

    (92) expression -> expression NOT_EQEQ . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 150
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 85

    (93) expression -> expression EQEQ . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 151
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 86

    (94) expression -> expression % . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 152
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 87

    (95) expression -> expression * . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 153
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 88

    (96) expression -> expression / . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 154
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 89

    (97) expression -> expression - . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 155
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 90

    (98) expression -> expression + . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 156
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 91

    (68) import_statement -> . GLOBAL . ;
    ;               shift and go to state 157


state 92

    (69) import_statement -> IMPORT expression . ;
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ;               shift and go to state 158
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 93

    (47) variable_operation -> get_index EQ_DIV . expression ;
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    get_index                      shift and go to state 70
    expression                     shift and go to state 159
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 94

    (49) variable_operation -> get_index EQ_MOD . expression ;
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    get_index                      shift and go to state 70
    expression                     shift and go to state 160
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 95

    (51) variable_operation -> get_index EQ_MUL . expression ;
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    get_index                      shift and go to state 70
    expression                     shift and go to state 161
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 96

    (53) variable_operation -> get_index EQ_SUB . expression ;
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    get_index                      shift and go to state 70
    expression                     shift and go to state 162
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 97

    (55) variable_operation -> get_index EQ_ADD . expression ;
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    get_index                      shift and go to state 70
    expression                     shift and go to state 163
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 98

    (48) variable_operation -> ID EQ_DIV . expression ;
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 164
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 99

    (50) variable_operation -> ID EQ_MOD . expression ;
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 165
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 100

    (52) variable_operation -> ID EQ_MUL . expression ;
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 166
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 101

    (54) variable_operation -> ID EQ_SUB . expression ;
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 167
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 102

    (56) variable_operation -> ID EQ_ADD . expression ;
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 168
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 103

    (101) expression -> ID OF . ID
    ID              shift and go to state 169


state 104

    (24) return_statement -> RETURN expression . ;
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ;               shift and go to state 170
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 105

    (67) delete_statement -> DEL ID . ;
    ;               shift and go to state 171


state 106

    (39) for_loop -> FOR expression . IN expression { program }
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    IN              shift and go to state 172
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 107

    (23) break_statement -> BREAK ; .
    SANDBOX         reduce using rule 23 (break_statement -> BREAK ; .)
    LIMPORT         reduce using rule 23 (break_statement -> BREAK ; .)
    .               reduce using rule 23 (break_statement -> BREAK ; .)
    IMPORT          reduce using rule 23 (break_statement -> BREAK ; .)
    ID              reduce using rule 23 (break_statement -> BREAK ; .)
    RETURN          reduce using rule 23 (break_statement -> BREAK ; .)
    DEL             reduce using rule 23 (break_statement -> BREAK ; .)
    FOR             reduce using rule 23 (break_statement -> BREAK ; .)
    BREAK           reduce using rule 23 (break_statement -> BREAK ; .)
    LET             reduce using rule 23 (break_statement -> BREAK ; .)
    WHILE           reduce using rule 23 (break_statement -> BREAK ; .)
    NAMESPACE       reduce using rule 23 (break_statement -> BREAK ; .)
    CLASS           reduce using rule 23 (break_statement -> BREAK ; .)
    FUNC            reduce using rule 23 (break_statement -> BREAK ; .)
    PYTHON_CODE_EXEC reduce using rule 23 (break_statement -> BREAK ; .)
    PYTHON_CODE     reduce using rule 23 (break_statement -> BREAK ; .)
    IF              reduce using rule 23 (break_statement -> BREAK ; .)
    (               reduce using rule 23 (break_statement -> BREAK ; .)
    !               reduce using rule 23 (break_statement -> BREAK ; .)
    +               reduce using rule 23 (break_statement -> BREAK ; .)
    -               reduce using rule 23 (break_statement -> BREAK ; .)
    \               reduce using rule 23 (break_statement -> BREAK ; .)
    [               reduce using rule 23 (break_statement -> BREAK ; .)
    {               reduce using rule 23 (break_statement -> BREAK ; .)
    STRING          reduce using rule 23 (break_statement -> BREAK ; .)
    FALSE           reduce using rule 23 (break_statement -> BREAK ; .)
    TRUE            reduce using rule 23 (break_statement -> BREAK ; .)
    FLOAT           reduce using rule 23 (break_statement -> BREAK ; .)
    INT             reduce using rule 23 (break_statement -> BREAK ; .)
    NULL            reduce using rule 23 (break_statement -> BREAK ; .)
    $end            reduce using rule 23 (break_statement -> BREAK ; .)
    }               reduce using rule 23 (break_statement -> BREAK ; .)


state 108

    (45) variable_assignment -> LET get_index . = expression ;
    (81) expression -> get_index .
    =               shift and go to state 173
    [               reduce using rule 81 (expression -> get_index .)
    >               reduce using rule 81 (expression -> get_index .)
    <               reduce using rule 81 (expression -> get_index .)
    &               reduce using rule 81 (expression -> get_index .)
    |               reduce using rule 81 (expression -> get_index .)
    EQ_GREATER      reduce using rule 81 (expression -> get_index .)
    EQ_LESS         reduce using rule 81 (expression -> get_index .)
    NOT_EQEQ        reduce using rule 81 (expression -> get_index .)
    EQEQ            reduce using rule 81 (expression -> get_index .)
    %               reduce using rule 81 (expression -> get_index .)
    *               reduce using rule 81 (expression -> get_index .)
    /               reduce using rule 81 (expression -> get_index .)
    -               reduce using rule 81 (expression -> get_index .)
    +               reduce using rule 81 (expression -> get_index .)
    COLON_COLON     reduce using rule 81 (expression -> get_index .)
    (               reduce using rule 81 (expression -> get_index .)


state 109

    (103) get_index -> expression . [ expression ]
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    [               shift and go to state 75
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    (               shift and go to state 77


state 110

    (46) variable_assignment -> LET ID . = expression ;
    (101) expression -> ID . OF ID
    (121) id -> ID .
    =               shift and go to state 174
    OF              shift and go to state 103
    [               reduce using rule 121 (id -> ID .)
    >               reduce using rule 121 (id -> ID .)
    <               reduce using rule 121 (id -> ID .)
    &               reduce using rule 121 (id -> ID .)
    |               reduce using rule 121 (id -> ID .)
    EQ_GREATER      reduce using rule 121 (id -> ID .)
    EQ_LESS         reduce using rule 121 (id -> ID .)
    NOT_EQEQ        reduce using rule 121 (id -> ID .)
    EQEQ            reduce using rule 121 (id -> ID .)
    %               reduce using rule 121 (id -> ID .)
    *               reduce using rule 121 (id -> ID .)
    /               reduce using rule 121 (id -> ID .)
    -               reduce using rule 121 (id -> ID .)
    +               reduce using rule 121 (id -> ID .)
    COLON_COLON     reduce using rule 121 (id -> ID .)
    (               reduce using rule 121 (id -> ID .)


state 111

    (22) python_code_statement -> python_code ; .
    SANDBOX         reduce using rule 22 (python_code_statement -> python_code ; .)
    LIMPORT         reduce using rule 22 (python_code_statement -> python_code ; .)
    .               reduce using rule 22 (python_code_statement -> python_code ; .)
    IMPORT          reduce using rule 22 (python_code_statement -> python_code ; .)
    ID              reduce using rule 22 (python_code_statement -> python_code ; .)
    RETURN          reduce using rule 22 (python_code_statement -> python_code ; .)
    DEL             reduce using rule 22 (python_code_statement -> python_code ; .)
    FOR             reduce using rule 22 (python_code_statement -> python_code ; .)
    BREAK           reduce using rule 22 (python_code_statement -> python_code ; .)
    LET             reduce using rule 22 (python_code_statement -> python_code ; .)
    WHILE           reduce using rule 22 (python_code_statement -> python_code ; .)
    NAMESPACE       reduce using rule 22 (python_code_statement -> python_code ; .)
    CLASS           reduce using rule 22 (python_code_statement -> python_code ; .)
    FUNC            reduce using rule 22 (python_code_statement -> python_code ; .)
    PYTHON_CODE_EXEC reduce using rule 22 (python_code_statement -> python_code ; .)
    PYTHON_CODE     reduce using rule 22 (python_code_statement -> python_code ; .)
    IF              reduce using rule 22 (python_code_statement -> python_code ; .)
    (               reduce using rule 22 (python_code_statement -> python_code ; .)
    !               reduce using rule 22 (python_code_statement -> python_code ; .)
    +               reduce using rule 22 (python_code_statement -> python_code ; .)
    -               reduce using rule 22 (python_code_statement -> python_code ; .)
    \               reduce using rule 22 (python_code_statement -> python_code ; .)
    [               reduce using rule 22 (python_code_statement -> python_code ; .)
    {               reduce using rule 22 (python_code_statement -> python_code ; .)
    STRING          reduce using rule 22 (python_code_statement -> python_code ; .)
    FALSE           reduce using rule 22 (python_code_statement -> python_code ; .)
    TRUE            reduce using rule 22 (python_code_statement -> python_code ; .)
    FLOAT           reduce using rule 22 (python_code_statement -> python_code ; .)
    INT             reduce using rule 22 (python_code_statement -> python_code ; .)
    NULL            reduce using rule 22 (python_code_statement -> python_code ; .)
    $end            reduce using rule 22 (python_code_statement -> python_code ; .)
    }               reduce using rule 22 (python_code_statement -> python_code ; .)


state 112

    (40) while_loop -> WHILE ( . expression ) { program }
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 175
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 113

    (84) expression -> ( expression . )
    (110) _numpy -> ( expression . , )
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (113) items -> expression . , expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    )               shift and go to state 176
    ,               shift and go to state 177
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 114

    (109) _numpy -> ( ) .
    [               reduce using rule 109 (_numpy -> ( ) .)
    COLON_COLON     reduce using rule 109 (_numpy -> ( ) .)
    (               reduce using rule 109 (_numpy -> ( ) .)
    >               reduce using rule 109 (_numpy -> ( ) .)
    <               reduce using rule 109 (_numpy -> ( ) .)
    &               reduce using rule 109 (_numpy -> ( ) .)
    |               reduce using rule 109 (_numpy -> ( ) .)
    EQ_GREATER      reduce using rule 109 (_numpy -> ( ) .)
    EQ_LESS         reduce using rule 109 (_numpy -> ( ) .)
    NOT_EQEQ        reduce using rule 109 (_numpy -> ( ) .)
    EQEQ            reduce using rule 109 (_numpy -> ( ) .)
    %               reduce using rule 109 (_numpy -> ( ) .)
    *               reduce using rule 109 (_numpy -> ( ) .)
    /               reduce using rule 109 (_numpy -> ( ) .)
    -               reduce using rule 109 (_numpy -> ( ) .)
    +               reduce using rule 109 (_numpy -> ( ) .)
    ,               reduce using rule 109 (_numpy -> ( ) .)
    }               reduce using rule 109 (_numpy -> ( ) .)
    ;               reduce using rule 109 (_numpy -> ( ) .)
    IN              reduce using rule 109 (_numpy -> ( ) .)
    )               reduce using rule 109 (_numpy -> ( ) .)
    ]               reduce using rule 109 (_numpy -> ( ) .)
    :               reduce using rule 109 (_numpy -> ( ) .)
    {               reduce using rule 109 (_numpy -> ( ) .)
    \               reduce using rule 109 (_numpy -> ( ) .)
    SANDBOX         reduce using rule 109 (_numpy -> ( ) .)
    LIMPORT         reduce using rule 109 (_numpy -> ( ) .)
    .               reduce using rule 109 (_numpy -> ( ) .)
    IMPORT          reduce using rule 109 (_numpy -> ( ) .)
    ID              reduce using rule 109 (_numpy -> ( ) .)
    RETURN          reduce using rule 109 (_numpy -> ( ) .)
    DEL             reduce using rule 109 (_numpy -> ( ) .)
    FOR             reduce using rule 109 (_numpy -> ( ) .)
    BREAK           reduce using rule 109 (_numpy -> ( ) .)
    LET             reduce using rule 109 (_numpy -> ( ) .)
    WHILE           reduce using rule 109 (_numpy -> ( ) .)
    NAMESPACE       reduce using rule 109 (_numpy -> ( ) .)
    CLASS           reduce using rule 109 (_numpy -> ( ) .)
    FUNC            reduce using rule 109 (_numpy -> ( ) .)
    PYTHON_CODE_EXEC reduce using rule 109 (_numpy -> ( ) .)
    PYTHON_CODE     reduce using rule 109 (_numpy -> ( ) .)
    IF              reduce using rule 109 (_numpy -> ( ) .)
    !               reduce using rule 109 (_numpy -> ( ) .)
    STRING          reduce using rule 109 (_numpy -> ( ) .)
    FALSE           reduce using rule 109 (_numpy -> ( ) .)
    TRUE            reduce using rule 109 (_numpy -> ( ) .)
    FLOAT           reduce using rule 109 (_numpy -> ( ) .)
    INT             reduce using rule 109 (_numpy -> ( ) .)
    NULL            reduce using rule 109 (_numpy -> ( ) .)
    $end            reduce using rule 109 (_numpy -> ( ) .)


state 115

    (108) _numpy -> ( , . )
    )               shift and go to state 178


state 116

    (111) _numpy -> ( items . , )
    (112) _numpy -> ( items . )
    (114) items -> items . , expression
    ,               shift and go to state 179
    )               shift and go to state 180


state 117

    (58) conditional -> if_statement else_statement .
    SANDBOX         reduce using rule 58 (conditional -> if_statement else_statement .)
    LIMPORT         reduce using rule 58 (conditional -> if_statement else_statement .)
    .               reduce using rule 58 (conditional -> if_statement else_statement .)
    IMPORT          reduce using rule 58 (conditional -> if_statement else_statement .)
    ID              reduce using rule 58 (conditional -> if_statement else_statement .)
    RETURN          reduce using rule 58 (conditional -> if_statement else_statement .)
    DEL             reduce using rule 58 (conditional -> if_statement else_statement .)
    FOR             reduce using rule 58 (conditional -> if_statement else_statement .)
    BREAK           reduce using rule 58 (conditional -> if_statement else_statement .)
    LET             reduce using rule 58 (conditional -> if_statement else_statement .)
    WHILE           reduce using rule 58 (conditional -> if_statement else_statement .)
    NAMESPACE       reduce using rule 58 (conditional -> if_statement else_statement .)
    CLASS           reduce using rule 58 (conditional -> if_statement else_statement .)
    FUNC            reduce using rule 58 (conditional -> if_statement else_statement .)
    PYTHON_CODE_EXEC reduce using rule 58 (conditional -> if_statement else_statement .)
    PYTHON_CODE     reduce using rule 58 (conditional -> if_statement else_statement .)
    IF              reduce using rule 58 (conditional -> if_statement else_statement .)
    (               reduce using rule 58 (conditional -> if_statement else_statement .)
    !               reduce using rule 58 (conditional -> if_statement else_statement .)
    +               reduce using rule 58 (conditional -> if_statement else_statement .)
    -               reduce using rule 58 (conditional -> if_statement else_statement .)
    \               reduce using rule 58 (conditional -> if_statement else_statement .)
    [               reduce using rule 58 (conditional -> if_statement else_statement .)
    {               reduce using rule 58 (conditional -> if_statement else_statement .)
    STRING          reduce using rule 58 (conditional -> if_statement else_statement .)
    FALSE           reduce using rule 58 (conditional -> if_statement else_statement .)
    TRUE            reduce using rule 58 (conditional -> if_statement else_statement .)
    FLOAT           reduce using rule 58 (conditional -> if_statement else_statement .)
    INT             reduce using rule 58 (conditional -> if_statement else_statement .)
    NULL            reduce using rule 58 (conditional -> if_statement else_statement .)
    $end            reduce using rule 58 (conditional -> if_statement else_statement .)
    }               reduce using rule 58 (conditional -> if_statement else_statement .)


state 118

    (59) conditional -> if_statement else_if_loop . else_statement
    (60) conditional -> if_statement else_if_loop .
    (64) else_if_loop -> else_if_loop . else_if_statement
    (66) else_statement -> . ELSE { program }
    (65) else_if_statement -> . ELSE IF ( expression ) { program }
    SANDBOX         reduce using rule 60 (conditional -> if_statement else_if_loop .)
    LIMPORT         reduce using rule 60 (conditional -> if_statement else_if_loop .)
    .               reduce using rule 60 (conditional -> if_statement else_if_loop .)
    IMPORT          reduce using rule 60 (conditional -> if_statement else_if_loop .)
    ID              reduce using rule 60 (conditional -> if_statement else_if_loop .)
    RETURN          reduce using rule 60 (conditional -> if_statement else_if_loop .)
    DEL             reduce using rule 60 (conditional -> if_statement else_if_loop .)
    FOR             reduce using rule 60 (conditional -> if_statement else_if_loop .)
    BREAK           reduce using rule 60 (conditional -> if_statement else_if_loop .)
    LET             reduce using rule 60 (conditional -> if_statement else_if_loop .)
    WHILE           reduce using rule 60 (conditional -> if_statement else_if_loop .)
    NAMESPACE       reduce using rule 60 (conditional -> if_statement else_if_loop .)
    CLASS           reduce using rule 60 (conditional -> if_statement else_if_loop .)
    FUNC            reduce using rule 60 (conditional -> if_statement else_if_loop .)
    PYTHON_CODE_EXEC reduce using rule 60 (conditional -> if_statement else_if_loop .)
    PYTHON_CODE     reduce using rule 60 (conditional -> if_statement else_if_loop .)
    IF              reduce using rule 60 (conditional -> if_statement else_if_loop .)
    (               reduce using rule 60 (conditional -> if_statement else_if_loop .)
    !               reduce using rule 60 (conditional -> if_statement else_if_loop .)
    +               reduce using rule 60 (conditional -> if_statement else_if_loop .)
    -               reduce using rule 60 (conditional -> if_statement else_if_loop .)
    \               reduce using rule 60 (conditional -> if_statement else_if_loop .)
    [               reduce using rule 60 (conditional -> if_statement else_if_loop .)
    {               reduce using rule 60 (conditional -> if_statement else_if_loop .)
    STRING          reduce using rule 60 (conditional -> if_statement else_if_loop .)
    FALSE           reduce using rule 60 (conditional -> if_statement else_if_loop .)
    TRUE            reduce using rule 60 (conditional -> if_statement else_if_loop .)
    FLOAT           reduce using rule 60 (conditional -> if_statement else_if_loop .)
    INT             reduce using rule 60 (conditional -> if_statement else_if_loop .)
    NULL            reduce using rule 60 (conditional -> if_statement else_if_loop .)
    $end            reduce using rule 60 (conditional -> if_statement else_if_loop .)
    }               reduce using rule 60 (conditional -> if_statement else_if_loop .)
    ELSE            shift and go to state 119

    else_statement                 shift and go to state 181
    else_if_statement              shift and go to state 182

state 119

    (66) else_statement -> ELSE . { program }
    (65) else_if_statement -> ELSE . IF ( expression ) { program }
    {               shift and go to state 183
    IF              shift and go to state 184


state 120

    (63) else_if_loop -> else_if_statement .
    ELSE            reduce using rule 63 (else_if_loop -> else_if_statement .)
    SANDBOX         reduce using rule 63 (else_if_loop -> else_if_statement .)
    LIMPORT         reduce using rule 63 (else_if_loop -> else_if_statement .)
    .               reduce using rule 63 (else_if_loop -> else_if_statement .)
    IMPORT          reduce using rule 63 (else_if_loop -> else_if_statement .)
    ID              reduce using rule 63 (else_if_loop -> else_if_statement .)
    RETURN          reduce using rule 63 (else_if_loop -> else_if_statement .)
    DEL             reduce using rule 63 (else_if_loop -> else_if_statement .)
    FOR             reduce using rule 63 (else_if_loop -> else_if_statement .)
    BREAK           reduce using rule 63 (else_if_loop -> else_if_statement .)
    LET             reduce using rule 63 (else_if_loop -> else_if_statement .)
    WHILE           reduce using rule 63 (else_if_loop -> else_if_statement .)
    NAMESPACE       reduce using rule 63 (else_if_loop -> else_if_statement .)
    CLASS           reduce using rule 63 (else_if_loop -> else_if_statement .)
    FUNC            reduce using rule 63 (else_if_loop -> else_if_statement .)
    PYTHON_CODE_EXEC reduce using rule 63 (else_if_loop -> else_if_statement .)
    PYTHON_CODE     reduce using rule 63 (else_if_loop -> else_if_statement .)
    IF              reduce using rule 63 (else_if_loop -> else_if_statement .)
    (               reduce using rule 63 (else_if_loop -> else_if_statement .)
    !               reduce using rule 63 (else_if_loop -> else_if_statement .)
    +               reduce using rule 63 (else_if_loop -> else_if_statement .)
    -               reduce using rule 63 (else_if_loop -> else_if_statement .)
    \               reduce using rule 63 (else_if_loop -> else_if_statement .)
    [               reduce using rule 63 (else_if_loop -> else_if_statement .)
    {               reduce using rule 63 (else_if_loop -> else_if_statement .)
    STRING          reduce using rule 63 (else_if_loop -> else_if_statement .)
    FALSE           reduce using rule 63 (else_if_loop -> else_if_statement .)
    TRUE            reduce using rule 63 (else_if_loop -> else_if_statement .)
    FLOAT           reduce using rule 63 (else_if_loop -> else_if_statement .)
    INT             reduce using rule 63 (else_if_loop -> else_if_statement .)
    NULL            reduce using rule 63 (else_if_loop -> else_if_statement .)
    $end            reduce using rule 63 (else_if_loop -> else_if_statement .)
    }               reduce using rule 63 (else_if_loop -> else_if_statement .)


state 121

    (57) class_attribute_assignment -> class_attribute = . expression ;
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    class_attribute                shift and go to state 69
    expression                     shift and go to state 185
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 122

    (21) function_call_statement -> function_call ; .
    SANDBOX         reduce using rule 21 (function_call_statement -> function_call ; .)
    LIMPORT         reduce using rule 21 (function_call_statement -> function_call ; .)
    .               reduce using rule 21 (function_call_statement -> function_call ; .)
    IMPORT          reduce using rule 21 (function_call_statement -> function_call ; .)
    ID              reduce using rule 21 (function_call_statement -> function_call ; .)
    RETURN          reduce using rule 21 (function_call_statement -> function_call ; .)
    DEL             reduce using rule 21 (function_call_statement -> function_call ; .)
    FOR             reduce using rule 21 (function_call_statement -> function_call ; .)
    BREAK           reduce using rule 21 (function_call_statement -> function_call ; .)
    LET             reduce using rule 21 (function_call_statement -> function_call ; .)
    WHILE           reduce using rule 21 (function_call_statement -> function_call ; .)
    NAMESPACE       reduce using rule 21 (function_call_statement -> function_call ; .)
    CLASS           reduce using rule 21 (function_call_statement -> function_call ; .)
    FUNC            reduce using rule 21 (function_call_statement -> function_call ; .)
    PYTHON_CODE_EXEC reduce using rule 21 (function_call_statement -> function_call ; .)
    PYTHON_CODE     reduce using rule 21 (function_call_statement -> function_call ; .)
    IF              reduce using rule 21 (function_call_statement -> function_call ; .)
    (               reduce using rule 21 (function_call_statement -> function_call ; .)
    !               reduce using rule 21 (function_call_statement -> function_call ; .)
    +               reduce using rule 21 (function_call_statement -> function_call ; .)
    -               reduce using rule 21 (function_call_statement -> function_call ; .)
    \               reduce using rule 21 (function_call_statement -> function_call ; .)
    [               reduce using rule 21 (function_call_statement -> function_call ; .)
    {               reduce using rule 21 (function_call_statement -> function_call ; .)
    STRING          reduce using rule 21 (function_call_statement -> function_call ; .)
    FALSE           reduce using rule 21 (function_call_statement -> function_call ; .)
    TRUE            reduce using rule 21 (function_call_statement -> function_call ; .)
    FLOAT           reduce using rule 21 (function_call_statement -> function_call ; .)
    INT             reduce using rule 21 (function_call_statement -> function_call ; .)
    NULL            reduce using rule 21 (function_call_statement -> function_call ; .)
    $end            reduce using rule 21 (function_call_statement -> function_call ; .)
    }               reduce using rule 21 (function_call_statement -> function_call ; .)


state 123

    (37) class_declaration -> NAMESPACE ID . { program }
    {               shift and go to state 186


state 124

    (38) class_declaration -> CLASS ID . { program }
    {               shift and go to state 187


state 125

    (30) function_declaration -> FUNC ID . ( empty ) { program } TARROW expression
    (31) function_declaration -> FUNC ID . COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> FUNC ID . COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> FUNC ID . ( function_arguments ) { program } TARROW expression
    (               shift and go to state 188
    COLON_COLON     shift and go to state 189


state 126

    (106) _list -> [ positional_args . , ]
    (107) _list -> [ positional_args . ]
    (42) positional_args -> positional_args . , expression
    ,               shift and go to state 190
    ]               shift and go to state 191


state 127

    (62) if_statement -> IF ( . expression ) { program }
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 192
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 128

    (87) expression -> ! expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    [               reduce using rule 87 (expression -> ! expression .)
    (               reduce using rule 87 (expression -> ! expression .)
    >               reduce using rule 87 (expression -> ! expression .)
    <               reduce using rule 87 (expression -> ! expression .)
    &               reduce using rule 87 (expression -> ! expression .)
    |               reduce using rule 87 (expression -> ! expression .)
    EQ_GREATER      reduce using rule 87 (expression -> ! expression .)
    EQ_LESS         reduce using rule 87 (expression -> ! expression .)
    NOT_EQEQ        reduce using rule 87 (expression -> ! expression .)
    EQEQ            reduce using rule 87 (expression -> ! expression .)
    %               reduce using rule 87 (expression -> ! expression .)
    *               reduce using rule 87 (expression -> ! expression .)
    /               reduce using rule 87 (expression -> ! expression .)
    -               reduce using rule 87 (expression -> ! expression .)
    +               reduce using rule 87 (expression -> ! expression .)
    ,               reduce using rule 87 (expression -> ! expression .)
    }               reduce using rule 87 (expression -> ! expression .)
    ;               reduce using rule 87 (expression -> ! expression .)
    IN              reduce using rule 87 (expression -> ! expression .)
    )               reduce using rule 87 (expression -> ! expression .)
    ]               reduce using rule 87 (expression -> ! expression .)
    :               reduce using rule 87 (expression -> ! expression .)
    {               reduce using rule 87 (expression -> ! expression .)
    \               reduce using rule 87 (expression -> ! expression .)
    SANDBOX         reduce using rule 87 (expression -> ! expression .)
    LIMPORT         reduce using rule 87 (expression -> ! expression .)
    .               reduce using rule 87 (expression -> ! expression .)
    IMPORT          reduce using rule 87 (expression -> ! expression .)
    ID              reduce using rule 87 (expression -> ! expression .)
    RETURN          reduce using rule 87 (expression -> ! expression .)
    DEL             reduce using rule 87 (expression -> ! expression .)
    FOR             reduce using rule 87 (expression -> ! expression .)
    BREAK           reduce using rule 87 (expression -> ! expression .)
    LET             reduce using rule 87 (expression -> ! expression .)
    WHILE           reduce using rule 87 (expression -> ! expression .)
    NAMESPACE       reduce using rule 87 (expression -> ! expression .)
    CLASS           reduce using rule 87 (expression -> ! expression .)
    FUNC            reduce using rule 87 (expression -> ! expression .)
    PYTHON_CODE_EXEC reduce using rule 87 (expression -> ! expression .)
    PYTHON_CODE     reduce using rule 87 (expression -> ! expression .)
    IF              reduce using rule 87 (expression -> ! expression .)
    !               reduce using rule 87 (expression -> ! expression .)
    STRING          reduce using rule 87 (expression -> ! expression .)
    FALSE           reduce using rule 87 (expression -> ! expression .)
    TRUE            reduce using rule 87 (expression -> ! expression .)
    FLOAT           reduce using rule 87 (expression -> ! expression .)
    INT             reduce using rule 87 (expression -> ! expression .)
    NULL            reduce using rule 87 (expression -> ! expression .)
    $end            reduce using rule 87 (expression -> ! expression .)
    COLON_COLON     shift and go to state 76


state 129

    (100) expression -> - expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    [               reduce using rule 100 (expression -> - expression .)
    (               reduce using rule 100 (expression -> - expression .)
    >               reduce using rule 100 (expression -> - expression .)
    <               reduce using rule 100 (expression -> - expression .)
    &               reduce using rule 100 (expression -> - expression .)
    |               reduce using rule 100 (expression -> - expression .)
    EQ_GREATER      reduce using rule 100 (expression -> - expression .)
    EQ_LESS         reduce using rule 100 (expression -> - expression .)
    NOT_EQEQ        reduce using rule 100 (expression -> - expression .)
    EQEQ            reduce using rule 100 (expression -> - expression .)
    %               reduce using rule 100 (expression -> - expression .)
    *               reduce using rule 100 (expression -> - expression .)
    /               reduce using rule 100 (expression -> - expression .)
    -               reduce using rule 100 (expression -> - expression .)
    +               reduce using rule 100 (expression -> - expression .)
    ,               reduce using rule 100 (expression -> - expression .)
    }               reduce using rule 100 (expression -> - expression .)
    ;               reduce using rule 100 (expression -> - expression .)
    IN              reduce using rule 100 (expression -> - expression .)
    )               reduce using rule 100 (expression -> - expression .)
    ]               reduce using rule 100 (expression -> - expression .)
    :               reduce using rule 100 (expression -> - expression .)
    {               reduce using rule 100 (expression -> - expression .)
    \               reduce using rule 100 (expression -> - expression .)
    SANDBOX         reduce using rule 100 (expression -> - expression .)
    LIMPORT         reduce using rule 100 (expression -> - expression .)
    .               reduce using rule 100 (expression -> - expression .)
    IMPORT          reduce using rule 100 (expression -> - expression .)
    ID              reduce using rule 100 (expression -> - expression .)
    RETURN          reduce using rule 100 (expression -> - expression .)
    DEL             reduce using rule 100 (expression -> - expression .)
    FOR             reduce using rule 100 (expression -> - expression .)
    BREAK           reduce using rule 100 (expression -> - expression .)
    LET             reduce using rule 100 (expression -> - expression .)
    WHILE           reduce using rule 100 (expression -> - expression .)
    NAMESPACE       reduce using rule 100 (expression -> - expression .)
    CLASS           reduce using rule 100 (expression -> - expression .)
    FUNC            reduce using rule 100 (expression -> - expression .)
    PYTHON_CODE_EXEC reduce using rule 100 (expression -> - expression .)
    PYTHON_CODE     reduce using rule 100 (expression -> - expression .)
    IF              reduce using rule 100 (expression -> - expression .)
    !               reduce using rule 100 (expression -> - expression .)
    STRING          reduce using rule 100 (expression -> - expression .)
    FALSE           reduce using rule 100 (expression -> - expression .)
    TRUE            reduce using rule 100 (expression -> - expression .)
    FLOAT           reduce using rule 100 (expression -> - expression .)
    INT             reduce using rule 100 (expression -> - expression .)
    NULL            reduce using rule 100 (expression -> - expression .)
    $end            reduce using rule 100 (expression -> - expression .)
    COLON_COLON     shift and go to state 76


state 130

    (99) expression -> + expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    [               reduce using rule 99 (expression -> + expression .)
    (               reduce using rule 99 (expression -> + expression .)
    >               reduce using rule 99 (expression -> + expression .)
    <               reduce using rule 99 (expression -> + expression .)
    &               reduce using rule 99 (expression -> + expression .)
    |               reduce using rule 99 (expression -> + expression .)
    EQ_GREATER      reduce using rule 99 (expression -> + expression .)
    EQ_LESS         reduce using rule 99 (expression -> + expression .)
    NOT_EQEQ        reduce using rule 99 (expression -> + expression .)
    EQEQ            reduce using rule 99 (expression -> + expression .)
    %               reduce using rule 99 (expression -> + expression .)
    *               reduce using rule 99 (expression -> + expression .)
    /               reduce using rule 99 (expression -> + expression .)
    -               reduce using rule 99 (expression -> + expression .)
    +               reduce using rule 99 (expression -> + expression .)
    ,               reduce using rule 99 (expression -> + expression .)
    }               reduce using rule 99 (expression -> + expression .)
    ;               reduce using rule 99 (expression -> + expression .)
    IN              reduce using rule 99 (expression -> + expression .)
    )               reduce using rule 99 (expression -> + expression .)
    ]               reduce using rule 99 (expression -> + expression .)
    :               reduce using rule 99 (expression -> + expression .)
    {               reduce using rule 99 (expression -> + expression .)
    \               reduce using rule 99 (expression -> + expression .)
    SANDBOX         reduce using rule 99 (expression -> + expression .)
    LIMPORT         reduce using rule 99 (expression -> + expression .)
    .               reduce using rule 99 (expression -> + expression .)
    IMPORT          reduce using rule 99 (expression -> + expression .)
    ID              reduce using rule 99 (expression -> + expression .)
    RETURN          reduce using rule 99 (expression -> + expression .)
    DEL             reduce using rule 99 (expression -> + expression .)
    FOR             reduce using rule 99 (expression -> + expression .)
    BREAK           reduce using rule 99 (expression -> + expression .)
    LET             reduce using rule 99 (expression -> + expression .)
    WHILE           reduce using rule 99 (expression -> + expression .)
    NAMESPACE       reduce using rule 99 (expression -> + expression .)
    CLASS           reduce using rule 99 (expression -> + expression .)
    FUNC            reduce using rule 99 (expression -> + expression .)
    PYTHON_CODE_EXEC reduce using rule 99 (expression -> + expression .)
    PYTHON_CODE     reduce using rule 99 (expression -> + expression .)
    IF              reduce using rule 99 (expression -> + expression .)
    !               reduce using rule 99 (expression -> + expression .)
    STRING          reduce using rule 99 (expression -> + expression .)
    FALSE           reduce using rule 99 (expression -> + expression .)
    TRUE            reduce using rule 99 (expression -> + expression .)
    FLOAT           reduce using rule 99 (expression -> + expression .)
    INT             reduce using rule 99 (expression -> + expression .)
    NULL            reduce using rule 99 (expression -> + expression .)
    $end            reduce using rule 99 (expression -> + expression .)
    COLON_COLON     shift and go to state 76


state 131

    (122) assoc_array -> \ assoc_array_items . \
    (124) assoc_array_items -> assoc_array_items . , expression : expression
    \               shift and go to state 193
    ,               shift and go to state 194


state 132

    (123) assoc_array_items -> expression . : expression
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    :               shift and go to state 195
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 133

    (19) sandbox -> SANDBOX { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               shift and go to state 196
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 31
    WHILE           shift and go to state 33
    NAMESPACE       shift and go to state 38
    CLASS           shift and go to state 39
    FUNC            shift and go to state 40
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43
    IF              shift and go to state 44
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64

    statement                      shift and go to state 65
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 134

    (104) _tuple -> { positional_args , . }
    (42) positional_args -> positional_args , . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    }               shift and go to state 197
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 198
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 135

    (105) _tuple -> { positional_args } .
    [               reduce using rule 105 (_tuple -> { positional_args } .)
    COLON_COLON     reduce using rule 105 (_tuple -> { positional_args } .)
    (               reduce using rule 105 (_tuple -> { positional_args } .)
    >               reduce using rule 105 (_tuple -> { positional_args } .)
    <               reduce using rule 105 (_tuple -> { positional_args } .)
    &               reduce using rule 105 (_tuple -> { positional_args } .)
    |               reduce using rule 105 (_tuple -> { positional_args } .)
    EQ_GREATER      reduce using rule 105 (_tuple -> { positional_args } .)
    EQ_LESS         reduce using rule 105 (_tuple -> { positional_args } .)
    NOT_EQEQ        reduce using rule 105 (_tuple -> { positional_args } .)
    EQEQ            reduce using rule 105 (_tuple -> { positional_args } .)
    %               reduce using rule 105 (_tuple -> { positional_args } .)
    *               reduce using rule 105 (_tuple -> { positional_args } .)
    /               reduce using rule 105 (_tuple -> { positional_args } .)
    -               reduce using rule 105 (_tuple -> { positional_args } .)
    +               reduce using rule 105 (_tuple -> { positional_args } .)
    ,               reduce using rule 105 (_tuple -> { positional_args } .)
    }               reduce using rule 105 (_tuple -> { positional_args } .)
    ;               reduce using rule 105 (_tuple -> { positional_args } .)
    IN              reduce using rule 105 (_tuple -> { positional_args } .)
    )               reduce using rule 105 (_tuple -> { positional_args } .)
    ]               reduce using rule 105 (_tuple -> { positional_args } .)
    :               reduce using rule 105 (_tuple -> { positional_args } .)
    {               reduce using rule 105 (_tuple -> { positional_args } .)
    \               reduce using rule 105 (_tuple -> { positional_args } .)
    SANDBOX         reduce using rule 105 (_tuple -> { positional_args } .)
    LIMPORT         reduce using rule 105 (_tuple -> { positional_args } .)
    .               reduce using rule 105 (_tuple -> { positional_args } .)
    IMPORT          reduce using rule 105 (_tuple -> { positional_args } .)
    ID              reduce using rule 105 (_tuple -> { positional_args } .)
    RETURN          reduce using rule 105 (_tuple -> { positional_args } .)
    DEL             reduce using rule 105 (_tuple -> { positional_args } .)
    FOR             reduce using rule 105 (_tuple -> { positional_args } .)
    BREAK           reduce using rule 105 (_tuple -> { positional_args } .)
    LET             reduce using rule 105 (_tuple -> { positional_args } .)
    WHILE           reduce using rule 105 (_tuple -> { positional_args } .)
    NAMESPACE       reduce using rule 105 (_tuple -> { positional_args } .)
    CLASS           reduce using rule 105 (_tuple -> { positional_args } .)
    FUNC            reduce using rule 105 (_tuple -> { positional_args } .)
    PYTHON_CODE_EXEC reduce using rule 105 (_tuple -> { positional_args } .)
    PYTHON_CODE     reduce using rule 105 (_tuple -> { positional_args } .)
    IF              reduce using rule 105 (_tuple -> { positional_args } .)
    !               reduce using rule 105 (_tuple -> { positional_args } .)
    STRING          reduce using rule 105 (_tuple -> { positional_args } .)
    FALSE           reduce using rule 105 (_tuple -> { positional_args } .)
    TRUE            reduce using rule 105 (_tuple -> { positional_args } .)
    FLOAT           reduce using rule 105 (_tuple -> { positional_args } .)
    INT             reduce using rule 105 (_tuple -> { positional_args } .)
    NULL            reduce using rule 105 (_tuple -> { positional_args } .)
    $end            reduce using rule 105 (_tuple -> { positional_args } .)


state 136

    (20) sandbox -> LIMPORT expression ; .
    SANDBOX         reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    LIMPORT         reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    .               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    IMPORT          reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    ID              reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    RETURN          reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    DEL             reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    FOR             reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    BREAK           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    LET             reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    WHILE           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    NAMESPACE       reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    CLASS           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    FUNC            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    PYTHON_CODE_EXEC reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    PYTHON_CODE     reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    IF              reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    (               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    !               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    +               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    -               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    \               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    [               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    {               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    STRING          reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    FALSE           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    TRUE            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    FLOAT           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    INT             reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    NULL            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    $end            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    }               reduce using rule 20 (sandbox -> LIMPORT expression ; .)


state 137

    (103) get_index -> expression [ expression . ]
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ]               shift and go to state 199
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 138

    (120) class_attribute -> expression COLON_COLON ID .
    =               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    [               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    COLON_COLON     reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    (               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    >               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    <               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    &               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    |               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    EQ_GREATER      reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    EQ_LESS         reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    NOT_EQEQ        reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    EQEQ            reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    %               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    *               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    /               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    -               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    +               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    ,               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    }               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    ;               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    IN              reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    )               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    ]               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    :               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    {               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    \               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    SANDBOX         reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    LIMPORT         reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    .               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    IMPORT          reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    ID              reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    RETURN          reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    DEL             reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    FOR             reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    BREAK           reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    LET             reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    WHILE           reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    NAMESPACE       reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    CLASS           reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    FUNC            reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    PYTHON_CODE_EXEC reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    PYTHON_CODE     reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    IF              reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    !               reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    STRING          reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    FALSE           reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    TRUE            reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    FLOAT           reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    INT             reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    NULL            reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)
    $end            reduce using rule 120 (class_attribute -> expression COLON_COLON ID .)


state 139

    (25) function_call -> expression ( empty . ) FARROW { program }
    (26) function_call -> expression ( empty . )
    )               shift and go to state 200


state 140

    (27) function_call -> expression ( function_arguments . ) FARROW { program }
    (28) function_call -> expression ( function_arguments . )
    )               shift and go to state 201


state 141

    (34) function_arguments -> kwargs .
    (44) kwargs -> kwargs . , id = expression
    )               reduce using rule 34 (function_arguments -> kwargs .)
    ,               shift and go to state 202


state 142

    (35) function_arguments -> positional_args . , kwargs
    (36) function_arguments -> positional_args .
    (42) positional_args -> positional_args . , expression
    ,               shift and go to state 203
    )               reduce using rule 36 (function_arguments -> positional_args .)


state 143

    (43) kwargs -> ID . = expression
    (101) expression -> ID . OF ID
    (121) id -> ID .
    =               shift and go to state 204
    OF              shift and go to state 103
    >               reduce using rule 121 (id -> ID .)
    <               reduce using rule 121 (id -> ID .)
    &               reduce using rule 121 (id -> ID .)
    |               reduce using rule 121 (id -> ID .)
    EQ_GREATER      reduce using rule 121 (id -> ID .)
    EQ_LESS         reduce using rule 121 (id -> ID .)
    NOT_EQEQ        reduce using rule 121 (id -> ID .)
    EQEQ            reduce using rule 121 (id -> ID .)
    %               reduce using rule 121 (id -> ID .)
    *               reduce using rule 121 (id -> ID .)
    /               reduce using rule 121 (id -> ID .)
    -               reduce using rule 121 (id -> ID .)
    +               reduce using rule 121 (id -> ID .)
    COLON_COLON     reduce using rule 121 (id -> ID .)
    [               reduce using rule 121 (id -> ID .)
    (               reduce using rule 121 (id -> ID .)
    ,               reduce using rule 121 (id -> ID .)
    )               reduce using rule 121 (id -> ID .)


state 144

    (85) expression -> expression > expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    [               reduce using rule 85 (expression -> expression > expression .)
    (               reduce using rule 85 (expression -> expression > expression .)
    >               reduce using rule 85 (expression -> expression > expression .)
    <               reduce using rule 85 (expression -> expression > expression .)
    &               reduce using rule 85 (expression -> expression > expression .)
    |               reduce using rule 85 (expression -> expression > expression .)
    EQ_GREATER      reduce using rule 85 (expression -> expression > expression .)
    EQ_LESS         reduce using rule 85 (expression -> expression > expression .)
    NOT_EQEQ        reduce using rule 85 (expression -> expression > expression .)
    EQEQ            reduce using rule 85 (expression -> expression > expression .)
    ,               reduce using rule 85 (expression -> expression > expression .)
    }               reduce using rule 85 (expression -> expression > expression .)
    ;               reduce using rule 85 (expression -> expression > expression .)
    IN              reduce using rule 85 (expression -> expression > expression .)
    )               reduce using rule 85 (expression -> expression > expression .)
    ]               reduce using rule 85 (expression -> expression > expression .)
    :               reduce using rule 85 (expression -> expression > expression .)
    {               reduce using rule 85 (expression -> expression > expression .)
    \               reduce using rule 85 (expression -> expression > expression .)
    SANDBOX         reduce using rule 85 (expression -> expression > expression .)
    LIMPORT         reduce using rule 85 (expression -> expression > expression .)
    .               reduce using rule 85 (expression -> expression > expression .)
    IMPORT          reduce using rule 85 (expression -> expression > expression .)
    ID              reduce using rule 85 (expression -> expression > expression .)
    RETURN          reduce using rule 85 (expression -> expression > expression .)
    DEL             reduce using rule 85 (expression -> expression > expression .)
    FOR             reduce using rule 85 (expression -> expression > expression .)
    BREAK           reduce using rule 85 (expression -> expression > expression .)
    LET             reduce using rule 85 (expression -> expression > expression .)
    WHILE           reduce using rule 85 (expression -> expression > expression .)
    NAMESPACE       reduce using rule 85 (expression -> expression > expression .)
    CLASS           reduce using rule 85 (expression -> expression > expression .)
    FUNC            reduce using rule 85 (expression -> expression > expression .)
    PYTHON_CODE_EXEC reduce using rule 85 (expression -> expression > expression .)
    PYTHON_CODE     reduce using rule 85 (expression -> expression > expression .)
    IF              reduce using rule 85 (expression -> expression > expression .)
    !               reduce using rule 85 (expression -> expression > expression .)
    STRING          reduce using rule 85 (expression -> expression > expression .)
    FALSE           reduce using rule 85 (expression -> expression > expression .)
    TRUE            reduce using rule 85 (expression -> expression > expression .)
    FLOAT           reduce using rule 85 (expression -> expression > expression .)
    INT             reduce using rule 85 (expression -> expression > expression .)
    NULL            reduce using rule 85 (expression -> expression > expression .)
    $end            reduce using rule 85 (expression -> expression > expression .)
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76


state 145

    (86) expression -> expression < expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    [               reduce using rule 86 (expression -> expression < expression .)
    (               reduce using rule 86 (expression -> expression < expression .)
    >               reduce using rule 86 (expression -> expression < expression .)
    <               reduce using rule 86 (expression -> expression < expression .)
    &               reduce using rule 86 (expression -> expression < expression .)
    |               reduce using rule 86 (expression -> expression < expression .)
    EQ_GREATER      reduce using rule 86 (expression -> expression < expression .)
    EQ_LESS         reduce using rule 86 (expression -> expression < expression .)
    NOT_EQEQ        reduce using rule 86 (expression -> expression < expression .)
    EQEQ            reduce using rule 86 (expression -> expression < expression .)
    ,               reduce using rule 86 (expression -> expression < expression .)
    }               reduce using rule 86 (expression -> expression < expression .)
    ;               reduce using rule 86 (expression -> expression < expression .)
    IN              reduce using rule 86 (expression -> expression < expression .)
    )               reduce using rule 86 (expression -> expression < expression .)
    ]               reduce using rule 86 (expression -> expression < expression .)
    :               reduce using rule 86 (expression -> expression < expression .)
    {               reduce using rule 86 (expression -> expression < expression .)
    \               reduce using rule 86 (expression -> expression < expression .)
    SANDBOX         reduce using rule 86 (expression -> expression < expression .)
    LIMPORT         reduce using rule 86 (expression -> expression < expression .)
    .               reduce using rule 86 (expression -> expression < expression .)
    IMPORT          reduce using rule 86 (expression -> expression < expression .)
    ID              reduce using rule 86 (expression -> expression < expression .)
    RETURN          reduce using rule 86 (expression -> expression < expression .)
    DEL             reduce using rule 86 (expression -> expression < expression .)
    FOR             reduce using rule 86 (expression -> expression < expression .)
    BREAK           reduce using rule 86 (expression -> expression < expression .)
    LET             reduce using rule 86 (expression -> expression < expression .)
    WHILE           reduce using rule 86 (expression -> expression < expression .)
    NAMESPACE       reduce using rule 86 (expression -> expression < expression .)
    CLASS           reduce using rule 86 (expression -> expression < expression .)
    FUNC            reduce using rule 86 (expression -> expression < expression .)
    PYTHON_CODE_EXEC reduce using rule 86 (expression -> expression < expression .)
    PYTHON_CODE     reduce using rule 86 (expression -> expression < expression .)
    IF              reduce using rule 86 (expression -> expression < expression .)
    !               reduce using rule 86 (expression -> expression < expression .)
    STRING          reduce using rule 86 (expression -> expression < expression .)
    FALSE           reduce using rule 86 (expression -> expression < expression .)
    TRUE            reduce using rule 86 (expression -> expression < expression .)
    FLOAT           reduce using rule 86 (expression -> expression < expression .)
    INT             reduce using rule 86 (expression -> expression < expression .)
    NULL            reduce using rule 86 (expression -> expression < expression .)
    $end            reduce using rule 86 (expression -> expression < expression .)
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76


state 146

    (88) expression -> expression & expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    [               reduce using rule 88 (expression -> expression & expression .)
    (               reduce using rule 88 (expression -> expression & expression .)
    &               reduce using rule 88 (expression -> expression & expression .)
    |               reduce using rule 88 (expression -> expression & expression .)
    ,               reduce using rule 88 (expression -> expression & expression .)
    }               reduce using rule 88 (expression -> expression & expression .)
    ;               reduce using rule 88 (expression -> expression & expression .)
    IN              reduce using rule 88 (expression -> expression & expression .)
    )               reduce using rule 88 (expression -> expression & expression .)
    ]               reduce using rule 88 (expression -> expression & expression .)
    :               reduce using rule 88 (expression -> expression & expression .)
    {               reduce using rule 88 (expression -> expression & expression .)
    \               reduce using rule 88 (expression -> expression & expression .)
    SANDBOX         reduce using rule 88 (expression -> expression & expression .)
    LIMPORT         reduce using rule 88 (expression -> expression & expression .)
    .               reduce using rule 88 (expression -> expression & expression .)
    IMPORT          reduce using rule 88 (expression -> expression & expression .)
    ID              reduce using rule 88 (expression -> expression & expression .)
    RETURN          reduce using rule 88 (expression -> expression & expression .)
    DEL             reduce using rule 88 (expression -> expression & expression .)
    FOR             reduce using rule 88 (expression -> expression & expression .)
    BREAK           reduce using rule 88 (expression -> expression & expression .)
    LET             reduce using rule 88 (expression -> expression & expression .)
    WHILE           reduce using rule 88 (expression -> expression & expression .)
    NAMESPACE       reduce using rule 88 (expression -> expression & expression .)
    CLASS           reduce using rule 88 (expression -> expression & expression .)
    FUNC            reduce using rule 88 (expression -> expression & expression .)
    PYTHON_CODE_EXEC reduce using rule 88 (expression -> expression & expression .)
    PYTHON_CODE     reduce using rule 88 (expression -> expression & expression .)
    IF              reduce using rule 88 (expression -> expression & expression .)
    !               reduce using rule 88 (expression -> expression & expression .)
    STRING          reduce using rule 88 (expression -> expression & expression .)
    FALSE           reduce using rule 88 (expression -> expression & expression .)
    TRUE            reduce using rule 88 (expression -> expression & expression .)
    FLOAT           reduce using rule 88 (expression -> expression & expression .)
    INT             reduce using rule 88 (expression -> expression & expression .)
    NULL            reduce using rule 88 (expression -> expression & expression .)
    $end            reduce using rule 88 (expression -> expression & expression .)
    >               shift and go to state 78
    <               shift and go to state 79
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76


state 147

    (89) expression -> expression | expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    [               reduce using rule 89 (expression -> expression | expression .)
    (               reduce using rule 89 (expression -> expression | expression .)
    |               reduce using rule 89 (expression -> expression | expression .)
    ,               reduce using rule 89 (expression -> expression | expression .)
    }               reduce using rule 89 (expression -> expression | expression .)
    ;               reduce using rule 89 (expression -> expression | expression .)
    IN              reduce using rule 89 (expression -> expression | expression .)
    )               reduce using rule 89 (expression -> expression | expression .)
    ]               reduce using rule 89 (expression -> expression | expression .)
    :               reduce using rule 89 (expression -> expression | expression .)
    {               reduce using rule 89 (expression -> expression | expression .)
    \               reduce using rule 89 (expression -> expression | expression .)
    SANDBOX         reduce using rule 89 (expression -> expression | expression .)
    LIMPORT         reduce using rule 89 (expression -> expression | expression .)
    .               reduce using rule 89 (expression -> expression | expression .)
    IMPORT          reduce using rule 89 (expression -> expression | expression .)
    ID              reduce using rule 89 (expression -> expression | expression .)
    RETURN          reduce using rule 89 (expression -> expression | expression .)
    DEL             reduce using rule 89 (expression -> expression | expression .)
    FOR             reduce using rule 89 (expression -> expression | expression .)
    BREAK           reduce using rule 89 (expression -> expression | expression .)
    LET             reduce using rule 89 (expression -> expression | expression .)
    WHILE           reduce using rule 89 (expression -> expression | expression .)
    NAMESPACE       reduce using rule 89 (expression -> expression | expression .)
    CLASS           reduce using rule 89 (expression -> expression | expression .)
    FUNC            reduce using rule 89 (expression -> expression | expression .)
    PYTHON_CODE_EXEC reduce using rule 89 (expression -> expression | expression .)
    PYTHON_CODE     reduce using rule 89 (expression -> expression | expression .)
    IF              reduce using rule 89 (expression -> expression | expression .)
    !               reduce using rule 89 (expression -> expression | expression .)
    STRING          reduce using rule 89 (expression -> expression | expression .)
    FALSE           reduce using rule 89 (expression -> expression | expression .)
    TRUE            reduce using rule 89 (expression -> expression | expression .)
    FLOAT           reduce using rule 89 (expression -> expression | expression .)
    INT             reduce using rule 89 (expression -> expression | expression .)
    NULL            reduce using rule 89 (expression -> expression | expression .)
    $end            reduce using rule 89 (expression -> expression | expression .)
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76


state 148

    (90) expression -> expression EQ_GREATER expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    [               reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    (               reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    >               reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    <               reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    &               reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    |               reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    EQ_GREATER      reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    EQ_LESS         reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    NOT_EQEQ        reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    EQEQ            reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    ,               reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    }               reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    ;               reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    IN              reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    )               reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    ]               reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    :               reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    {               reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    \               reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    SANDBOX         reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    LIMPORT         reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    .               reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    IMPORT          reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    ID              reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    RETURN          reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    DEL             reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    FOR             reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    BREAK           reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    LET             reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    WHILE           reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    NAMESPACE       reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    CLASS           reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    FUNC            reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    PYTHON_CODE_EXEC reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    PYTHON_CODE     reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    IF              reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    !               reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    STRING          reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    FALSE           reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    TRUE            reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    FLOAT           reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    INT             reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    NULL            reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    $end            reduce using rule 90 (expression -> expression EQ_GREATER expression .)
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76


state 149

    (91) expression -> expression EQ_LESS expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    [               reduce using rule 91 (expression -> expression EQ_LESS expression .)
    (               reduce using rule 91 (expression -> expression EQ_LESS expression .)
    >               reduce using rule 91 (expression -> expression EQ_LESS expression .)
    <               reduce using rule 91 (expression -> expression EQ_LESS expression .)
    &               reduce using rule 91 (expression -> expression EQ_LESS expression .)
    |               reduce using rule 91 (expression -> expression EQ_LESS expression .)
    EQ_GREATER      reduce using rule 91 (expression -> expression EQ_LESS expression .)
    EQ_LESS         reduce using rule 91 (expression -> expression EQ_LESS expression .)
    NOT_EQEQ        reduce using rule 91 (expression -> expression EQ_LESS expression .)
    EQEQ            reduce using rule 91 (expression -> expression EQ_LESS expression .)
    ,               reduce using rule 91 (expression -> expression EQ_LESS expression .)
    }               reduce using rule 91 (expression -> expression EQ_LESS expression .)
    ;               reduce using rule 91 (expression -> expression EQ_LESS expression .)
    IN              reduce using rule 91 (expression -> expression EQ_LESS expression .)
    )               reduce using rule 91 (expression -> expression EQ_LESS expression .)
    ]               reduce using rule 91 (expression -> expression EQ_LESS expression .)
    :               reduce using rule 91 (expression -> expression EQ_LESS expression .)
    {               reduce using rule 91 (expression -> expression EQ_LESS expression .)
    \               reduce using rule 91 (expression -> expression EQ_LESS expression .)
    SANDBOX         reduce using rule 91 (expression -> expression EQ_LESS expression .)
    LIMPORT         reduce using rule 91 (expression -> expression EQ_LESS expression .)
    .               reduce using rule 91 (expression -> expression EQ_LESS expression .)
    IMPORT          reduce using rule 91 (expression -> expression EQ_LESS expression .)
    ID              reduce using rule 91 (expression -> expression EQ_LESS expression .)
    RETURN          reduce using rule 91 (expression -> expression EQ_LESS expression .)
    DEL             reduce using rule 91 (expression -> expression EQ_LESS expression .)
    FOR             reduce using rule 91 (expression -> expression EQ_LESS expression .)
    BREAK           reduce using rule 91 (expression -> expression EQ_LESS expression .)
    LET             reduce using rule 91 (expression -> expression EQ_LESS expression .)
    WHILE           reduce using rule 91 (expression -> expression EQ_LESS expression .)
    NAMESPACE       reduce using rule 91 (expression -> expression EQ_LESS expression .)
    CLASS           reduce using rule 91 (expression -> expression EQ_LESS expression .)
    FUNC            reduce using rule 91 (expression -> expression EQ_LESS expression .)
    PYTHON_CODE_EXEC reduce using rule 91 (expression -> expression EQ_LESS expression .)
    PYTHON_CODE     reduce using rule 91 (expression -> expression EQ_LESS expression .)
    IF              reduce using rule 91 (expression -> expression EQ_LESS expression .)
    !               reduce using rule 91 (expression -> expression EQ_LESS expression .)
    STRING          reduce using rule 91 (expression -> expression EQ_LESS expression .)
    FALSE           reduce using rule 91 (expression -> expression EQ_LESS expression .)
    TRUE            reduce using rule 91 (expression -> expression EQ_LESS expression .)
    FLOAT           reduce using rule 91 (expression -> expression EQ_LESS expression .)
    INT             reduce using rule 91 (expression -> expression EQ_LESS expression .)
    NULL            reduce using rule 91 (expression -> expression EQ_LESS expression .)
    $end            reduce using rule 91 (expression -> expression EQ_LESS expression .)
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76


state 150

    (92) expression -> expression NOT_EQEQ expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    [               reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    (               reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    &               reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    |               reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    NOT_EQEQ        reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    EQEQ            reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    ,               reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    }               reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    ;               reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    IN              reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    )               reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    ]               reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    :               reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    {               reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    \               reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    SANDBOX         reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    LIMPORT         reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    .               reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    IMPORT          reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    ID              reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    RETURN          reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    DEL             reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    FOR             reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    BREAK           reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    LET             reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    WHILE           reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    NAMESPACE       reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    CLASS           reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    FUNC            reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    PYTHON_CODE_EXEC reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    PYTHON_CODE     reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    IF              reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    !               reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    STRING          reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    FALSE           reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    TRUE            reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    FLOAT           reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    INT             reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    NULL            reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    $end            reduce using rule 92 (expression -> expression NOT_EQEQ expression .)
    >               shift and go to state 78
    <               shift and go to state 79
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76


state 151

    (93) expression -> expression EQEQ expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    [               reduce using rule 93 (expression -> expression EQEQ expression .)
    (               reduce using rule 93 (expression -> expression EQEQ expression .)
    &               reduce using rule 93 (expression -> expression EQEQ expression .)
    |               reduce using rule 93 (expression -> expression EQEQ expression .)
    NOT_EQEQ        reduce using rule 93 (expression -> expression EQEQ expression .)
    EQEQ            reduce using rule 93 (expression -> expression EQEQ expression .)
    ,               reduce using rule 93 (expression -> expression EQEQ expression .)
    }               reduce using rule 93 (expression -> expression EQEQ expression .)
    ;               reduce using rule 93 (expression -> expression EQEQ expression .)
    IN              reduce using rule 93 (expression -> expression EQEQ expression .)
    )               reduce using rule 93 (expression -> expression EQEQ expression .)
    ]               reduce using rule 93 (expression -> expression EQEQ expression .)
    :               reduce using rule 93 (expression -> expression EQEQ expression .)
    {               reduce using rule 93 (expression -> expression EQEQ expression .)
    \               reduce using rule 93 (expression -> expression EQEQ expression .)
    SANDBOX         reduce using rule 93 (expression -> expression EQEQ expression .)
    LIMPORT         reduce using rule 93 (expression -> expression EQEQ expression .)
    .               reduce using rule 93 (expression -> expression EQEQ expression .)
    IMPORT          reduce using rule 93 (expression -> expression EQEQ expression .)
    ID              reduce using rule 93 (expression -> expression EQEQ expression .)
    RETURN          reduce using rule 93 (expression -> expression EQEQ expression .)
    DEL             reduce using rule 93 (expression -> expression EQEQ expression .)
    FOR             reduce using rule 93 (expression -> expression EQEQ expression .)
    BREAK           reduce using rule 93 (expression -> expression EQEQ expression .)
    LET             reduce using rule 93 (expression -> expression EQEQ expression .)
    WHILE           reduce using rule 93 (expression -> expression EQEQ expression .)
    NAMESPACE       reduce using rule 93 (expression -> expression EQEQ expression .)
    CLASS           reduce using rule 93 (expression -> expression EQEQ expression .)
    FUNC            reduce using rule 93 (expression -> expression EQEQ expression .)
    PYTHON_CODE_EXEC reduce using rule 93 (expression -> expression EQEQ expression .)
    PYTHON_CODE     reduce using rule 93 (expression -> expression EQEQ expression .)
    IF              reduce using rule 93 (expression -> expression EQEQ expression .)
    !               reduce using rule 93 (expression -> expression EQEQ expression .)
    STRING          reduce using rule 93 (expression -> expression EQEQ expression .)
    FALSE           reduce using rule 93 (expression -> expression EQEQ expression .)
    TRUE            reduce using rule 93 (expression -> expression EQEQ expression .)
    FLOAT           reduce using rule 93 (expression -> expression EQEQ expression .)
    INT             reduce using rule 93 (expression -> expression EQEQ expression .)
    NULL            reduce using rule 93 (expression -> expression EQEQ expression .)
    $end            reduce using rule 93 (expression -> expression EQEQ expression .)
    >               shift and go to state 78
    <               shift and go to state 79
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76


state 152

    (94) expression -> expression % expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    [               reduce using rule 94 (expression -> expression % expression .)
    (               reduce using rule 94 (expression -> expression % expression .)
    >               reduce using rule 94 (expression -> expression % expression .)
    <               reduce using rule 94 (expression -> expression % expression .)
    &               reduce using rule 94 (expression -> expression % expression .)
    |               reduce using rule 94 (expression -> expression % expression .)
    EQ_GREATER      reduce using rule 94 (expression -> expression % expression .)
    EQ_LESS         reduce using rule 94 (expression -> expression % expression .)
    NOT_EQEQ        reduce using rule 94 (expression -> expression % expression .)
    EQEQ            reduce using rule 94 (expression -> expression % expression .)
    %               reduce using rule 94 (expression -> expression % expression .)
    *               reduce using rule 94 (expression -> expression % expression .)
    /               reduce using rule 94 (expression -> expression % expression .)
    -               reduce using rule 94 (expression -> expression % expression .)
    +               reduce using rule 94 (expression -> expression % expression .)
    ,               reduce using rule 94 (expression -> expression % expression .)
    }               reduce using rule 94 (expression -> expression % expression .)
    ;               reduce using rule 94 (expression -> expression % expression .)
    IN              reduce using rule 94 (expression -> expression % expression .)
    )               reduce using rule 94 (expression -> expression % expression .)
    ]               reduce using rule 94 (expression -> expression % expression .)
    :               reduce using rule 94 (expression -> expression % expression .)
    {               reduce using rule 94 (expression -> expression % expression .)
    \               reduce using rule 94 (expression -> expression % expression .)
    SANDBOX         reduce using rule 94 (expression -> expression % expression .)
    LIMPORT         reduce using rule 94 (expression -> expression % expression .)
    .               reduce using rule 94 (expression -> expression % expression .)
    IMPORT          reduce using rule 94 (expression -> expression % expression .)
    ID              reduce using rule 94 (expression -> expression % expression .)
    RETURN          reduce using rule 94 (expression -> expression % expression .)
    DEL             reduce using rule 94 (expression -> expression % expression .)
    FOR             reduce using rule 94 (expression -> expression % expression .)
    BREAK           reduce using rule 94 (expression -> expression % expression .)
    LET             reduce using rule 94 (expression -> expression % expression .)
    WHILE           reduce using rule 94 (expression -> expression % expression .)
    NAMESPACE       reduce using rule 94 (expression -> expression % expression .)
    CLASS           reduce using rule 94 (expression -> expression % expression .)
    FUNC            reduce using rule 94 (expression -> expression % expression .)
    PYTHON_CODE_EXEC reduce using rule 94 (expression -> expression % expression .)
    PYTHON_CODE     reduce using rule 94 (expression -> expression % expression .)
    IF              reduce using rule 94 (expression -> expression % expression .)
    !               reduce using rule 94 (expression -> expression % expression .)
    STRING          reduce using rule 94 (expression -> expression % expression .)
    FALSE           reduce using rule 94 (expression -> expression % expression .)
    TRUE            reduce using rule 94 (expression -> expression % expression .)
    FLOAT           reduce using rule 94 (expression -> expression % expression .)
    INT             reduce using rule 94 (expression -> expression % expression .)
    NULL            reduce using rule 94 (expression -> expression % expression .)
    $end            reduce using rule 94 (expression -> expression % expression .)
    COLON_COLON     shift and go to state 76


state 153

    (95) expression -> expression * expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    [               reduce using rule 95 (expression -> expression * expression .)
    (               reduce using rule 95 (expression -> expression * expression .)
    >               reduce using rule 95 (expression -> expression * expression .)
    <               reduce using rule 95 (expression -> expression * expression .)
    &               reduce using rule 95 (expression -> expression * expression .)
    |               reduce using rule 95 (expression -> expression * expression .)
    EQ_GREATER      reduce using rule 95 (expression -> expression * expression .)
    EQ_LESS         reduce using rule 95 (expression -> expression * expression .)
    NOT_EQEQ        reduce using rule 95 (expression -> expression * expression .)
    EQEQ            reduce using rule 95 (expression -> expression * expression .)
    %               reduce using rule 95 (expression -> expression * expression .)
    *               reduce using rule 95 (expression -> expression * expression .)
    /               reduce using rule 95 (expression -> expression * expression .)
    -               reduce using rule 95 (expression -> expression * expression .)
    +               reduce using rule 95 (expression -> expression * expression .)
    ,               reduce using rule 95 (expression -> expression * expression .)
    }               reduce using rule 95 (expression -> expression * expression .)
    ;               reduce using rule 95 (expression -> expression * expression .)
    IN              reduce using rule 95 (expression -> expression * expression .)
    )               reduce using rule 95 (expression -> expression * expression .)
    ]               reduce using rule 95 (expression -> expression * expression .)
    :               reduce using rule 95 (expression -> expression * expression .)
    {               reduce using rule 95 (expression -> expression * expression .)
    \               reduce using rule 95 (expression -> expression * expression .)
    SANDBOX         reduce using rule 95 (expression -> expression * expression .)
    LIMPORT         reduce using rule 95 (expression -> expression * expression .)
    .               reduce using rule 95 (expression -> expression * expression .)
    IMPORT          reduce using rule 95 (expression -> expression * expression .)
    ID              reduce using rule 95 (expression -> expression * expression .)
    RETURN          reduce using rule 95 (expression -> expression * expression .)
    DEL             reduce using rule 95 (expression -> expression * expression .)
    FOR             reduce using rule 95 (expression -> expression * expression .)
    BREAK           reduce using rule 95 (expression -> expression * expression .)
    LET             reduce using rule 95 (expression -> expression * expression .)
    WHILE           reduce using rule 95 (expression -> expression * expression .)
    NAMESPACE       reduce using rule 95 (expression -> expression * expression .)
    CLASS           reduce using rule 95 (expression -> expression * expression .)
    FUNC            reduce using rule 95 (expression -> expression * expression .)
    PYTHON_CODE_EXEC reduce using rule 95 (expression -> expression * expression .)
    PYTHON_CODE     reduce using rule 95 (expression -> expression * expression .)
    IF              reduce using rule 95 (expression -> expression * expression .)
    !               reduce using rule 95 (expression -> expression * expression .)
    STRING          reduce using rule 95 (expression -> expression * expression .)
    FALSE           reduce using rule 95 (expression -> expression * expression .)
    TRUE            reduce using rule 95 (expression -> expression * expression .)
    FLOAT           reduce using rule 95 (expression -> expression * expression .)
    INT             reduce using rule 95 (expression -> expression * expression .)
    NULL            reduce using rule 95 (expression -> expression * expression .)
    $end            reduce using rule 95 (expression -> expression * expression .)
    COLON_COLON     shift and go to state 76


state 154

    (96) expression -> expression / expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    [               reduce using rule 96 (expression -> expression / expression .)
    (               reduce using rule 96 (expression -> expression / expression .)
    >               reduce using rule 96 (expression -> expression / expression .)
    <               reduce using rule 96 (expression -> expression / expression .)
    &               reduce using rule 96 (expression -> expression / expression .)
    |               reduce using rule 96 (expression -> expression / expression .)
    EQ_GREATER      reduce using rule 96 (expression -> expression / expression .)
    EQ_LESS         reduce using rule 96 (expression -> expression / expression .)
    NOT_EQEQ        reduce using rule 96 (expression -> expression / expression .)
    EQEQ            reduce using rule 96 (expression -> expression / expression .)
    %               reduce using rule 96 (expression -> expression / expression .)
    *               reduce using rule 96 (expression -> expression / expression .)
    /               reduce using rule 96 (expression -> expression / expression .)
    -               reduce using rule 96 (expression -> expression / expression .)
    +               reduce using rule 96 (expression -> expression / expression .)
    ,               reduce using rule 96 (expression -> expression / expression .)
    }               reduce using rule 96 (expression -> expression / expression .)
    ;               reduce using rule 96 (expression -> expression / expression .)
    IN              reduce using rule 96 (expression -> expression / expression .)
    )               reduce using rule 96 (expression -> expression / expression .)
    ]               reduce using rule 96 (expression -> expression / expression .)
    :               reduce using rule 96 (expression -> expression / expression .)
    {               reduce using rule 96 (expression -> expression / expression .)
    \               reduce using rule 96 (expression -> expression / expression .)
    SANDBOX         reduce using rule 96 (expression -> expression / expression .)
    LIMPORT         reduce using rule 96 (expression -> expression / expression .)
    .               reduce using rule 96 (expression -> expression / expression .)
    IMPORT          reduce using rule 96 (expression -> expression / expression .)
    ID              reduce using rule 96 (expression -> expression / expression .)
    RETURN          reduce using rule 96 (expression -> expression / expression .)
    DEL             reduce using rule 96 (expression -> expression / expression .)
    FOR             reduce using rule 96 (expression -> expression / expression .)
    BREAK           reduce using rule 96 (expression -> expression / expression .)
    LET             reduce using rule 96 (expression -> expression / expression .)
    WHILE           reduce using rule 96 (expression -> expression / expression .)
    NAMESPACE       reduce using rule 96 (expression -> expression / expression .)
    CLASS           reduce using rule 96 (expression -> expression / expression .)
    FUNC            reduce using rule 96 (expression -> expression / expression .)
    PYTHON_CODE_EXEC reduce using rule 96 (expression -> expression / expression .)
    PYTHON_CODE     reduce using rule 96 (expression -> expression / expression .)
    IF              reduce using rule 96 (expression -> expression / expression .)
    !               reduce using rule 96 (expression -> expression / expression .)
    STRING          reduce using rule 96 (expression -> expression / expression .)
    FALSE           reduce using rule 96 (expression -> expression / expression .)
    TRUE            reduce using rule 96 (expression -> expression / expression .)
    FLOAT           reduce using rule 96 (expression -> expression / expression .)
    INT             reduce using rule 96 (expression -> expression / expression .)
    NULL            reduce using rule 96 (expression -> expression / expression .)
    $end            reduce using rule 96 (expression -> expression / expression .)
    COLON_COLON     shift and go to state 76


state 155

    (97) expression -> expression - expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    [               reduce using rule 97 (expression -> expression - expression .)
    (               reduce using rule 97 (expression -> expression - expression .)
    >               reduce using rule 97 (expression -> expression - expression .)
    <               reduce using rule 97 (expression -> expression - expression .)
    &               reduce using rule 97 (expression -> expression - expression .)
    |               reduce using rule 97 (expression -> expression - expression .)
    EQ_GREATER      reduce using rule 97 (expression -> expression - expression .)
    EQ_LESS         reduce using rule 97 (expression -> expression - expression .)
    NOT_EQEQ        reduce using rule 97 (expression -> expression - expression .)
    EQEQ            reduce using rule 97 (expression -> expression - expression .)
    -               reduce using rule 97 (expression -> expression - expression .)
    +               reduce using rule 97 (expression -> expression - expression .)
    ,               reduce using rule 97 (expression -> expression - expression .)
    }               reduce using rule 97 (expression -> expression - expression .)
    ;               reduce using rule 97 (expression -> expression - expression .)
    IN              reduce using rule 97 (expression -> expression - expression .)
    )               reduce using rule 97 (expression -> expression - expression .)
    ]               reduce using rule 97 (expression -> expression - expression .)
    :               reduce using rule 97 (expression -> expression - expression .)
    {               reduce using rule 97 (expression -> expression - expression .)
    \               reduce using rule 97 (expression -> expression - expression .)
    SANDBOX         reduce using rule 97 (expression -> expression - expression .)
    LIMPORT         reduce using rule 97 (expression -> expression - expression .)
    .               reduce using rule 97 (expression -> expression - expression .)
    IMPORT          reduce using rule 97 (expression -> expression - expression .)
    ID              reduce using rule 97 (expression -> expression - expression .)
    RETURN          reduce using rule 97 (expression -> expression - expression .)
    DEL             reduce using rule 97 (expression -> expression - expression .)
    FOR             reduce using rule 97 (expression -> expression - expression .)
    BREAK           reduce using rule 97 (expression -> expression - expression .)
    LET             reduce using rule 97 (expression -> expression - expression .)
    WHILE           reduce using rule 97 (expression -> expression - expression .)
    NAMESPACE       reduce using rule 97 (expression -> expression - expression .)
    CLASS           reduce using rule 97 (expression -> expression - expression .)
    FUNC            reduce using rule 97 (expression -> expression - expression .)
    PYTHON_CODE_EXEC reduce using rule 97 (expression -> expression - expression .)
    PYTHON_CODE     reduce using rule 97 (expression -> expression - expression .)
    IF              reduce using rule 97 (expression -> expression - expression .)
    !               reduce using rule 97 (expression -> expression - expression .)
    STRING          reduce using rule 97 (expression -> expression - expression .)
    FALSE           reduce using rule 97 (expression -> expression - expression .)
    TRUE            reduce using rule 97 (expression -> expression - expression .)
    FLOAT           reduce using rule 97 (expression -> expression - expression .)
    INT             reduce using rule 97 (expression -> expression - expression .)
    NULL            reduce using rule 97 (expression -> expression - expression .)
    $end            reduce using rule 97 (expression -> expression - expression .)
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    COLON_COLON     shift and go to state 76


state 156

    (98) expression -> expression + expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    [               reduce using rule 98 (expression -> expression + expression .)
    (               reduce using rule 98 (expression -> expression + expression .)
    >               reduce using rule 98 (expression -> expression + expression .)
    <               reduce using rule 98 (expression -> expression + expression .)
    &               reduce using rule 98 (expression -> expression + expression .)
    |               reduce using rule 98 (expression -> expression + expression .)
    EQ_GREATER      reduce using rule 98 (expression -> expression + expression .)
    EQ_LESS         reduce using rule 98 (expression -> expression + expression .)
    NOT_EQEQ        reduce using rule 98 (expression -> expression + expression .)
    EQEQ            reduce using rule 98 (expression -> expression + expression .)
    -               reduce using rule 98 (expression -> expression + expression .)
    +               reduce using rule 98 (expression -> expression + expression .)
    ,               reduce using rule 98 (expression -> expression + expression .)
    }               reduce using rule 98 (expression -> expression + expression .)
    ;               reduce using rule 98 (expression -> expression + expression .)
    IN              reduce using rule 98 (expression -> expression + expression .)
    )               reduce using rule 98 (expression -> expression + expression .)
    ]               reduce using rule 98 (expression -> expression + expression .)
    :               reduce using rule 98 (expression -> expression + expression .)
    {               reduce using rule 98 (expression -> expression + expression .)
    \               reduce using rule 98 (expression -> expression + expression .)
    SANDBOX         reduce using rule 98 (expression -> expression + expression .)
    LIMPORT         reduce using rule 98 (expression -> expression + expression .)
    .               reduce using rule 98 (expression -> expression + expression .)
    IMPORT          reduce using rule 98 (expression -> expression + expression .)
    ID              reduce using rule 98 (expression -> expression + expression .)
    RETURN          reduce using rule 98 (expression -> expression + expression .)
    DEL             reduce using rule 98 (expression -> expression + expression .)
    FOR             reduce using rule 98 (expression -> expression + expression .)
    BREAK           reduce using rule 98 (expression -> expression + expression .)
    LET             reduce using rule 98 (expression -> expression + expression .)
    WHILE           reduce using rule 98 (expression -> expression + expression .)
    NAMESPACE       reduce using rule 98 (expression -> expression + expression .)
    CLASS           reduce using rule 98 (expression -> expression + expression .)
    FUNC            reduce using rule 98 (expression -> expression + expression .)
    PYTHON_CODE_EXEC reduce using rule 98 (expression -> expression + expression .)
    PYTHON_CODE     reduce using rule 98 (expression -> expression + expression .)
    IF              reduce using rule 98 (expression -> expression + expression .)
    !               reduce using rule 98 (expression -> expression + expression .)
    STRING          reduce using rule 98 (expression -> expression + expression .)
    FALSE           reduce using rule 98 (expression -> expression + expression .)
    TRUE            reduce using rule 98 (expression -> expression + expression .)
    FLOAT           reduce using rule 98 (expression -> expression + expression .)
    INT             reduce using rule 98 (expression -> expression + expression .)
    NULL            reduce using rule 98 (expression -> expression + expression .)
    $end            reduce using rule 98 (expression -> expression + expression .)
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    COLON_COLON     shift and go to state 76


state 157

    (68) import_statement -> . GLOBAL ; .
    SANDBOX         reduce using rule 68 (import_statement -> . GLOBAL ; .)
    LIMPORT         reduce using rule 68 (import_statement -> . GLOBAL ; .)
    .               reduce using rule 68 (import_statement -> . GLOBAL ; .)
    IMPORT          reduce using rule 68 (import_statement -> . GLOBAL ; .)
    ID              reduce using rule 68 (import_statement -> . GLOBAL ; .)
    RETURN          reduce using rule 68 (import_statement -> . GLOBAL ; .)
    DEL             reduce using rule 68 (import_statement -> . GLOBAL ; .)
    FOR             reduce using rule 68 (import_statement -> . GLOBAL ; .)
    BREAK           reduce using rule 68 (import_statement -> . GLOBAL ; .)
    LET             reduce using rule 68 (import_statement -> . GLOBAL ; .)
    WHILE           reduce using rule 68 (import_statement -> . GLOBAL ; .)
    NAMESPACE       reduce using rule 68 (import_statement -> . GLOBAL ; .)
    CLASS           reduce using rule 68 (import_statement -> . GLOBAL ; .)
    FUNC            reduce using rule 68 (import_statement -> . GLOBAL ; .)
    PYTHON_CODE_EXEC reduce using rule 68 (import_statement -> . GLOBAL ; .)
    PYTHON_CODE     reduce using rule 68 (import_statement -> . GLOBAL ; .)
    IF              reduce using rule 68 (import_statement -> . GLOBAL ; .)
    (               reduce using rule 68 (import_statement -> . GLOBAL ; .)
    !               reduce using rule 68 (import_statement -> . GLOBAL ; .)
    +               reduce using rule 68 (import_statement -> . GLOBAL ; .)
    -               reduce using rule 68 (import_statement -> . GLOBAL ; .)
    \               reduce using rule 68 (import_statement -> . GLOBAL ; .)
    [               reduce using rule 68 (import_statement -> . GLOBAL ; .)
    {               reduce using rule 68 (import_statement -> . GLOBAL ; .)
    STRING          reduce using rule 68 (import_statement -> . GLOBAL ; .)
    FALSE           reduce using rule 68 (import_statement -> . GLOBAL ; .)
    TRUE            reduce using rule 68 (import_statement -> . GLOBAL ; .)
    FLOAT           reduce using rule 68 (import_statement -> . GLOBAL ; .)
    INT             reduce using rule 68 (import_statement -> . GLOBAL ; .)
    NULL            reduce using rule 68 (import_statement -> . GLOBAL ; .)
    $end            reduce using rule 68 (import_statement -> . GLOBAL ; .)
    }               reduce using rule 68 (import_statement -> . GLOBAL ; .)


state 158

    (69) import_statement -> IMPORT expression ; .
    SANDBOX         reduce using rule 69 (import_statement -> IMPORT expression ; .)
    LIMPORT         reduce using rule 69 (import_statement -> IMPORT expression ; .)
    .               reduce using rule 69 (import_statement -> IMPORT expression ; .)
    IMPORT          reduce using rule 69 (import_statement -> IMPORT expression ; .)
    ID              reduce using rule 69 (import_statement -> IMPORT expression ; .)
    RETURN          reduce using rule 69 (import_statement -> IMPORT expression ; .)
    DEL             reduce using rule 69 (import_statement -> IMPORT expression ; .)
    FOR             reduce using rule 69 (import_statement -> IMPORT expression ; .)
    BREAK           reduce using rule 69 (import_statement -> IMPORT expression ; .)
    LET             reduce using rule 69 (import_statement -> IMPORT expression ; .)
    WHILE           reduce using rule 69 (import_statement -> IMPORT expression ; .)
    NAMESPACE       reduce using rule 69 (import_statement -> IMPORT expression ; .)
    CLASS           reduce using rule 69 (import_statement -> IMPORT expression ; .)
    FUNC            reduce using rule 69 (import_statement -> IMPORT expression ; .)
    PYTHON_CODE_EXEC reduce using rule 69 (import_statement -> IMPORT expression ; .)
    PYTHON_CODE     reduce using rule 69 (import_statement -> IMPORT expression ; .)
    IF              reduce using rule 69 (import_statement -> IMPORT expression ; .)
    (               reduce using rule 69 (import_statement -> IMPORT expression ; .)
    !               reduce using rule 69 (import_statement -> IMPORT expression ; .)
    +               reduce using rule 69 (import_statement -> IMPORT expression ; .)
    -               reduce using rule 69 (import_statement -> IMPORT expression ; .)
    \               reduce using rule 69 (import_statement -> IMPORT expression ; .)
    [               reduce using rule 69 (import_statement -> IMPORT expression ; .)
    {               reduce using rule 69 (import_statement -> IMPORT expression ; .)
    STRING          reduce using rule 69 (import_statement -> IMPORT expression ; .)
    FALSE           reduce using rule 69 (import_statement -> IMPORT expression ; .)
    TRUE            reduce using rule 69 (import_statement -> IMPORT expression ; .)
    FLOAT           reduce using rule 69 (import_statement -> IMPORT expression ; .)
    INT             reduce using rule 69 (import_statement -> IMPORT expression ; .)
    NULL            reduce using rule 69 (import_statement -> IMPORT expression ; .)
    $end            reduce using rule 69 (import_statement -> IMPORT expression ; .)
    }               reduce using rule 69 (import_statement -> IMPORT expression ; .)


state 159

    (47) variable_operation -> get_index EQ_DIV expression . ;
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ;               shift and go to state 205
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 160

    (49) variable_operation -> get_index EQ_MOD expression . ;
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ;               shift and go to state 206
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 161

    (51) variable_operation -> get_index EQ_MUL expression . ;
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ;               shift and go to state 207
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 162

    (53) variable_operation -> get_index EQ_SUB expression . ;
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ;               shift and go to state 208
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 163

    (55) variable_operation -> get_index EQ_ADD expression . ;
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ;               shift and go to state 209
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 164

    (48) variable_operation -> ID EQ_DIV expression . ;
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ;               shift and go to state 210
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 165

    (50) variable_operation -> ID EQ_MOD expression . ;
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ;               shift and go to state 211
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 166

    (52) variable_operation -> ID EQ_MUL expression . ;
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ;               shift and go to state 212
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 167

    (54) variable_operation -> ID EQ_SUB expression . ;
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ;               shift and go to state 213
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 168

    (56) variable_operation -> ID EQ_ADD expression . ;
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ;               shift and go to state 214
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 169

    (101) expression -> ID OF ID .
    [               reduce using rule 101 (expression -> ID OF ID .)
    COLON_COLON     reduce using rule 101 (expression -> ID OF ID .)
    (               reduce using rule 101 (expression -> ID OF ID .)
    >               reduce using rule 101 (expression -> ID OF ID .)
    <               reduce using rule 101 (expression -> ID OF ID .)
    &               reduce using rule 101 (expression -> ID OF ID .)
    |               reduce using rule 101 (expression -> ID OF ID .)
    EQ_GREATER      reduce using rule 101 (expression -> ID OF ID .)
    EQ_LESS         reduce using rule 101 (expression -> ID OF ID .)
    NOT_EQEQ        reduce using rule 101 (expression -> ID OF ID .)
    EQEQ            reduce using rule 101 (expression -> ID OF ID .)
    %               reduce using rule 101 (expression -> ID OF ID .)
    *               reduce using rule 101 (expression -> ID OF ID .)
    /               reduce using rule 101 (expression -> ID OF ID .)
    -               reduce using rule 101 (expression -> ID OF ID .)
    +               reduce using rule 101 (expression -> ID OF ID .)
    ,               reduce using rule 101 (expression -> ID OF ID .)
    }               reduce using rule 101 (expression -> ID OF ID .)
    ;               reduce using rule 101 (expression -> ID OF ID .)
    IN              reduce using rule 101 (expression -> ID OF ID .)
    )               reduce using rule 101 (expression -> ID OF ID .)
    ]               reduce using rule 101 (expression -> ID OF ID .)
    :               reduce using rule 101 (expression -> ID OF ID .)
    {               reduce using rule 101 (expression -> ID OF ID .)
    \               reduce using rule 101 (expression -> ID OF ID .)
    SANDBOX         reduce using rule 101 (expression -> ID OF ID .)
    LIMPORT         reduce using rule 101 (expression -> ID OF ID .)
    .               reduce using rule 101 (expression -> ID OF ID .)
    IMPORT          reduce using rule 101 (expression -> ID OF ID .)
    ID              reduce using rule 101 (expression -> ID OF ID .)
    RETURN          reduce using rule 101 (expression -> ID OF ID .)
    DEL             reduce using rule 101 (expression -> ID OF ID .)
    FOR             reduce using rule 101 (expression -> ID OF ID .)
    BREAK           reduce using rule 101 (expression -> ID OF ID .)
    LET             reduce using rule 101 (expression -> ID OF ID .)
    WHILE           reduce using rule 101 (expression -> ID OF ID .)
    NAMESPACE       reduce using rule 101 (expression -> ID OF ID .)
    CLASS           reduce using rule 101 (expression -> ID OF ID .)
    FUNC            reduce using rule 101 (expression -> ID OF ID .)
    PYTHON_CODE_EXEC reduce using rule 101 (expression -> ID OF ID .)
    PYTHON_CODE     reduce using rule 101 (expression -> ID OF ID .)
    IF              reduce using rule 101 (expression -> ID OF ID .)
    !               reduce using rule 101 (expression -> ID OF ID .)
    STRING          reduce using rule 101 (expression -> ID OF ID .)
    FALSE           reduce using rule 101 (expression -> ID OF ID .)
    TRUE            reduce using rule 101 (expression -> ID OF ID .)
    FLOAT           reduce using rule 101 (expression -> ID OF ID .)
    INT             reduce using rule 101 (expression -> ID OF ID .)
    NULL            reduce using rule 101 (expression -> ID OF ID .)
    $end            reduce using rule 101 (expression -> ID OF ID .)


state 170

    (24) return_statement -> RETURN expression ; .
    SANDBOX         reduce using rule 24 (return_statement -> RETURN expression ; .)
    LIMPORT         reduce using rule 24 (return_statement -> RETURN expression ; .)
    .               reduce using rule 24 (return_statement -> RETURN expression ; .)
    IMPORT          reduce using rule 24 (return_statement -> RETURN expression ; .)
    ID              reduce using rule 24 (return_statement -> RETURN expression ; .)
    RETURN          reduce using rule 24 (return_statement -> RETURN expression ; .)
    DEL             reduce using rule 24 (return_statement -> RETURN expression ; .)
    FOR             reduce using rule 24 (return_statement -> RETURN expression ; .)
    BREAK           reduce using rule 24 (return_statement -> RETURN expression ; .)
    LET             reduce using rule 24 (return_statement -> RETURN expression ; .)
    WHILE           reduce using rule 24 (return_statement -> RETURN expression ; .)
    NAMESPACE       reduce using rule 24 (return_statement -> RETURN expression ; .)
    CLASS           reduce using rule 24 (return_statement -> RETURN expression ; .)
    FUNC            reduce using rule 24 (return_statement -> RETURN expression ; .)
    PYTHON_CODE_EXEC reduce using rule 24 (return_statement -> RETURN expression ; .)
    PYTHON_CODE     reduce using rule 24 (return_statement -> RETURN expression ; .)
    IF              reduce using rule 24 (return_statement -> RETURN expression ; .)
    (               reduce using rule 24 (return_statement -> RETURN expression ; .)
    !               reduce using rule 24 (return_statement -> RETURN expression ; .)
    +               reduce using rule 24 (return_statement -> RETURN expression ; .)
    -               reduce using rule 24 (return_statement -> RETURN expression ; .)
    \               reduce using rule 24 (return_statement -> RETURN expression ; .)
    [               reduce using rule 24 (return_statement -> RETURN expression ; .)
    {               reduce using rule 24 (return_statement -> RETURN expression ; .)
    STRING          reduce using rule 24 (return_statement -> RETURN expression ; .)
    FALSE           reduce using rule 24 (return_statement -> RETURN expression ; .)
    TRUE            reduce using rule 24 (return_statement -> RETURN expression ; .)
    FLOAT           reduce using rule 24 (return_statement -> RETURN expression ; .)
    INT             reduce using rule 24 (return_statement -> RETURN expression ; .)
    NULL            reduce using rule 24 (return_statement -> RETURN expression ; .)
    $end            reduce using rule 24 (return_statement -> RETURN expression ; .)
    }               reduce using rule 24 (return_statement -> RETURN expression ; .)


state 171

    (67) delete_statement -> DEL ID ; .
    SANDBOX         reduce using rule 67 (delete_statement -> DEL ID ; .)
    LIMPORT         reduce using rule 67 (delete_statement -> DEL ID ; .)
    .               reduce using rule 67 (delete_statement -> DEL ID ; .)
    IMPORT          reduce using rule 67 (delete_statement -> DEL ID ; .)
    ID              reduce using rule 67 (delete_statement -> DEL ID ; .)
    RETURN          reduce using rule 67 (delete_statement -> DEL ID ; .)
    DEL             reduce using rule 67 (delete_statement -> DEL ID ; .)
    FOR             reduce using rule 67 (delete_statement -> DEL ID ; .)
    BREAK           reduce using rule 67 (delete_statement -> DEL ID ; .)
    LET             reduce using rule 67 (delete_statement -> DEL ID ; .)
    WHILE           reduce using rule 67 (delete_statement -> DEL ID ; .)
    NAMESPACE       reduce using rule 67 (delete_statement -> DEL ID ; .)
    CLASS           reduce using rule 67 (delete_statement -> DEL ID ; .)
    FUNC            reduce using rule 67 (delete_statement -> DEL ID ; .)
    PYTHON_CODE_EXEC reduce using rule 67 (delete_statement -> DEL ID ; .)
    PYTHON_CODE     reduce using rule 67 (delete_statement -> DEL ID ; .)
    IF              reduce using rule 67 (delete_statement -> DEL ID ; .)
    (               reduce using rule 67 (delete_statement -> DEL ID ; .)
    !               reduce using rule 67 (delete_statement -> DEL ID ; .)
    +               reduce using rule 67 (delete_statement -> DEL ID ; .)
    -               reduce using rule 67 (delete_statement -> DEL ID ; .)
    \               reduce using rule 67 (delete_statement -> DEL ID ; .)
    [               reduce using rule 67 (delete_statement -> DEL ID ; .)
    {               reduce using rule 67 (delete_statement -> DEL ID ; .)
    STRING          reduce using rule 67 (delete_statement -> DEL ID ; .)
    FALSE           reduce using rule 67 (delete_statement -> DEL ID ; .)
    TRUE            reduce using rule 67 (delete_statement -> DEL ID ; .)
    FLOAT           reduce using rule 67 (delete_statement -> DEL ID ; .)
    INT             reduce using rule 67 (delete_statement -> DEL ID ; .)
    NULL            reduce using rule 67 (delete_statement -> DEL ID ; .)
    $end            reduce using rule 67 (delete_statement -> DEL ID ; .)
    }               reduce using rule 67 (delete_statement -> DEL ID ; .)


state 172

    (39) for_loop -> FOR expression IN . expression { program }
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 215
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 173

    (45) variable_assignment -> LET get_index = . expression ;
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    get_index                      shift and go to state 70
    expression                     shift and go to state 216
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 174

    (46) variable_assignment -> LET ID = . expression ;
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 217
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 175

    (40) while_loop -> WHILE ( expression . ) { program }
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    )               shift and go to state 218
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 176

    (84) expression -> ( expression ) .
    [               reduce using rule 84 (expression -> ( expression ) .)
    COLON_COLON     reduce using rule 84 (expression -> ( expression ) .)
    (               reduce using rule 84 (expression -> ( expression ) .)
    >               reduce using rule 84 (expression -> ( expression ) .)
    <               reduce using rule 84 (expression -> ( expression ) .)
    &               reduce using rule 84 (expression -> ( expression ) .)
    |               reduce using rule 84 (expression -> ( expression ) .)
    EQ_GREATER      reduce using rule 84 (expression -> ( expression ) .)
    EQ_LESS         reduce using rule 84 (expression -> ( expression ) .)
    NOT_EQEQ        reduce using rule 84 (expression -> ( expression ) .)
    EQEQ            reduce using rule 84 (expression -> ( expression ) .)
    %               reduce using rule 84 (expression -> ( expression ) .)
    *               reduce using rule 84 (expression -> ( expression ) .)
    /               reduce using rule 84 (expression -> ( expression ) .)
    -               reduce using rule 84 (expression -> ( expression ) .)
    +               reduce using rule 84 (expression -> ( expression ) .)
    ,               reduce using rule 84 (expression -> ( expression ) .)
    }               reduce using rule 84 (expression -> ( expression ) .)
    ;               reduce using rule 84 (expression -> ( expression ) .)
    IN              reduce using rule 84 (expression -> ( expression ) .)
    )               reduce using rule 84 (expression -> ( expression ) .)
    ]               reduce using rule 84 (expression -> ( expression ) .)
    :               reduce using rule 84 (expression -> ( expression ) .)
    {               reduce using rule 84 (expression -> ( expression ) .)
    \               reduce using rule 84 (expression -> ( expression ) .)
    SANDBOX         reduce using rule 84 (expression -> ( expression ) .)
    LIMPORT         reduce using rule 84 (expression -> ( expression ) .)
    .               reduce using rule 84 (expression -> ( expression ) .)
    IMPORT          reduce using rule 84 (expression -> ( expression ) .)
    ID              reduce using rule 84 (expression -> ( expression ) .)
    RETURN          reduce using rule 84 (expression -> ( expression ) .)
    DEL             reduce using rule 84 (expression -> ( expression ) .)
    FOR             reduce using rule 84 (expression -> ( expression ) .)
    BREAK           reduce using rule 84 (expression -> ( expression ) .)
    LET             reduce using rule 84 (expression -> ( expression ) .)
    WHILE           reduce using rule 84 (expression -> ( expression ) .)
    NAMESPACE       reduce using rule 84 (expression -> ( expression ) .)
    CLASS           reduce using rule 84 (expression -> ( expression ) .)
    FUNC            reduce using rule 84 (expression -> ( expression ) .)
    PYTHON_CODE_EXEC reduce using rule 84 (expression -> ( expression ) .)
    PYTHON_CODE     reduce using rule 84 (expression -> ( expression ) .)
    IF              reduce using rule 84 (expression -> ( expression ) .)
    !               reduce using rule 84 (expression -> ( expression ) .)
    STRING          reduce using rule 84 (expression -> ( expression ) .)
    FALSE           reduce using rule 84 (expression -> ( expression ) .)
    TRUE            reduce using rule 84 (expression -> ( expression ) .)
    FLOAT           reduce using rule 84 (expression -> ( expression ) .)
    INT             reduce using rule 84 (expression -> ( expression ) .)
    NULL            reduce using rule 84 (expression -> ( expression ) .)
    $end            reduce using rule 84 (expression -> ( expression ) .)


state 177

    (110) _numpy -> ( expression , . )
    (113) items -> expression , . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    )               shift and go to state 220
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 219
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 178

    (108) _numpy -> ( , ) .
    [               reduce using rule 108 (_numpy -> ( , ) .)
    COLON_COLON     reduce using rule 108 (_numpy -> ( , ) .)
    (               reduce using rule 108 (_numpy -> ( , ) .)
    >               reduce using rule 108 (_numpy -> ( , ) .)
    <               reduce using rule 108 (_numpy -> ( , ) .)
    &               reduce using rule 108 (_numpy -> ( , ) .)
    |               reduce using rule 108 (_numpy -> ( , ) .)
    EQ_GREATER      reduce using rule 108 (_numpy -> ( , ) .)
    EQ_LESS         reduce using rule 108 (_numpy -> ( , ) .)
    NOT_EQEQ        reduce using rule 108 (_numpy -> ( , ) .)
    EQEQ            reduce using rule 108 (_numpy -> ( , ) .)
    %               reduce using rule 108 (_numpy -> ( , ) .)
    *               reduce using rule 108 (_numpy -> ( , ) .)
    /               reduce using rule 108 (_numpy -> ( , ) .)
    -               reduce using rule 108 (_numpy -> ( , ) .)
    +               reduce using rule 108 (_numpy -> ( , ) .)
    ,               reduce using rule 108 (_numpy -> ( , ) .)
    }               reduce using rule 108 (_numpy -> ( , ) .)
    ;               reduce using rule 108 (_numpy -> ( , ) .)
    IN              reduce using rule 108 (_numpy -> ( , ) .)
    )               reduce using rule 108 (_numpy -> ( , ) .)
    ]               reduce using rule 108 (_numpy -> ( , ) .)
    :               reduce using rule 108 (_numpy -> ( , ) .)
    {               reduce using rule 108 (_numpy -> ( , ) .)
    \               reduce using rule 108 (_numpy -> ( , ) .)
    SANDBOX         reduce using rule 108 (_numpy -> ( , ) .)
    LIMPORT         reduce using rule 108 (_numpy -> ( , ) .)
    .               reduce using rule 108 (_numpy -> ( , ) .)
    IMPORT          reduce using rule 108 (_numpy -> ( , ) .)
    ID              reduce using rule 108 (_numpy -> ( , ) .)
    RETURN          reduce using rule 108 (_numpy -> ( , ) .)
    DEL             reduce using rule 108 (_numpy -> ( , ) .)
    FOR             reduce using rule 108 (_numpy -> ( , ) .)
    BREAK           reduce using rule 108 (_numpy -> ( , ) .)
    LET             reduce using rule 108 (_numpy -> ( , ) .)
    WHILE           reduce using rule 108 (_numpy -> ( , ) .)
    NAMESPACE       reduce using rule 108 (_numpy -> ( , ) .)
    CLASS           reduce using rule 108 (_numpy -> ( , ) .)
    FUNC            reduce using rule 108 (_numpy -> ( , ) .)
    PYTHON_CODE_EXEC reduce using rule 108 (_numpy -> ( , ) .)
    PYTHON_CODE     reduce using rule 108 (_numpy -> ( , ) .)
    IF              reduce using rule 108 (_numpy -> ( , ) .)
    !               reduce using rule 108 (_numpy -> ( , ) .)
    STRING          reduce using rule 108 (_numpy -> ( , ) .)
    FALSE           reduce using rule 108 (_numpy -> ( , ) .)
    TRUE            reduce using rule 108 (_numpy -> ( , ) .)
    FLOAT           reduce using rule 108 (_numpy -> ( , ) .)
    INT             reduce using rule 108 (_numpy -> ( , ) .)
    NULL            reduce using rule 108 (_numpy -> ( , ) .)
    $end            reduce using rule 108 (_numpy -> ( , ) .)


state 179

    (111) _numpy -> ( items , . )
    (114) items -> items , . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    )               shift and go to state 221
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 222
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 180

    (112) _numpy -> ( items ) .
    [               reduce using rule 112 (_numpy -> ( items ) .)
    COLON_COLON     reduce using rule 112 (_numpy -> ( items ) .)
    (               reduce using rule 112 (_numpy -> ( items ) .)
    >               reduce using rule 112 (_numpy -> ( items ) .)
    <               reduce using rule 112 (_numpy -> ( items ) .)
    &               reduce using rule 112 (_numpy -> ( items ) .)
    |               reduce using rule 112 (_numpy -> ( items ) .)
    EQ_GREATER      reduce using rule 112 (_numpy -> ( items ) .)
    EQ_LESS         reduce using rule 112 (_numpy -> ( items ) .)
    NOT_EQEQ        reduce using rule 112 (_numpy -> ( items ) .)
    EQEQ            reduce using rule 112 (_numpy -> ( items ) .)
    %               reduce using rule 112 (_numpy -> ( items ) .)
    *               reduce using rule 112 (_numpy -> ( items ) .)
    /               reduce using rule 112 (_numpy -> ( items ) .)
    -               reduce using rule 112 (_numpy -> ( items ) .)
    +               reduce using rule 112 (_numpy -> ( items ) .)
    ,               reduce using rule 112 (_numpy -> ( items ) .)
    }               reduce using rule 112 (_numpy -> ( items ) .)
    ;               reduce using rule 112 (_numpy -> ( items ) .)
    IN              reduce using rule 112 (_numpy -> ( items ) .)
    )               reduce using rule 112 (_numpy -> ( items ) .)
    ]               reduce using rule 112 (_numpy -> ( items ) .)
    :               reduce using rule 112 (_numpy -> ( items ) .)
    {               reduce using rule 112 (_numpy -> ( items ) .)
    \               reduce using rule 112 (_numpy -> ( items ) .)
    SANDBOX         reduce using rule 112 (_numpy -> ( items ) .)
    LIMPORT         reduce using rule 112 (_numpy -> ( items ) .)
    .               reduce using rule 112 (_numpy -> ( items ) .)
    IMPORT          reduce using rule 112 (_numpy -> ( items ) .)
    ID              reduce using rule 112 (_numpy -> ( items ) .)
    RETURN          reduce using rule 112 (_numpy -> ( items ) .)
    DEL             reduce using rule 112 (_numpy -> ( items ) .)
    FOR             reduce using rule 112 (_numpy -> ( items ) .)
    BREAK           reduce using rule 112 (_numpy -> ( items ) .)
    LET             reduce using rule 112 (_numpy -> ( items ) .)
    WHILE           reduce using rule 112 (_numpy -> ( items ) .)
    NAMESPACE       reduce using rule 112 (_numpy -> ( items ) .)
    CLASS           reduce using rule 112 (_numpy -> ( items ) .)
    FUNC            reduce using rule 112 (_numpy -> ( items ) .)
    PYTHON_CODE_EXEC reduce using rule 112 (_numpy -> ( items ) .)
    PYTHON_CODE     reduce using rule 112 (_numpy -> ( items ) .)
    IF              reduce using rule 112 (_numpy -> ( items ) .)
    !               reduce using rule 112 (_numpy -> ( items ) .)
    STRING          reduce using rule 112 (_numpy -> ( items ) .)
    FALSE           reduce using rule 112 (_numpy -> ( items ) .)
    TRUE            reduce using rule 112 (_numpy -> ( items ) .)
    FLOAT           reduce using rule 112 (_numpy -> ( items ) .)
    INT             reduce using rule 112 (_numpy -> ( items ) .)
    NULL            reduce using rule 112 (_numpy -> ( items ) .)
    $end            reduce using rule 112 (_numpy -> ( items ) .)


state 181

    (59) conditional -> if_statement else_if_loop else_statement .
    SANDBOX         reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    LIMPORT         reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    .               reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    IMPORT          reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    ID              reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    RETURN          reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    DEL             reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    FOR             reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    BREAK           reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    LET             reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    WHILE           reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    NAMESPACE       reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    CLASS           reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    FUNC            reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    PYTHON_CODE_EXEC reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    PYTHON_CODE     reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    IF              reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    (               reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    !               reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    +               reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    -               reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    \               reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    [               reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    {               reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    STRING          reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    FALSE           reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    TRUE            reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    FLOAT           reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    INT             reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    NULL            reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    $end            reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)
    }               reduce using rule 59 (conditional -> if_statement else_if_loop else_statement .)


state 182

    (64) else_if_loop -> else_if_loop else_if_statement .
    ELSE            reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    SANDBOX         reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    LIMPORT         reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    .               reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    IMPORT          reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    ID              reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    RETURN          reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    DEL             reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    FOR             reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    BREAK           reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    LET             reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    WHILE           reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    NAMESPACE       reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    CLASS           reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    FUNC            reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    PYTHON_CODE_EXEC reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    PYTHON_CODE     reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    IF              reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    (               reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    !               reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    +               reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    -               reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    \               reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    [               reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    {               reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    STRING          reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    FALSE           reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    TRUE            reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    FLOAT           reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    INT             reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    NULL            reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    $end            reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)
    }               reduce using rule 64 (else_if_loop -> else_if_loop else_if_statement .)


state 183

    (66) else_statement -> ELSE { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (127) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               reduce using rule 127 (empty -> .)
    SANDBOX         reduce using rule 127 (empty -> .)
    LIMPORT         reduce using rule 127 (empty -> .)
    .               reduce using rule 127 (empty -> .)
    IMPORT          reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    DEL             reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    BREAK           reduce using rule 127 (empty -> .)
    LET             reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    NAMESPACE       reduce using rule 127 (empty -> .)
    CLASS           reduce using rule 127 (empty -> .)
    FUNC            reduce using rule 127 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 127 (empty -> .)
    PYTHON_CODE     reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    (               reduce using rule 127 (empty -> .)
    \               reduce using rule 127 (empty -> .)
    [               reduce using rule 127 (empty -> .)
    {               reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    NULL            reduce using rule 127 (empty -> .)
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56

    program                        shift and go to state 223
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 184

    (65) else_if_statement -> ELSE IF . ( expression ) { program }
    (               shift and go to state 224


state 185

    (57) class_attribute_assignment -> class_attribute = expression . ;
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ;               shift and go to state 225
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 186

    (37) class_declaration -> NAMESPACE ID { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (127) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               reduce using rule 127 (empty -> .)
    SANDBOX         reduce using rule 127 (empty -> .)
    LIMPORT         reduce using rule 127 (empty -> .)
    .               reduce using rule 127 (empty -> .)
    IMPORT          reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    DEL             reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    BREAK           reduce using rule 127 (empty -> .)
    LET             reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    NAMESPACE       reduce using rule 127 (empty -> .)
    CLASS           reduce using rule 127 (empty -> .)
    FUNC            reduce using rule 127 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 127 (empty -> .)
    PYTHON_CODE     reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    (               reduce using rule 127 (empty -> .)
    \               reduce using rule 127 (empty -> .)
    [               reduce using rule 127 (empty -> .)
    {               reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    NULL            reduce using rule 127 (empty -> .)
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56

    program                        shift and go to state 226
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 187

    (38) class_declaration -> CLASS ID { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (127) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               reduce using rule 127 (empty -> .)
    SANDBOX         reduce using rule 127 (empty -> .)
    LIMPORT         reduce using rule 127 (empty -> .)
    .               reduce using rule 127 (empty -> .)
    IMPORT          reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    DEL             reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    BREAK           reduce using rule 127 (empty -> .)
    LET             reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    NAMESPACE       reduce using rule 127 (empty -> .)
    CLASS           reduce using rule 127 (empty -> .)
    FUNC            reduce using rule 127 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 127 (empty -> .)
    PYTHON_CODE     reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    (               reduce using rule 127 (empty -> .)
    \               reduce using rule 127 (empty -> .)
    [               reduce using rule 127 (empty -> .)
    {               reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    NULL            reduce using rule 127 (empty -> .)
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56

    program                        shift and go to state 227
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 188

    (30) function_declaration -> FUNC ID ( . empty ) { program } TARROW expression
    (33) function_declaration -> FUNC ID ( . function_arguments ) { program } TARROW expression
    (127) empty -> .
    (34) function_arguments -> . kwargs
    (35) function_arguments -> . positional_args , kwargs
    (36) function_arguments -> . positional_args
    (43) kwargs -> . ID = expression
    (44) kwargs -> . kwargs , id = expression
    (41) positional_args -> . expression
    (42) positional_args -> . positional_args , expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    )               reduce using rule 127 (empty -> .)
    ID              shift and go to state 143
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    empty                          shift and go to state 228
    expression                     shift and go to state 68
    function_arguments             shift and go to state 229
    kwargs                         shift and go to state 141
    positional_args                shift and go to state 142
    id                             shift and go to state 49
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 189

    (31) function_declaration -> FUNC ID COLON_COLON . ID ( empty ) { program } TARROW expression
    (32) function_declaration -> FUNC ID COLON_COLON . ID ( function_arguments ) { program } TARROW expression
    ID              shift and go to state 230


state 190

    (106) _list -> [ positional_args , . ]
    (42) positional_args -> positional_args , . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    ]               shift and go to state 231
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 198
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 191

    (107) _list -> [ positional_args ] .
    [               reduce using rule 107 (_list -> [ positional_args ] .)
    COLON_COLON     reduce using rule 107 (_list -> [ positional_args ] .)
    (               reduce using rule 107 (_list -> [ positional_args ] .)
    >               reduce using rule 107 (_list -> [ positional_args ] .)
    <               reduce using rule 107 (_list -> [ positional_args ] .)
    &               reduce using rule 107 (_list -> [ positional_args ] .)
    |               reduce using rule 107 (_list -> [ positional_args ] .)
    EQ_GREATER      reduce using rule 107 (_list -> [ positional_args ] .)
    EQ_LESS         reduce using rule 107 (_list -> [ positional_args ] .)
    NOT_EQEQ        reduce using rule 107 (_list -> [ positional_args ] .)
    EQEQ            reduce using rule 107 (_list -> [ positional_args ] .)
    %               reduce using rule 107 (_list -> [ positional_args ] .)
    *               reduce using rule 107 (_list -> [ positional_args ] .)
    /               reduce using rule 107 (_list -> [ positional_args ] .)
    -               reduce using rule 107 (_list -> [ positional_args ] .)
    +               reduce using rule 107 (_list -> [ positional_args ] .)
    ,               reduce using rule 107 (_list -> [ positional_args ] .)
    }               reduce using rule 107 (_list -> [ positional_args ] .)
    ;               reduce using rule 107 (_list -> [ positional_args ] .)
    IN              reduce using rule 107 (_list -> [ positional_args ] .)
    )               reduce using rule 107 (_list -> [ positional_args ] .)
    ]               reduce using rule 107 (_list -> [ positional_args ] .)
    :               reduce using rule 107 (_list -> [ positional_args ] .)
    {               reduce using rule 107 (_list -> [ positional_args ] .)
    \               reduce using rule 107 (_list -> [ positional_args ] .)
    SANDBOX         reduce using rule 107 (_list -> [ positional_args ] .)
    LIMPORT         reduce using rule 107 (_list -> [ positional_args ] .)
    .               reduce using rule 107 (_list -> [ positional_args ] .)
    IMPORT          reduce using rule 107 (_list -> [ positional_args ] .)
    ID              reduce using rule 107 (_list -> [ positional_args ] .)
    RETURN          reduce using rule 107 (_list -> [ positional_args ] .)
    DEL             reduce using rule 107 (_list -> [ positional_args ] .)
    FOR             reduce using rule 107 (_list -> [ positional_args ] .)
    BREAK           reduce using rule 107 (_list -> [ positional_args ] .)
    LET             reduce using rule 107 (_list -> [ positional_args ] .)
    WHILE           reduce using rule 107 (_list -> [ positional_args ] .)
    NAMESPACE       reduce using rule 107 (_list -> [ positional_args ] .)
    CLASS           reduce using rule 107 (_list -> [ positional_args ] .)
    FUNC            reduce using rule 107 (_list -> [ positional_args ] .)
    PYTHON_CODE_EXEC reduce using rule 107 (_list -> [ positional_args ] .)
    PYTHON_CODE     reduce using rule 107 (_list -> [ positional_args ] .)
    IF              reduce using rule 107 (_list -> [ positional_args ] .)
    !               reduce using rule 107 (_list -> [ positional_args ] .)
    STRING          reduce using rule 107 (_list -> [ positional_args ] .)
    FALSE           reduce using rule 107 (_list -> [ positional_args ] .)
    TRUE            reduce using rule 107 (_list -> [ positional_args ] .)
    FLOAT           reduce using rule 107 (_list -> [ positional_args ] .)
    INT             reduce using rule 107 (_list -> [ positional_args ] .)
    NULL            reduce using rule 107 (_list -> [ positional_args ] .)
    $end            reduce using rule 107 (_list -> [ positional_args ] .)


state 192

    (62) if_statement -> IF ( expression . ) { program }
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    )               shift and go to state 232
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 193

    (122) assoc_array -> \ assoc_array_items \ .
    [               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    COLON_COLON     reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    (               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    >               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    <               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    &               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    |               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    EQ_GREATER      reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    EQ_LESS         reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    NOT_EQEQ        reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    EQEQ            reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    %               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    *               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    /               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    -               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    +               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    ,               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    }               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    ;               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    IN              reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    )               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    ]               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    :               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    {               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    \               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    SANDBOX         reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    LIMPORT         reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    .               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    IMPORT          reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    ID              reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    RETURN          reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    DEL             reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    FOR             reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    BREAK           reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    LET             reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    WHILE           reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    NAMESPACE       reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    CLASS           reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    FUNC            reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    PYTHON_CODE_EXEC reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    PYTHON_CODE     reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    IF              reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    !               reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    STRING          reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    FALSE           reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    TRUE            reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    FLOAT           reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    INT             reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    NULL            reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)
    $end            reduce using rule 122 (assoc_array -> \ assoc_array_items \ .)


state 194

    (124) assoc_array_items -> assoc_array_items , . expression : expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 233
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 195

    (123) assoc_array_items -> expression : . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 234
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 196

    (19) sandbox -> SANDBOX { program } .
    SANDBOX         reduce using rule 19 (sandbox -> SANDBOX { program } .)
    LIMPORT         reduce using rule 19 (sandbox -> SANDBOX { program } .)
    .               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    IMPORT          reduce using rule 19 (sandbox -> SANDBOX { program } .)
    ID              reduce using rule 19 (sandbox -> SANDBOX { program } .)
    RETURN          reduce using rule 19 (sandbox -> SANDBOX { program } .)
    DEL             reduce using rule 19 (sandbox -> SANDBOX { program } .)
    FOR             reduce using rule 19 (sandbox -> SANDBOX { program } .)
    BREAK           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    LET             reduce using rule 19 (sandbox -> SANDBOX { program } .)
    WHILE           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    NAMESPACE       reduce using rule 19 (sandbox -> SANDBOX { program } .)
    CLASS           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    FUNC            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    PYTHON_CODE_EXEC reduce using rule 19 (sandbox -> SANDBOX { program } .)
    PYTHON_CODE     reduce using rule 19 (sandbox -> SANDBOX { program } .)
    IF              reduce using rule 19 (sandbox -> SANDBOX { program } .)
    (               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    !               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    +               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    -               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    \               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    [               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    {               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    STRING          reduce using rule 19 (sandbox -> SANDBOX { program } .)
    FALSE           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    TRUE            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    FLOAT           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    INT             reduce using rule 19 (sandbox -> SANDBOX { program } .)
    NULL            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    $end            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    }               reduce using rule 19 (sandbox -> SANDBOX { program } .)


state 197

    (104) _tuple -> { positional_args , } .
    [               reduce using rule 104 (_tuple -> { positional_args , } .)
    COLON_COLON     reduce using rule 104 (_tuple -> { positional_args , } .)
    (               reduce using rule 104 (_tuple -> { positional_args , } .)
    >               reduce using rule 104 (_tuple -> { positional_args , } .)
    <               reduce using rule 104 (_tuple -> { positional_args , } .)
    &               reduce using rule 104 (_tuple -> { positional_args , } .)
    |               reduce using rule 104 (_tuple -> { positional_args , } .)
    EQ_GREATER      reduce using rule 104 (_tuple -> { positional_args , } .)
    EQ_LESS         reduce using rule 104 (_tuple -> { positional_args , } .)
    NOT_EQEQ        reduce using rule 104 (_tuple -> { positional_args , } .)
    EQEQ            reduce using rule 104 (_tuple -> { positional_args , } .)
    %               reduce using rule 104 (_tuple -> { positional_args , } .)
    *               reduce using rule 104 (_tuple -> { positional_args , } .)
    /               reduce using rule 104 (_tuple -> { positional_args , } .)
    -               reduce using rule 104 (_tuple -> { positional_args , } .)
    +               reduce using rule 104 (_tuple -> { positional_args , } .)
    ,               reduce using rule 104 (_tuple -> { positional_args , } .)
    }               reduce using rule 104 (_tuple -> { positional_args , } .)
    ;               reduce using rule 104 (_tuple -> { positional_args , } .)
    IN              reduce using rule 104 (_tuple -> { positional_args , } .)
    )               reduce using rule 104 (_tuple -> { positional_args , } .)
    ]               reduce using rule 104 (_tuple -> { positional_args , } .)
    :               reduce using rule 104 (_tuple -> { positional_args , } .)
    {               reduce using rule 104 (_tuple -> { positional_args , } .)
    \               reduce using rule 104 (_tuple -> { positional_args , } .)
    SANDBOX         reduce using rule 104 (_tuple -> { positional_args , } .)
    LIMPORT         reduce using rule 104 (_tuple -> { positional_args , } .)
    .               reduce using rule 104 (_tuple -> { positional_args , } .)
    IMPORT          reduce using rule 104 (_tuple -> { positional_args , } .)
    ID              reduce using rule 104 (_tuple -> { positional_args , } .)
    RETURN          reduce using rule 104 (_tuple -> { positional_args , } .)
    DEL             reduce using rule 104 (_tuple -> { positional_args , } .)
    FOR             reduce using rule 104 (_tuple -> { positional_args , } .)
    BREAK           reduce using rule 104 (_tuple -> { positional_args , } .)
    LET             reduce using rule 104 (_tuple -> { positional_args , } .)
    WHILE           reduce using rule 104 (_tuple -> { positional_args , } .)
    NAMESPACE       reduce using rule 104 (_tuple -> { positional_args , } .)
    CLASS           reduce using rule 104 (_tuple -> { positional_args , } .)
    FUNC            reduce using rule 104 (_tuple -> { positional_args , } .)
    PYTHON_CODE_EXEC reduce using rule 104 (_tuple -> { positional_args , } .)
    PYTHON_CODE     reduce using rule 104 (_tuple -> { positional_args , } .)
    IF              reduce using rule 104 (_tuple -> { positional_args , } .)
    !               reduce using rule 104 (_tuple -> { positional_args , } .)
    STRING          reduce using rule 104 (_tuple -> { positional_args , } .)
    FALSE           reduce using rule 104 (_tuple -> { positional_args , } .)
    TRUE            reduce using rule 104 (_tuple -> { positional_args , } .)
    FLOAT           reduce using rule 104 (_tuple -> { positional_args , } .)
    INT             reduce using rule 104 (_tuple -> { positional_args , } .)
    NULL            reduce using rule 104 (_tuple -> { positional_args , } .)
    $end            reduce using rule 104 (_tuple -> { positional_args , } .)


state 198

    (42) positional_args -> positional_args , expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ,               reduce using rule 42 (positional_args -> positional_args , expression .)
    }               reduce using rule 42 (positional_args -> positional_args , expression .)
    ]               reduce using rule 42 (positional_args -> positional_args , expression .)
    )               reduce using rule 42 (positional_args -> positional_args , expression .)
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 199

    (103) get_index -> expression [ expression ] .
    EQ_DIV          reduce using rule 103 (get_index -> expression [ expression ] .)
    EQ_MOD          reduce using rule 103 (get_index -> expression [ expression ] .)
    EQ_MUL          reduce using rule 103 (get_index -> expression [ expression ] .)
    EQ_SUB          reduce using rule 103 (get_index -> expression [ expression ] .)
    EQ_ADD          reduce using rule 103 (get_index -> expression [ expression ] .)
    [               reduce using rule 103 (get_index -> expression [ expression ] .)
    COLON_COLON     reduce using rule 103 (get_index -> expression [ expression ] .)
    (               reduce using rule 103 (get_index -> expression [ expression ] .)
    >               reduce using rule 103 (get_index -> expression [ expression ] .)
    <               reduce using rule 103 (get_index -> expression [ expression ] .)
    &               reduce using rule 103 (get_index -> expression [ expression ] .)
    |               reduce using rule 103 (get_index -> expression [ expression ] .)
    EQ_GREATER      reduce using rule 103 (get_index -> expression [ expression ] .)
    EQ_LESS         reduce using rule 103 (get_index -> expression [ expression ] .)
    NOT_EQEQ        reduce using rule 103 (get_index -> expression [ expression ] .)
    EQEQ            reduce using rule 103 (get_index -> expression [ expression ] .)
    %               reduce using rule 103 (get_index -> expression [ expression ] .)
    *               reduce using rule 103 (get_index -> expression [ expression ] .)
    /               reduce using rule 103 (get_index -> expression [ expression ] .)
    -               reduce using rule 103 (get_index -> expression [ expression ] .)
    +               reduce using rule 103 (get_index -> expression [ expression ] .)
    ,               reduce using rule 103 (get_index -> expression [ expression ] .)
    }               reduce using rule 103 (get_index -> expression [ expression ] .)
    ;               reduce using rule 103 (get_index -> expression [ expression ] .)
    IN              reduce using rule 103 (get_index -> expression [ expression ] .)
    =               reduce using rule 103 (get_index -> expression [ expression ] .)
    )               reduce using rule 103 (get_index -> expression [ expression ] .)
    ]               reduce using rule 103 (get_index -> expression [ expression ] .)
    :               reduce using rule 103 (get_index -> expression [ expression ] .)
    {               reduce using rule 103 (get_index -> expression [ expression ] .)
    \               reduce using rule 103 (get_index -> expression [ expression ] .)
    SANDBOX         reduce using rule 103 (get_index -> expression [ expression ] .)
    LIMPORT         reduce using rule 103 (get_index -> expression [ expression ] .)
    .               reduce using rule 103 (get_index -> expression [ expression ] .)
    IMPORT          reduce using rule 103 (get_index -> expression [ expression ] .)
    ID              reduce using rule 103 (get_index -> expression [ expression ] .)
    RETURN          reduce using rule 103 (get_index -> expression [ expression ] .)
    DEL             reduce using rule 103 (get_index -> expression [ expression ] .)
    FOR             reduce using rule 103 (get_index -> expression [ expression ] .)
    BREAK           reduce using rule 103 (get_index -> expression [ expression ] .)
    LET             reduce using rule 103 (get_index -> expression [ expression ] .)
    WHILE           reduce using rule 103 (get_index -> expression [ expression ] .)
    NAMESPACE       reduce using rule 103 (get_index -> expression [ expression ] .)
    CLASS           reduce using rule 103 (get_index -> expression [ expression ] .)
    FUNC            reduce using rule 103 (get_index -> expression [ expression ] .)
    PYTHON_CODE_EXEC reduce using rule 103 (get_index -> expression [ expression ] .)
    PYTHON_CODE     reduce using rule 103 (get_index -> expression [ expression ] .)
    IF              reduce using rule 103 (get_index -> expression [ expression ] .)
    !               reduce using rule 103 (get_index -> expression [ expression ] .)
    STRING          reduce using rule 103 (get_index -> expression [ expression ] .)
    FALSE           reduce using rule 103 (get_index -> expression [ expression ] .)
    TRUE            reduce using rule 103 (get_index -> expression [ expression ] .)
    FLOAT           reduce using rule 103 (get_index -> expression [ expression ] .)
    INT             reduce using rule 103 (get_index -> expression [ expression ] .)
    NULL            reduce using rule 103 (get_index -> expression [ expression ] .)
    $end            reduce using rule 103 (get_index -> expression [ expression ] .)


state 200

    (25) function_call -> expression ( empty ) . FARROW { program }
    (26) function_call -> expression ( empty ) .
    FARROW          shift and go to state 235
    ;               reduce using rule 26 (function_call -> expression ( empty ) .)
    [               reduce using rule 26 (function_call -> expression ( empty ) .)
    COLON_COLON     reduce using rule 26 (function_call -> expression ( empty ) .)
    (               reduce using rule 26 (function_call -> expression ( empty ) .)
    >               reduce using rule 26 (function_call -> expression ( empty ) .)
    <               reduce using rule 26 (function_call -> expression ( empty ) .)
    &               reduce using rule 26 (function_call -> expression ( empty ) .)
    |               reduce using rule 26 (function_call -> expression ( empty ) .)
    EQ_GREATER      reduce using rule 26 (function_call -> expression ( empty ) .)
    EQ_LESS         reduce using rule 26 (function_call -> expression ( empty ) .)
    NOT_EQEQ        reduce using rule 26 (function_call -> expression ( empty ) .)
    EQEQ            reduce using rule 26 (function_call -> expression ( empty ) .)
    %               reduce using rule 26 (function_call -> expression ( empty ) .)
    *               reduce using rule 26 (function_call -> expression ( empty ) .)
    /               reduce using rule 26 (function_call -> expression ( empty ) .)
    -               reduce using rule 26 (function_call -> expression ( empty ) .)
    +               reduce using rule 26 (function_call -> expression ( empty ) .)
    ,               reduce using rule 26 (function_call -> expression ( empty ) .)
    }               reduce using rule 26 (function_call -> expression ( empty ) .)
    IN              reduce using rule 26 (function_call -> expression ( empty ) .)
    )               reduce using rule 26 (function_call -> expression ( empty ) .)
    ]               reduce using rule 26 (function_call -> expression ( empty ) .)
    :               reduce using rule 26 (function_call -> expression ( empty ) .)
    {               reduce using rule 26 (function_call -> expression ( empty ) .)
    \               reduce using rule 26 (function_call -> expression ( empty ) .)
    SANDBOX         reduce using rule 26 (function_call -> expression ( empty ) .)
    LIMPORT         reduce using rule 26 (function_call -> expression ( empty ) .)
    .               reduce using rule 26 (function_call -> expression ( empty ) .)
    IMPORT          reduce using rule 26 (function_call -> expression ( empty ) .)
    ID              reduce using rule 26 (function_call -> expression ( empty ) .)
    RETURN          reduce using rule 26 (function_call -> expression ( empty ) .)
    DEL             reduce using rule 26 (function_call -> expression ( empty ) .)
    FOR             reduce using rule 26 (function_call -> expression ( empty ) .)
    BREAK           reduce using rule 26 (function_call -> expression ( empty ) .)
    LET             reduce using rule 26 (function_call -> expression ( empty ) .)
    WHILE           reduce using rule 26 (function_call -> expression ( empty ) .)
    NAMESPACE       reduce using rule 26 (function_call -> expression ( empty ) .)
    CLASS           reduce using rule 26 (function_call -> expression ( empty ) .)
    FUNC            reduce using rule 26 (function_call -> expression ( empty ) .)
    PYTHON_CODE_EXEC reduce using rule 26 (function_call -> expression ( empty ) .)
    PYTHON_CODE     reduce using rule 26 (function_call -> expression ( empty ) .)
    IF              reduce using rule 26 (function_call -> expression ( empty ) .)
    !               reduce using rule 26 (function_call -> expression ( empty ) .)
    STRING          reduce using rule 26 (function_call -> expression ( empty ) .)
    FALSE           reduce using rule 26 (function_call -> expression ( empty ) .)
    TRUE            reduce using rule 26 (function_call -> expression ( empty ) .)
    FLOAT           reduce using rule 26 (function_call -> expression ( empty ) .)
    INT             reduce using rule 26 (function_call -> expression ( empty ) .)
    NULL            reduce using rule 26 (function_call -> expression ( empty ) .)
    $end            reduce using rule 26 (function_call -> expression ( empty ) .)


state 201

    (27) function_call -> expression ( function_arguments ) . FARROW { program }
    (28) function_call -> expression ( function_arguments ) .
    FARROW          shift and go to state 236
    ;               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    [               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    COLON_COLON     reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    (               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    >               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    <               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    &               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    |               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    EQ_GREATER      reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    EQ_LESS         reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    NOT_EQEQ        reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    EQEQ            reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    %               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    *               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    /               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    -               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    +               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    ,               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    }               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    IN              reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    )               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    ]               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    :               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    {               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    \               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    SANDBOX         reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    LIMPORT         reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    .               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    IMPORT          reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    ID              reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    RETURN          reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    DEL             reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    FOR             reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    BREAK           reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    LET             reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    WHILE           reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    NAMESPACE       reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    CLASS           reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    FUNC            reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    PYTHON_CODE_EXEC reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    PYTHON_CODE     reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    IF              reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    !               reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    STRING          reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    FALSE           reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    TRUE            reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    FLOAT           reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    INT             reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    NULL            reduce using rule 28 (function_call -> expression ( function_arguments ) .)
    $end            reduce using rule 28 (function_call -> expression ( function_arguments ) .)


state 202

    (44) kwargs -> kwargs , . id = expression
    (121) id -> . ID
    ID              shift and go to state 238

    id                             shift and go to state 237

state 203

    (35) function_arguments -> positional_args , . kwargs
    (42) positional_args -> positional_args , . expression
    (43) kwargs -> . ID = expression
    (44) kwargs -> . kwargs , id = expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    ID              shift and go to state 143
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    kwargs                         shift and go to state 239
    expression                     shift and go to state 198
    id                             shift and go to state 49
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 204

    (43) kwargs -> ID = . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 240
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 205

    (47) variable_operation -> get_index EQ_DIV expression ; .
    SANDBOX         reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    LIMPORT         reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    .               reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    IMPORT          reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    ID              reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    RETURN          reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    DEL             reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    FOR             reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    BREAK           reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    LET             reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    WHILE           reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    NAMESPACE       reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    CLASS           reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    FUNC            reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    PYTHON_CODE_EXEC reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    PYTHON_CODE     reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    IF              reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    (               reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    !               reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    +               reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    -               reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    \               reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    [               reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    {               reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    STRING          reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    FALSE           reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    TRUE            reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    FLOAT           reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    INT             reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    NULL            reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    $end            reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)
    }               reduce using rule 47 (variable_operation -> get_index EQ_DIV expression ; .)


state 206

    (49) variable_operation -> get_index EQ_MOD expression ; .
    SANDBOX         reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    LIMPORT         reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    .               reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    IMPORT          reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    ID              reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    RETURN          reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    DEL             reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    FOR             reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    BREAK           reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    LET             reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    WHILE           reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    NAMESPACE       reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    CLASS           reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    FUNC            reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    PYTHON_CODE     reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    IF              reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    (               reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    !               reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    +               reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    -               reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    \               reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    [               reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    {               reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    STRING          reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    FALSE           reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    TRUE            reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    FLOAT           reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    INT             reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    NULL            reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    $end            reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)
    }               reduce using rule 49 (variable_operation -> get_index EQ_MOD expression ; .)


state 207

    (51) variable_operation -> get_index EQ_MUL expression ; .
    SANDBOX         reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    LIMPORT         reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    .               reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    IMPORT          reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    ID              reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    RETURN          reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    DEL             reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    FOR             reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    BREAK           reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    LET             reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    WHILE           reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    NAMESPACE       reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    CLASS           reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    FUNC            reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    PYTHON_CODE_EXEC reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    PYTHON_CODE     reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    IF              reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    (               reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    !               reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    +               reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    -               reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    \               reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    [               reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    {               reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    STRING          reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    FALSE           reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    TRUE            reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    FLOAT           reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    INT             reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    NULL            reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    $end            reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)
    }               reduce using rule 51 (variable_operation -> get_index EQ_MUL expression ; .)


state 208

    (53) variable_operation -> get_index EQ_SUB expression ; .
    SANDBOX         reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    LIMPORT         reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    .               reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    IMPORT          reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    ID              reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    RETURN          reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    DEL             reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    FOR             reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    BREAK           reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    LET             reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    WHILE           reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    NAMESPACE       reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    CLASS           reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    FUNC            reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    PYTHON_CODE_EXEC reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    PYTHON_CODE     reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    IF              reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    (               reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    !               reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    +               reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    -               reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    \               reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    [               reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    {               reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    STRING          reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    FALSE           reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    TRUE            reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    FLOAT           reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    INT             reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    NULL            reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    $end            reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)
    }               reduce using rule 53 (variable_operation -> get_index EQ_SUB expression ; .)


state 209

    (55) variable_operation -> get_index EQ_ADD expression ; .
    SANDBOX         reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    LIMPORT         reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    .               reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    IMPORT          reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    ID              reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    RETURN          reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    DEL             reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    FOR             reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    BREAK           reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    LET             reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    WHILE           reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    NAMESPACE       reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    CLASS           reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    FUNC            reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    PYTHON_CODE     reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    IF              reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    (               reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    !               reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    +               reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    -               reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    \               reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    [               reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    {               reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    STRING          reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    FALSE           reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    TRUE            reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    FLOAT           reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    INT             reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    NULL            reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    $end            reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)
    }               reduce using rule 55 (variable_operation -> get_index EQ_ADD expression ; .)


state 210

    (48) variable_operation -> ID EQ_DIV expression ; .
    SANDBOX         reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    LIMPORT         reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    .               reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    IMPORT          reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    ID              reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    RETURN          reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    DEL             reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    FOR             reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    BREAK           reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    LET             reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    WHILE           reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    NAMESPACE       reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    CLASS           reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    FUNC            reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    PYTHON_CODE_EXEC reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    PYTHON_CODE     reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    IF              reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    (               reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    !               reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    +               reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    -               reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    \               reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    [               reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    {               reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    STRING          reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    FALSE           reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    TRUE            reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    FLOAT           reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    INT             reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    NULL            reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    $end            reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)
    }               reduce using rule 48 (variable_operation -> ID EQ_DIV expression ; .)


state 211

    (50) variable_operation -> ID EQ_MOD expression ; .
    SANDBOX         reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    LIMPORT         reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    .               reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    IMPORT          reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    ID              reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    RETURN          reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    DEL             reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    FOR             reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    BREAK           reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    LET             reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    WHILE           reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    NAMESPACE       reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    CLASS           reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    FUNC            reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    PYTHON_CODE     reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    IF              reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    (               reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    !               reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    +               reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    -               reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    \               reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    [               reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    {               reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    STRING          reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    FALSE           reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    TRUE            reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    FLOAT           reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    INT             reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    NULL            reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    $end            reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)
    }               reduce using rule 50 (variable_operation -> ID EQ_MOD expression ; .)


state 212

    (52) variable_operation -> ID EQ_MUL expression ; .
    SANDBOX         reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    LIMPORT         reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    .               reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    IMPORT          reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    ID              reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    RETURN          reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    DEL             reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    FOR             reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    BREAK           reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    LET             reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    WHILE           reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    NAMESPACE       reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    CLASS           reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    FUNC            reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    PYTHON_CODE_EXEC reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    PYTHON_CODE     reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    IF              reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    (               reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    !               reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    +               reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    -               reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    \               reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    [               reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    {               reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    STRING          reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    FALSE           reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    TRUE            reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    FLOAT           reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    INT             reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    NULL            reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    $end            reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)
    }               reduce using rule 52 (variable_operation -> ID EQ_MUL expression ; .)


state 213

    (54) variable_operation -> ID EQ_SUB expression ; .
    SANDBOX         reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    LIMPORT         reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    .               reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    IMPORT          reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    ID              reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    RETURN          reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    DEL             reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    FOR             reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    BREAK           reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    LET             reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    WHILE           reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    NAMESPACE       reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    CLASS           reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    FUNC            reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    PYTHON_CODE_EXEC reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    PYTHON_CODE     reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    IF              reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    (               reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    !               reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    +               reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    -               reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    \               reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    [               reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    {               reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    STRING          reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    FALSE           reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    TRUE            reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    FLOAT           reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    INT             reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    NULL            reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    $end            reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)
    }               reduce using rule 54 (variable_operation -> ID EQ_SUB expression ; .)


state 214

    (56) variable_operation -> ID EQ_ADD expression ; .
    SANDBOX         reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    LIMPORT         reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    .               reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    IMPORT          reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    ID              reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    RETURN          reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    DEL             reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    FOR             reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    BREAK           reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    LET             reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    WHILE           reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    NAMESPACE       reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    CLASS           reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    FUNC            reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    PYTHON_CODE     reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    IF              reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    (               reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    !               reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    +               reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    -               reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    \               reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    [               reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    {               reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    STRING          reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    FALSE           reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    TRUE            reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    FLOAT           reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    INT             reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    NULL            reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    $end            reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)
    }               reduce using rule 56 (variable_operation -> ID EQ_ADD expression ; .)


state 215

    (39) for_loop -> FOR expression IN expression . { program }
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    {               shift and go to state 241
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 216

    (45) variable_assignment -> LET get_index = expression . ;
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ;               shift and go to state 242
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 217

    (46) variable_assignment -> LET ID = expression . ;
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ;               shift and go to state 243
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 218

    (40) while_loop -> WHILE ( expression ) . { program }
    {               shift and go to state 244


state 219

    (113) items -> expression , expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ,               reduce using rule 113 (items -> expression , expression .)
    )               reduce using rule 113 (items -> expression , expression .)
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 220

    (110) _numpy -> ( expression , ) .
    [               reduce using rule 110 (_numpy -> ( expression , ) .)
    COLON_COLON     reduce using rule 110 (_numpy -> ( expression , ) .)
    (               reduce using rule 110 (_numpy -> ( expression , ) .)
    >               reduce using rule 110 (_numpy -> ( expression , ) .)
    <               reduce using rule 110 (_numpy -> ( expression , ) .)
    &               reduce using rule 110 (_numpy -> ( expression , ) .)
    |               reduce using rule 110 (_numpy -> ( expression , ) .)
    EQ_GREATER      reduce using rule 110 (_numpy -> ( expression , ) .)
    EQ_LESS         reduce using rule 110 (_numpy -> ( expression , ) .)
    NOT_EQEQ        reduce using rule 110 (_numpy -> ( expression , ) .)
    EQEQ            reduce using rule 110 (_numpy -> ( expression , ) .)
    %               reduce using rule 110 (_numpy -> ( expression , ) .)
    *               reduce using rule 110 (_numpy -> ( expression , ) .)
    /               reduce using rule 110 (_numpy -> ( expression , ) .)
    -               reduce using rule 110 (_numpy -> ( expression , ) .)
    +               reduce using rule 110 (_numpy -> ( expression , ) .)
    ,               reduce using rule 110 (_numpy -> ( expression , ) .)
    }               reduce using rule 110 (_numpy -> ( expression , ) .)
    ;               reduce using rule 110 (_numpy -> ( expression , ) .)
    IN              reduce using rule 110 (_numpy -> ( expression , ) .)
    )               reduce using rule 110 (_numpy -> ( expression , ) .)
    ]               reduce using rule 110 (_numpy -> ( expression , ) .)
    :               reduce using rule 110 (_numpy -> ( expression , ) .)
    {               reduce using rule 110 (_numpy -> ( expression , ) .)
    \               reduce using rule 110 (_numpy -> ( expression , ) .)
    SANDBOX         reduce using rule 110 (_numpy -> ( expression , ) .)
    LIMPORT         reduce using rule 110 (_numpy -> ( expression , ) .)
    .               reduce using rule 110 (_numpy -> ( expression , ) .)
    IMPORT          reduce using rule 110 (_numpy -> ( expression , ) .)
    ID              reduce using rule 110 (_numpy -> ( expression , ) .)
    RETURN          reduce using rule 110 (_numpy -> ( expression , ) .)
    DEL             reduce using rule 110 (_numpy -> ( expression , ) .)
    FOR             reduce using rule 110 (_numpy -> ( expression , ) .)
    BREAK           reduce using rule 110 (_numpy -> ( expression , ) .)
    LET             reduce using rule 110 (_numpy -> ( expression , ) .)
    WHILE           reduce using rule 110 (_numpy -> ( expression , ) .)
    NAMESPACE       reduce using rule 110 (_numpy -> ( expression , ) .)
    CLASS           reduce using rule 110 (_numpy -> ( expression , ) .)
    FUNC            reduce using rule 110 (_numpy -> ( expression , ) .)
    PYTHON_CODE_EXEC reduce using rule 110 (_numpy -> ( expression , ) .)
    PYTHON_CODE     reduce using rule 110 (_numpy -> ( expression , ) .)
    IF              reduce using rule 110 (_numpy -> ( expression , ) .)
    !               reduce using rule 110 (_numpy -> ( expression , ) .)
    STRING          reduce using rule 110 (_numpy -> ( expression , ) .)
    FALSE           reduce using rule 110 (_numpy -> ( expression , ) .)
    TRUE            reduce using rule 110 (_numpy -> ( expression , ) .)
    FLOAT           reduce using rule 110 (_numpy -> ( expression , ) .)
    INT             reduce using rule 110 (_numpy -> ( expression , ) .)
    NULL            reduce using rule 110 (_numpy -> ( expression , ) .)
    $end            reduce using rule 110 (_numpy -> ( expression , ) .)


state 221

    (111) _numpy -> ( items , ) .
    [               reduce using rule 111 (_numpy -> ( items , ) .)
    COLON_COLON     reduce using rule 111 (_numpy -> ( items , ) .)
    (               reduce using rule 111 (_numpy -> ( items , ) .)
    >               reduce using rule 111 (_numpy -> ( items , ) .)
    <               reduce using rule 111 (_numpy -> ( items , ) .)
    &               reduce using rule 111 (_numpy -> ( items , ) .)
    |               reduce using rule 111 (_numpy -> ( items , ) .)
    EQ_GREATER      reduce using rule 111 (_numpy -> ( items , ) .)
    EQ_LESS         reduce using rule 111 (_numpy -> ( items , ) .)
    NOT_EQEQ        reduce using rule 111 (_numpy -> ( items , ) .)
    EQEQ            reduce using rule 111 (_numpy -> ( items , ) .)
    %               reduce using rule 111 (_numpy -> ( items , ) .)
    *               reduce using rule 111 (_numpy -> ( items , ) .)
    /               reduce using rule 111 (_numpy -> ( items , ) .)
    -               reduce using rule 111 (_numpy -> ( items , ) .)
    +               reduce using rule 111 (_numpy -> ( items , ) .)
    ,               reduce using rule 111 (_numpy -> ( items , ) .)
    }               reduce using rule 111 (_numpy -> ( items , ) .)
    ;               reduce using rule 111 (_numpy -> ( items , ) .)
    IN              reduce using rule 111 (_numpy -> ( items , ) .)
    )               reduce using rule 111 (_numpy -> ( items , ) .)
    ]               reduce using rule 111 (_numpy -> ( items , ) .)
    :               reduce using rule 111 (_numpy -> ( items , ) .)
    {               reduce using rule 111 (_numpy -> ( items , ) .)
    \               reduce using rule 111 (_numpy -> ( items , ) .)
    SANDBOX         reduce using rule 111 (_numpy -> ( items , ) .)
    LIMPORT         reduce using rule 111 (_numpy -> ( items , ) .)
    .               reduce using rule 111 (_numpy -> ( items , ) .)
    IMPORT          reduce using rule 111 (_numpy -> ( items , ) .)
    ID              reduce using rule 111 (_numpy -> ( items , ) .)
    RETURN          reduce using rule 111 (_numpy -> ( items , ) .)
    DEL             reduce using rule 111 (_numpy -> ( items , ) .)
    FOR             reduce using rule 111 (_numpy -> ( items , ) .)
    BREAK           reduce using rule 111 (_numpy -> ( items , ) .)
    LET             reduce using rule 111 (_numpy -> ( items , ) .)
    WHILE           reduce using rule 111 (_numpy -> ( items , ) .)
    NAMESPACE       reduce using rule 111 (_numpy -> ( items , ) .)
    CLASS           reduce using rule 111 (_numpy -> ( items , ) .)
    FUNC            reduce using rule 111 (_numpy -> ( items , ) .)
    PYTHON_CODE_EXEC reduce using rule 111 (_numpy -> ( items , ) .)
    PYTHON_CODE     reduce using rule 111 (_numpy -> ( items , ) .)
    IF              reduce using rule 111 (_numpy -> ( items , ) .)
    !               reduce using rule 111 (_numpy -> ( items , ) .)
    STRING          reduce using rule 111 (_numpy -> ( items , ) .)
    FALSE           reduce using rule 111 (_numpy -> ( items , ) .)
    TRUE            reduce using rule 111 (_numpy -> ( items , ) .)
    FLOAT           reduce using rule 111 (_numpy -> ( items , ) .)
    INT             reduce using rule 111 (_numpy -> ( items , ) .)
    NULL            reduce using rule 111 (_numpy -> ( items , ) .)
    $end            reduce using rule 111 (_numpy -> ( items , ) .)


state 222

    (114) items -> items , expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ,               reduce using rule 114 (items -> items , expression .)
    )               reduce using rule 114 (items -> items , expression .)
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 223

    (66) else_statement -> ELSE { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               shift and go to state 245
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 31
    WHILE           shift and go to state 33
    NAMESPACE       shift and go to state 38
    CLASS           shift and go to state 39
    FUNC            shift and go to state 40
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43
    IF              shift and go to state 44
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64

    statement                      shift and go to state 65
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 224

    (65) else_if_statement -> ELSE IF ( . expression ) { program }
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 246
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 225

    (57) class_attribute_assignment -> class_attribute = expression ; .
    SANDBOX         reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    LIMPORT         reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    .               reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    IMPORT          reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    ID              reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    RETURN          reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    DEL             reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    FOR             reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    BREAK           reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    LET             reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    WHILE           reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    NAMESPACE       reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    CLASS           reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    FUNC            reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    PYTHON_CODE     reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    IF              reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    (               reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    !               reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    +               reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    -               reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    \               reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    [               reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    {               reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    STRING          reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    FALSE           reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    TRUE            reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    FLOAT           reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    INT             reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    NULL            reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    $end            reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)
    }               reduce using rule 57 (class_attribute_assignment -> class_attribute = expression ; .)


state 226

    (37) class_declaration -> NAMESPACE ID { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               shift and go to state 247
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 31
    WHILE           shift and go to state 33
    NAMESPACE       shift and go to state 38
    CLASS           shift and go to state 39
    FUNC            shift and go to state 40
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43
    IF              shift and go to state 44
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64

    statement                      shift and go to state 65
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 227

    (38) class_declaration -> CLASS ID { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               shift and go to state 248
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 31
    WHILE           shift and go to state 33
    NAMESPACE       shift and go to state 38
    CLASS           shift and go to state 39
    FUNC            shift and go to state 40
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43
    IF              shift and go to state 44
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64

    statement                      shift and go to state 65
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 228

    (30) function_declaration -> FUNC ID ( empty . ) { program } TARROW expression
    )               shift and go to state 249


state 229

    (33) function_declaration -> FUNC ID ( function_arguments . ) { program } TARROW expression
    )               shift and go to state 250


state 230

    (31) function_declaration -> FUNC ID COLON_COLON ID . ( empty ) { program } TARROW expression
    (32) function_declaration -> FUNC ID COLON_COLON ID . ( function_arguments ) { program } TARROW expression
    (               shift and go to state 251


state 231

    (106) _list -> [ positional_args , ] .
    [               reduce using rule 106 (_list -> [ positional_args , ] .)
    COLON_COLON     reduce using rule 106 (_list -> [ positional_args , ] .)
    (               reduce using rule 106 (_list -> [ positional_args , ] .)
    >               reduce using rule 106 (_list -> [ positional_args , ] .)
    <               reduce using rule 106 (_list -> [ positional_args , ] .)
    &               reduce using rule 106 (_list -> [ positional_args , ] .)
    |               reduce using rule 106 (_list -> [ positional_args , ] .)
    EQ_GREATER      reduce using rule 106 (_list -> [ positional_args , ] .)
    EQ_LESS         reduce using rule 106 (_list -> [ positional_args , ] .)
    NOT_EQEQ        reduce using rule 106 (_list -> [ positional_args , ] .)
    EQEQ            reduce using rule 106 (_list -> [ positional_args , ] .)
    %               reduce using rule 106 (_list -> [ positional_args , ] .)
    *               reduce using rule 106 (_list -> [ positional_args , ] .)
    /               reduce using rule 106 (_list -> [ positional_args , ] .)
    -               reduce using rule 106 (_list -> [ positional_args , ] .)
    +               reduce using rule 106 (_list -> [ positional_args , ] .)
    ,               reduce using rule 106 (_list -> [ positional_args , ] .)
    }               reduce using rule 106 (_list -> [ positional_args , ] .)
    ;               reduce using rule 106 (_list -> [ positional_args , ] .)
    IN              reduce using rule 106 (_list -> [ positional_args , ] .)
    )               reduce using rule 106 (_list -> [ positional_args , ] .)
    ]               reduce using rule 106 (_list -> [ positional_args , ] .)
    :               reduce using rule 106 (_list -> [ positional_args , ] .)
    {               reduce using rule 106 (_list -> [ positional_args , ] .)
    \               reduce using rule 106 (_list -> [ positional_args , ] .)
    SANDBOX         reduce using rule 106 (_list -> [ positional_args , ] .)
    LIMPORT         reduce using rule 106 (_list -> [ positional_args , ] .)
    .               reduce using rule 106 (_list -> [ positional_args , ] .)
    IMPORT          reduce using rule 106 (_list -> [ positional_args , ] .)
    ID              reduce using rule 106 (_list -> [ positional_args , ] .)
    RETURN          reduce using rule 106 (_list -> [ positional_args , ] .)
    DEL             reduce using rule 106 (_list -> [ positional_args , ] .)
    FOR             reduce using rule 106 (_list -> [ positional_args , ] .)
    BREAK           reduce using rule 106 (_list -> [ positional_args , ] .)
    LET             reduce using rule 106 (_list -> [ positional_args , ] .)
    WHILE           reduce using rule 106 (_list -> [ positional_args , ] .)
    NAMESPACE       reduce using rule 106 (_list -> [ positional_args , ] .)
    CLASS           reduce using rule 106 (_list -> [ positional_args , ] .)
    FUNC            reduce using rule 106 (_list -> [ positional_args , ] .)
    PYTHON_CODE_EXEC reduce using rule 106 (_list -> [ positional_args , ] .)
    PYTHON_CODE     reduce using rule 106 (_list -> [ positional_args , ] .)
    IF              reduce using rule 106 (_list -> [ positional_args , ] .)
    !               reduce using rule 106 (_list -> [ positional_args , ] .)
    STRING          reduce using rule 106 (_list -> [ positional_args , ] .)
    FALSE           reduce using rule 106 (_list -> [ positional_args , ] .)
    TRUE            reduce using rule 106 (_list -> [ positional_args , ] .)
    FLOAT           reduce using rule 106 (_list -> [ positional_args , ] .)
    INT             reduce using rule 106 (_list -> [ positional_args , ] .)
    NULL            reduce using rule 106 (_list -> [ positional_args , ] .)
    $end            reduce using rule 106 (_list -> [ positional_args , ] .)


state 232

    (62) if_statement -> IF ( expression ) . { program }
    {               shift and go to state 252


state 233

    (124) assoc_array_items -> assoc_array_items , expression . : expression
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    :               shift and go to state 253
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 234

    (123) assoc_array_items -> expression : expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    \               reduce using rule 123 (assoc_array_items -> expression : expression .)
    ,               reduce using rule 123 (assoc_array_items -> expression : expression .)
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 235

    (25) function_call -> expression ( empty ) FARROW . { program }
    {               shift and go to state 254


state 236

    (27) function_call -> expression ( function_arguments ) FARROW . { program }
    {               shift and go to state 255


state 237

    (44) kwargs -> kwargs , id . = expression
    =               shift and go to state 256


state 238

    (121) id -> ID .
    =               reduce using rule 121 (id -> ID .)


state 239

    (35) function_arguments -> positional_args , kwargs .
    (44) kwargs -> kwargs . , id = expression
    )               reduce using rule 35 (function_arguments -> positional_args , kwargs .)
    ,               shift and go to state 202


state 240

    (43) kwargs -> ID = expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ,               reduce using rule 43 (kwargs -> ID = expression .)
    )               reduce using rule 43 (kwargs -> ID = expression .)
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 241

    (39) for_loop -> FOR expression IN expression { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (127) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               reduce using rule 127 (empty -> .)
    SANDBOX         reduce using rule 127 (empty -> .)
    LIMPORT         reduce using rule 127 (empty -> .)
    .               reduce using rule 127 (empty -> .)
    IMPORT          reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    DEL             reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    BREAK           reduce using rule 127 (empty -> .)
    LET             reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    NAMESPACE       reduce using rule 127 (empty -> .)
    CLASS           reduce using rule 127 (empty -> .)
    FUNC            reduce using rule 127 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 127 (empty -> .)
    PYTHON_CODE     reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    (               reduce using rule 127 (empty -> .)
    \               reduce using rule 127 (empty -> .)
    [               reduce using rule 127 (empty -> .)
    {               reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    NULL            reduce using rule 127 (empty -> .)
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56

    expression                     shift and go to state 22
    program                        shift and go to state 257
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 242

    (45) variable_assignment -> LET get_index = expression ; .
    SANDBOX         reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    LIMPORT         reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    .               reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    IMPORT          reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    ID              reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    RETURN          reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    DEL             reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    FOR             reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    BREAK           reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    LET             reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    WHILE           reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    NAMESPACE       reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    CLASS           reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    FUNC            reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    PYTHON_CODE     reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    IF              reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    (               reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    !               reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    +               reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    -               reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    \               reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    [               reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    {               reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    STRING          reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    FALSE           reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    TRUE            reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    FLOAT           reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    INT             reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    NULL            reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    $end            reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)
    }               reduce using rule 45 (variable_assignment -> LET get_index = expression ; .)


state 243

    (46) variable_assignment -> LET ID = expression ; .
    SANDBOX         reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    LIMPORT         reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    .               reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    IMPORT          reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    ID              reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    RETURN          reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    DEL             reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    FOR             reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    BREAK           reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    LET             reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    WHILE           reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    NAMESPACE       reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    CLASS           reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    FUNC            reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    PYTHON_CODE     reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    IF              reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    (               reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    !               reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    +               reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    -               reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    \               reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    [               reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    {               reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    STRING          reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    FALSE           reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    TRUE            reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    FLOAT           reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    INT             reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    NULL            reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    $end            reduce using rule 46 (variable_assignment -> LET ID = expression ; .)
    }               reduce using rule 46 (variable_assignment -> LET ID = expression ; .)


state 244

    (40) while_loop -> WHILE ( expression ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (127) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               reduce using rule 127 (empty -> .)
    SANDBOX         reduce using rule 127 (empty -> .)
    LIMPORT         reduce using rule 127 (empty -> .)
    .               reduce using rule 127 (empty -> .)
    IMPORT          reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    DEL             reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    BREAK           reduce using rule 127 (empty -> .)
    LET             reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    NAMESPACE       reduce using rule 127 (empty -> .)
    CLASS           reduce using rule 127 (empty -> .)
    FUNC            reduce using rule 127 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 127 (empty -> .)
    PYTHON_CODE     reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    (               reduce using rule 127 (empty -> .)
    \               reduce using rule 127 (empty -> .)
    [               reduce using rule 127 (empty -> .)
    {               reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    NULL            reduce using rule 127 (empty -> .)
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56

    expression                     shift and go to state 22
    program                        shift and go to state 258
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 245

    (66) else_statement -> ELSE { program } .
    SANDBOX         reduce using rule 66 (else_statement -> ELSE { program } .)
    LIMPORT         reduce using rule 66 (else_statement -> ELSE { program } .)
    .               reduce using rule 66 (else_statement -> ELSE { program } .)
    IMPORT          reduce using rule 66 (else_statement -> ELSE { program } .)
    ID              reduce using rule 66 (else_statement -> ELSE { program } .)
    RETURN          reduce using rule 66 (else_statement -> ELSE { program } .)
    DEL             reduce using rule 66 (else_statement -> ELSE { program } .)
    FOR             reduce using rule 66 (else_statement -> ELSE { program } .)
    BREAK           reduce using rule 66 (else_statement -> ELSE { program } .)
    LET             reduce using rule 66 (else_statement -> ELSE { program } .)
    WHILE           reduce using rule 66 (else_statement -> ELSE { program } .)
    NAMESPACE       reduce using rule 66 (else_statement -> ELSE { program } .)
    CLASS           reduce using rule 66 (else_statement -> ELSE { program } .)
    FUNC            reduce using rule 66 (else_statement -> ELSE { program } .)
    PYTHON_CODE_EXEC reduce using rule 66 (else_statement -> ELSE { program } .)
    PYTHON_CODE     reduce using rule 66 (else_statement -> ELSE { program } .)
    IF              reduce using rule 66 (else_statement -> ELSE { program } .)
    (               reduce using rule 66 (else_statement -> ELSE { program } .)
    !               reduce using rule 66 (else_statement -> ELSE { program } .)
    +               reduce using rule 66 (else_statement -> ELSE { program } .)
    -               reduce using rule 66 (else_statement -> ELSE { program } .)
    \               reduce using rule 66 (else_statement -> ELSE { program } .)
    [               reduce using rule 66 (else_statement -> ELSE { program } .)
    {               reduce using rule 66 (else_statement -> ELSE { program } .)
    STRING          reduce using rule 66 (else_statement -> ELSE { program } .)
    FALSE           reduce using rule 66 (else_statement -> ELSE { program } .)
    TRUE            reduce using rule 66 (else_statement -> ELSE { program } .)
    FLOAT           reduce using rule 66 (else_statement -> ELSE { program } .)
    INT             reduce using rule 66 (else_statement -> ELSE { program } .)
    NULL            reduce using rule 66 (else_statement -> ELSE { program } .)
    $end            reduce using rule 66 (else_statement -> ELSE { program } .)
    }               reduce using rule 66 (else_statement -> ELSE { program } .)


state 246

    (65) else_if_statement -> ELSE IF ( expression . ) { program }
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    )               shift and go to state 259
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 247

    (37) class_declaration -> NAMESPACE ID { program } .
    SANDBOX         reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    LIMPORT         reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    .               reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    IMPORT          reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    ID              reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    RETURN          reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    DEL             reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    FOR             reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    BREAK           reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    LET             reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    WHILE           reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    NAMESPACE       reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    CLASS           reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    FUNC            reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    PYTHON_CODE_EXEC reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    PYTHON_CODE     reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    IF              reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    (               reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    !               reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    +               reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    -               reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    \               reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    [               reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    {               reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    STRING          reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    FALSE           reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    TRUE            reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    FLOAT           reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    INT             reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    NULL            reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    $end            reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)
    }               reduce using rule 37 (class_declaration -> NAMESPACE ID { program } .)


state 248

    (38) class_declaration -> CLASS ID { program } .
    SANDBOX         reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    LIMPORT         reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    .               reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    IMPORT          reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    ID              reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    RETURN          reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    DEL             reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    FOR             reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    BREAK           reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    LET             reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    WHILE           reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    NAMESPACE       reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    CLASS           reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    FUNC            reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    PYTHON_CODE_EXEC reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    PYTHON_CODE     reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    IF              reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    (               reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    !               reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    +               reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    -               reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    \               reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    [               reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    {               reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    STRING          reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    FALSE           reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    TRUE            reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    FLOAT           reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    INT             reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    NULL            reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    $end            reduce using rule 38 (class_declaration -> CLASS ID { program } .)
    }               reduce using rule 38 (class_declaration -> CLASS ID { program } .)


state 249

    (30) function_declaration -> FUNC ID ( empty ) . { program } TARROW expression
    {               shift and go to state 260


state 250

    (33) function_declaration -> FUNC ID ( function_arguments ) . { program } TARROW expression
    {               shift and go to state 261


state 251

    (31) function_declaration -> FUNC ID COLON_COLON ID ( . empty ) { program } TARROW expression
    (32) function_declaration -> FUNC ID COLON_COLON ID ( . function_arguments ) { program } TARROW expression
    (127) empty -> .
    (34) function_arguments -> . kwargs
    (35) function_arguments -> . positional_args , kwargs
    (36) function_arguments -> . positional_args
    (43) kwargs -> . ID = expression
    (44) kwargs -> . kwargs , id = expression
    (41) positional_args -> . expression
    (42) positional_args -> . positional_args , expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    )               reduce using rule 127 (empty -> .)
    ID              shift and go to state 143
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    empty                          shift and go to state 262
    expression                     shift and go to state 68
    function_arguments             shift and go to state 263
    kwargs                         shift and go to state 141
    positional_args                shift and go to state 142
    id                             shift and go to state 49
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 252

    (62) if_statement -> IF ( expression ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (127) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               reduce using rule 127 (empty -> .)
    SANDBOX         reduce using rule 127 (empty -> .)
    LIMPORT         reduce using rule 127 (empty -> .)
    .               reduce using rule 127 (empty -> .)
    IMPORT          reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    DEL             reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    BREAK           reduce using rule 127 (empty -> .)
    LET             reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    NAMESPACE       reduce using rule 127 (empty -> .)
    CLASS           reduce using rule 127 (empty -> .)
    FUNC            reduce using rule 127 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 127 (empty -> .)
    PYTHON_CODE     reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    (               reduce using rule 127 (empty -> .)
    \               reduce using rule 127 (empty -> .)
    [               reduce using rule 127 (empty -> .)
    {               reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    NULL            reduce using rule 127 (empty -> .)
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56

    expression                     shift and go to state 22
    program                        shift and go to state 264
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 253

    (124) assoc_array_items -> assoc_array_items , expression : . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 265
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 254

    (25) function_call -> expression ( empty ) FARROW { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (127) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               reduce using rule 127 (empty -> .)
    SANDBOX         reduce using rule 127 (empty -> .)
    LIMPORT         reduce using rule 127 (empty -> .)
    .               reduce using rule 127 (empty -> .)
    IMPORT          reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    DEL             reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    BREAK           reduce using rule 127 (empty -> .)
    LET             reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    NAMESPACE       reduce using rule 127 (empty -> .)
    CLASS           reduce using rule 127 (empty -> .)
    FUNC            reduce using rule 127 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 127 (empty -> .)
    PYTHON_CODE     reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    (               reduce using rule 127 (empty -> .)
    \               reduce using rule 127 (empty -> .)
    [               reduce using rule 127 (empty -> .)
    {               reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    NULL            reduce using rule 127 (empty -> .)
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56

    expression                     shift and go to state 22
    empty                          shift and go to state 2
    program                        shift and go to state 266
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 255

    (27) function_call -> expression ( function_arguments ) FARROW { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (127) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               reduce using rule 127 (empty -> .)
    SANDBOX         reduce using rule 127 (empty -> .)
    LIMPORT         reduce using rule 127 (empty -> .)
    .               reduce using rule 127 (empty -> .)
    IMPORT          reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    DEL             reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    BREAK           reduce using rule 127 (empty -> .)
    LET             reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    NAMESPACE       reduce using rule 127 (empty -> .)
    CLASS           reduce using rule 127 (empty -> .)
    FUNC            reduce using rule 127 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 127 (empty -> .)
    PYTHON_CODE     reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    (               reduce using rule 127 (empty -> .)
    \               reduce using rule 127 (empty -> .)
    [               reduce using rule 127 (empty -> .)
    {               reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    NULL            reduce using rule 127 (empty -> .)
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56

    expression                     shift and go to state 22
    program                        shift and go to state 267
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 256

    (44) kwargs -> kwargs , id = . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    id                             shift and go to state 49
    expression                     shift and go to state 268
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 257

    (39) for_loop -> FOR expression IN expression { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               shift and go to state 269
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 31
    WHILE           shift and go to state 33
    NAMESPACE       shift and go to state 38
    CLASS           shift and go to state 39
    FUNC            shift and go to state 40
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43
    IF              shift and go to state 44
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64

    expression                     shift and go to state 22
    statement                      shift and go to state 65
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 258

    (40) while_loop -> WHILE ( expression ) { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               shift and go to state 270
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 31
    WHILE           shift and go to state 33
    NAMESPACE       shift and go to state 38
    CLASS           shift and go to state 39
    FUNC            shift and go to state 40
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43
    IF              shift and go to state 44
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64

    expression                     shift and go to state 22
    statement                      shift and go to state 65
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 259

    (65) else_if_statement -> ELSE IF ( expression ) . { program }
    {               shift and go to state 271


state 260

    (30) function_declaration -> FUNC ID ( empty ) { . program } TARROW expression
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (127) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               reduce using rule 127 (empty -> .)
    SANDBOX         reduce using rule 127 (empty -> .)
    LIMPORT         reduce using rule 127 (empty -> .)
    .               reduce using rule 127 (empty -> .)
    IMPORT          reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    DEL             reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    BREAK           reduce using rule 127 (empty -> .)
    LET             reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    NAMESPACE       reduce using rule 127 (empty -> .)
    CLASS           reduce using rule 127 (empty -> .)
    FUNC            reduce using rule 127 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 127 (empty -> .)
    PYTHON_CODE     reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    (               reduce using rule 127 (empty -> .)
    \               reduce using rule 127 (empty -> .)
    [               reduce using rule 127 (empty -> .)
    {               reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    NULL            reduce using rule 127 (empty -> .)
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56

    empty                          shift and go to state 2
    program                        shift and go to state 272
    expression                     shift and go to state 22
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 261

    (33) function_declaration -> FUNC ID ( function_arguments ) { . program } TARROW expression
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (127) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               reduce using rule 127 (empty -> .)
    SANDBOX         reduce using rule 127 (empty -> .)
    LIMPORT         reduce using rule 127 (empty -> .)
    .               reduce using rule 127 (empty -> .)
    IMPORT          reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    DEL             reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    BREAK           reduce using rule 127 (empty -> .)
    LET             reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    NAMESPACE       reduce using rule 127 (empty -> .)
    CLASS           reduce using rule 127 (empty -> .)
    FUNC            reduce using rule 127 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 127 (empty -> .)
    PYTHON_CODE     reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    (               reduce using rule 127 (empty -> .)
    \               reduce using rule 127 (empty -> .)
    [               reduce using rule 127 (empty -> .)
    {               reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    NULL            reduce using rule 127 (empty -> .)
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56

    program                        shift and go to state 273
    expression                     shift and go to state 22
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 262

    (31) function_declaration -> FUNC ID COLON_COLON ID ( empty . ) { program } TARROW expression
    )               shift and go to state 274


state 263

    (32) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments . ) { program } TARROW expression
    )               shift and go to state 275


state 264

    (62) if_statement -> IF ( expression ) { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               shift and go to state 276
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 31
    WHILE           shift and go to state 33
    NAMESPACE       shift and go to state 38
    CLASS           shift and go to state 39
    FUNC            shift and go to state 40
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43
    IF              shift and go to state 44
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64

    expression                     shift and go to state 22
    statement                      shift and go to state 65
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 265

    (124) assoc_array_items -> assoc_array_items , expression : expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    \               reduce using rule 124 (assoc_array_items -> assoc_array_items , expression : expression .)
    ,               reduce using rule 124 (assoc_array_items -> assoc_array_items , expression : expression .)
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 266

    (25) function_call -> expression ( empty ) FARROW { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               shift and go to state 277
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 31
    WHILE           shift and go to state 33
    NAMESPACE       shift and go to state 38
    CLASS           shift and go to state 39
    FUNC            shift and go to state 40
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43
    IF              shift and go to state 44
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64

    expression                     shift and go to state 22
    statement                      shift and go to state 65
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 267

    (27) function_call -> expression ( function_arguments ) FARROW { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               shift and go to state 278
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 31
    WHILE           shift and go to state 33
    NAMESPACE       shift and go to state 38
    CLASS           shift and go to state 39
    FUNC            shift and go to state 40
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43
    IF              shift and go to state 44
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64

    expression                     shift and go to state 22
    statement                      shift and go to state 65
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 268

    (44) kwargs -> kwargs , id = expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
    ,               reduce using rule 44 (kwargs -> kwargs , id = expression .)
    )               reduce using rule 44 (kwargs -> kwargs , id = expression .)
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 269

    (39) for_loop -> FOR expression IN expression { program } .
    SANDBOX         reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    LIMPORT         reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    .               reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    IMPORT          reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    ID              reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    RETURN          reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    DEL             reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    FOR             reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    BREAK           reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    LET             reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    WHILE           reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    NAMESPACE       reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    CLASS           reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    FUNC            reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    PYTHON_CODE_EXEC reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    PYTHON_CODE     reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    IF              reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    (               reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    !               reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    +               reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    -               reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    \               reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    [               reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    {               reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    STRING          reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    FALSE           reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    TRUE            reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    FLOAT           reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    INT             reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    NULL            reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    $end            reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)
    }               reduce using rule 39 (for_loop -> FOR expression IN expression { program } .)


state 270

    (40) while_loop -> WHILE ( expression ) { program } .
    SANDBOX         reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    LIMPORT         reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    .               reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    IMPORT          reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    ID              reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    RETURN          reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    DEL             reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    FOR             reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    BREAK           reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    LET             reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    WHILE           reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    NAMESPACE       reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    CLASS           reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    FUNC            reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    PYTHON_CODE     reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    IF              reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    (               reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    !               reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    +               reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    -               reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    \               reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    [               reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    {               reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    STRING          reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    FALSE           reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    TRUE            reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    FLOAT           reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    INT             reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    NULL            reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    $end            reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)
    }               reduce using rule 40 (while_loop -> WHILE ( expression ) { program } .)


state 271

    (65) else_if_statement -> ELSE IF ( expression ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (127) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               reduce using rule 127 (empty -> .)
    SANDBOX         reduce using rule 127 (empty -> .)
    LIMPORT         reduce using rule 127 (empty -> .)
    .               reduce using rule 127 (empty -> .)
    IMPORT          reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    DEL             reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    BREAK           reduce using rule 127 (empty -> .)
    LET             reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    NAMESPACE       reduce using rule 127 (empty -> .)
    CLASS           reduce using rule 127 (empty -> .)
    FUNC            reduce using rule 127 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 127 (empty -> .)
    PYTHON_CODE     reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    (               reduce using rule 127 (empty -> .)
    \               reduce using rule 127 (empty -> .)
    [               reduce using rule 127 (empty -> .)
    {               reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    NULL            reduce using rule 127 (empty -> .)
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56

    expression                     shift and go to state 22
    program                        shift and go to state 279
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 272

    (30) function_declaration -> FUNC ID ( empty ) { program . } TARROW expression
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               shift and go to state 280
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 31
    WHILE           shift and go to state 33
    NAMESPACE       shift and go to state 38
    CLASS           shift and go to state 39
    FUNC            shift and go to state 40
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43
    IF              shift and go to state 44
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64

    expression                     shift and go to state 22
    statement                      shift and go to state 65
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 273

    (33) function_declaration -> FUNC ID ( function_arguments ) { program . } TARROW expression
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               shift and go to state 281
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 31
    WHILE           shift and go to state 33
    NAMESPACE       shift and go to state 38
    CLASS           shift and go to state 39
    FUNC            shift and go to state 40
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43
    IF              shift and go to state 44
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64

    expression                     shift and go to state 22
    statement                      shift and go to state 65
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 274

    (31) function_declaration -> FUNC ID COLON_COLON ID ( empty ) . { program } TARROW expression
    {               shift and go to state 282


state 275

    (32) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) . { program } TARROW expression
    {               shift and go to state 283


state 276

    (62) if_statement -> IF ( expression ) { program } .
    ELSE            reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    SANDBOX         reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    LIMPORT         reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    .               reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    IMPORT          reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    ID              reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    RETURN          reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    DEL             reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    FOR             reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    BREAK           reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    LET             reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    WHILE           reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    NAMESPACE       reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    CLASS           reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    FUNC            reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    PYTHON_CODE     reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    IF              reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    (               reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    !               reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    +               reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    -               reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    \               reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    [               reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    {               reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    STRING          reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    FALSE           reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    TRUE            reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    FLOAT           reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    INT             reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    NULL            reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    $end            reduce using rule 62 (if_statement -> IF ( expression ) { program } .)
    }               reduce using rule 62 (if_statement -> IF ( expression ) { program } .)


state 277

    (25) function_call -> expression ( empty ) FARROW { program } .
    ;               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    [               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    COLON_COLON     reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    (               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    >               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    <               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    &               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    |               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_GREATER      reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_LESS         reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    NOT_EQEQ        reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    EQEQ            reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    %               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    *               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    /               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    -               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    +               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    ,               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    }               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    IN              reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    )               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    ]               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    :               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    {               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    \               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    SANDBOX         reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    LIMPORT         reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    .               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    IMPORT          reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    ID              reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    RETURN          reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    DEL             reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    FOR             reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    BREAK           reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    LET             reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    WHILE           reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    NAMESPACE       reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    CLASS           reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    FUNC            reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    PYTHON_CODE_EXEC reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    PYTHON_CODE     reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    IF              reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    !               reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    STRING          reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    FALSE           reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    TRUE            reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    FLOAT           reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    INT             reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    NULL            reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)
    $end            reduce using rule 25 (function_call -> expression ( empty ) FARROW { program } .)


state 278

    (27) function_call -> expression ( function_arguments ) FARROW { program } .
    ;               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    [               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    COLON_COLON     reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    (               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    >               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    <               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    &               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    |               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_GREATER      reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_LESS         reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    NOT_EQEQ        reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQEQ            reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    %               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    *               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    /               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    -               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    +               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    ,               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    }               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    IN              reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    )               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    ]               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    :               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    {               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    \               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    SANDBOX         reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    LIMPORT         reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    .               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    IMPORT          reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    ID              reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    RETURN          reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    DEL             reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    FOR             reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    BREAK           reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    LET             reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    WHILE           reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    NAMESPACE       reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    CLASS           reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    FUNC            reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    PYTHON_CODE_EXEC reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    PYTHON_CODE     reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    IF              reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    !               reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    STRING          reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    FALSE           reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    TRUE            reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    FLOAT           reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    INT             reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    NULL            reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)
    $end            reduce using rule 27 (function_call -> expression ( function_arguments ) FARROW { program } .)


state 279

    (65) else_if_statement -> ELSE IF ( expression ) { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               shift and go to state 284
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 31
    WHILE           shift and go to state 33
    NAMESPACE       shift and go to state 38
    CLASS           shift and go to state 39
    FUNC            shift and go to state 40
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43
    IF              shift and go to state 44
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64

    expression                     shift and go to state 22
    statement                      shift and go to state 65
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 280

    (30) function_declaration -> FUNC ID ( empty ) { program } . TARROW expression
    TARROW          shift and go to state 285


state 281

    (33) function_declaration -> FUNC ID ( function_arguments ) { program } . TARROW expression
    TARROW          shift and go to state 286


state 282

    (31) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { . program } TARROW expression
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (127) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               reduce using rule 127 (empty -> .)
    SANDBOX         reduce using rule 127 (empty -> .)
    LIMPORT         reduce using rule 127 (empty -> .)
    .               reduce using rule 127 (empty -> .)
    IMPORT          reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    DEL             reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    BREAK           reduce using rule 127 (empty -> .)
    LET             reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    NAMESPACE       reduce using rule 127 (empty -> .)
    CLASS           reduce using rule 127 (empty -> .)
    FUNC            reduce using rule 127 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 127 (empty -> .)
    PYTHON_CODE     reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    (               reduce using rule 127 (empty -> .)
    \               reduce using rule 127 (empty -> .)
    [               reduce using rule 127 (empty -> .)
    {               reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    NULL            reduce using rule 127 (empty -> .)
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56

    empty                          shift and go to state 2
    program                        shift and go to state 287
    expression                     shift and go to state 22
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 283

    (32) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { . program } TARROW expression
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (127) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               reduce using rule 127 (empty -> .)
    SANDBOX         reduce using rule 127 (empty -> .)
    LIMPORT         reduce using rule 127 (empty -> .)
    .               reduce using rule 127 (empty -> .)
    IMPORT          reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    DEL             reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    BREAK           reduce using rule 127 (empty -> .)
    LET             reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    NAMESPACE       reduce using rule 127 (empty -> .)
    CLASS           reduce using rule 127 (empty -> .)
    FUNC            reduce using rule 127 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 127 (empty -> .)
    PYTHON_CODE     reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    (               reduce using rule 127 (empty -> .)
    \               reduce using rule 127 (empty -> .)
    [               reduce using rule 127 (empty -> .)
    {               reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    NULL            reduce using rule 127 (empty -> .)
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56

    program                        shift and go to state 288
    expression                     shift and go to state 22
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 284

    (65) else_if_statement -> ELSE IF ( expression ) { program } .
    ELSE            reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    SANDBOX         reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    LIMPORT         reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    .               reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    IMPORT          reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    ID              reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    RETURN          reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    DEL             reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FOR             reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    BREAK           reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    LET             reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    WHILE           reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    NAMESPACE       reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    CLASS           reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FUNC            reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    PYTHON_CODE     reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    IF              reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    (               reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    !               reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    +               reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    -               reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    \               reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    [               reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    {               reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    STRING          reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FALSE           reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    TRUE            reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FLOAT           reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    INT             reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    NULL            reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    $end            reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)
    }               reduce using rule 65 (else_if_statement -> ELSE IF ( expression ) { program } .)


state 285

    (30) function_declaration -> FUNC ID ( empty ) { program } TARROW . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 289
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 286

    (33) function_declaration -> FUNC ID ( function_arguments ) { program } TARROW . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 290
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 287

    (31) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program . } TARROW expression
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               shift and go to state 291
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 31
    WHILE           shift and go to state 33
    NAMESPACE       shift and go to state 38
    CLASS           shift and go to state 39
    FUNC            shift and go to state 40
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43
    IF              shift and go to state 44
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64

    expression                     shift and go to state 22
    statement                      shift and go to state 65
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 288

    (32) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program . } TARROW expression
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (68) import_statement -> . . GLOBAL ;
    (69) import_statement -> . IMPORT expression ;
    (47) variable_operation -> . get_index EQ_DIV expression ;
    (48) variable_operation -> . ID EQ_DIV expression ;
    (49) variable_operation -> . get_index EQ_MOD expression ;
    (50) variable_operation -> . ID EQ_MOD expression ;
    (51) variable_operation -> . get_index EQ_MUL expression ;
    (52) variable_operation -> . ID EQ_MUL expression ;
    (53) variable_operation -> . get_index EQ_SUB expression ;
    (54) variable_operation -> . ID EQ_SUB expression ;
    (55) variable_operation -> . get_index EQ_ADD expression ;
    (56) variable_operation -> . ID EQ_ADD expression ;
    (24) return_statement -> . RETURN expression ;
    (67) delete_statement -> . DEL ID ;
    (39) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . BREAK ;
    (45) variable_assignment -> . LET get_index = expression ;
    (46) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (40) while_loop -> . WHILE ( expression ) { program }
    (58) conditional -> . if_statement else_statement
    (59) conditional -> . if_statement else_if_loop else_statement
    (60) conditional -> . if_statement else_if_loop
    (61) conditional -> . if_statement
    (57) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (37) class_declaration -> . NAMESPACE ID { program }
    (38) class_declaration -> . CLASS ID { program }
    (30) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (31) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (32) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (33) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (103) get_index -> . expression [ expression ]
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (62) if_statement -> . IF ( expression ) { program }
    (120) class_attribute -> . expression COLON_COLON ID
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    }               shift and go to state 292
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 31
    WHILE           shift and go to state 33
    NAMESPACE       shift and go to state 38
    CLASS           shift and go to state 39
    FUNC            shift and go to state 40
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43
    IF              shift and go to state 44
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64

    expression                     shift and go to state 22
    statement                      shift and go to state 65
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 32
    if_statement                   shift and go to state 35
    class_attribute                shift and go to state 36
    function_call                  shift and go to state 37
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54

state 289

    (30) function_declaration -> FUNC ID ( empty ) { program } TARROW expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    SANDBOX         reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    LIMPORT         reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    .               reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    IMPORT          reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    ID              reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    RETURN          reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    DEL             reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    FOR             reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    BREAK           reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    LET             reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    WHILE           reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    NAMESPACE       reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    CLASS           reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    FUNC            reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    PYTHON_CODE_EXEC reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    PYTHON_CODE     reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    IF              reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    !               reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    \               reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    {               reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    STRING          reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    FALSE           reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    TRUE            reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    FLOAT           reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    INT             reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    NULL            reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    $end            reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    }               reduce using rule 30 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 290

    (33) function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    SANDBOX         reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    LIMPORT         reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    .               reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    IMPORT          reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    ID              reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    RETURN          reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    DEL             reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    FOR             reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    BREAK           reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    LET             reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    WHILE           reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    NAMESPACE       reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    CLASS           reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    FUNC            reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    PYTHON_CODE_EXEC reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    PYTHON_CODE     reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    IF              reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    !               reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    \               reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    {               reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    STRING          reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    FALSE           reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    TRUE            reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    FLOAT           reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    INT             reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    NULL            reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    $end            reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    }               reduce using rule 33 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 291

    (31) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } . TARROW expression
    TARROW          shift and go to state 293


state 292

    (32) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } . TARROW expression
    TARROW          shift and go to state 294


state 293

    (31) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 295
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 294

    (32) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW . expression
    (70) expression -> . assoc_array
    (71) expression -> . _numpy
    (72) expression -> . _list
    (73) expression -> . _tuple
    (74) expression -> . class_attribute
    (75) expression -> . id
    (76) expression -> . string
    (77) expression -> . bool
    (78) expression -> . float
    (79) expression -> . int
    (80) expression -> . null
    (81) expression -> . get_index
    (82) expression -> . function_call
    (83) expression -> . python_code
    (84) expression -> . ( expression )
    (85) expression -> . expression > expression
    (86) expression -> . expression < expression
    (87) expression -> . ! expression
    (88) expression -> . expression & expression
    (89) expression -> . expression | expression
    (90) expression -> . expression EQ_GREATER expression
    (91) expression -> . expression EQ_LESS expression
    (92) expression -> . expression NOT_EQEQ expression
    (93) expression -> . expression EQEQ expression
    (94) expression -> . expression % expression
    (95) expression -> . expression * expression
    (96) expression -> . expression / expression
    (97) expression -> . expression - expression
    (98) expression -> . expression + expression
    (99) expression -> . + expression
    (100) expression -> . - expression
    (101) expression -> . ID OF ID
    (122) assoc_array -> . \ assoc_array_items \
    (108) _numpy -> . ( , )
    (109) _numpy -> . ( )
    (110) _numpy -> . ( expression , )
    (111) _numpy -> . ( items , )
    (112) _numpy -> . ( items )
    (106) _list -> . [ positional_args , ]
    (107) _list -> . [ positional_args ]
    (104) _tuple -> . { positional_args , }
    (105) _tuple -> . { positional_args }
    (120) class_attribute -> . expression COLON_COLON ID
    (121) id -> . ID
    (116) string -> . STRING
    (118) bool -> . FALSE
    (119) bool -> . TRUE
    (117) float -> . FLOAT
    (115) int -> . INT
    (102) null -> . NULL
    (103) get_index -> . expression [ expression ]
    (25) function_call -> . expression ( empty ) FARROW { program }
    (26) function_call -> . expression ( empty )
    (27) function_call -> . expression ( function_arguments ) FARROW { program }
    (28) function_call -> . expression ( function_arguments )
    (125) python_code -> . PYTHON_CODE_EXEC
    (126) python_code -> . PYTHON_CODE
    (               shift and go to state 34
    !               shift and go to state 55
    +               shift and go to state 57
    -               shift and go to state 56
    ID              shift and go to state 73
    \               shift and go to state 58
    [               shift and go to state 41
    {               shift and go to state 20
    STRING          shift and go to state 59
    FALSE           shift and go to state 60
    TRUE            shift and go to state 61
    FLOAT           shift and go to state 62
    INT             shift and go to state 63
    NULL            shift and go to state 64
    PYTHON_CODE_EXEC shift and go to state 42
    PYTHON_CODE     shift and go to state 43

    expression                     shift and go to state 296
    assoc_array                    shift and go to state 45
    _numpy                         shift and go to state 46
    _list                          shift and go to state 47
    _tuple                         shift and go to state 48
    class_attribute                shift and go to state 69
    id                             shift and go to state 49
    string                         shift and go to state 50
    bool                           shift and go to state 51
    float                          shift and go to state 52
    int                            shift and go to state 53
    null                           shift and go to state 54
    get_index                      shift and go to state 70
    function_call                  shift and go to state 71
    python_code                    shift and go to state 72

state 295

    (31) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    SANDBOX         reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    LIMPORT         reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    .               reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    IMPORT          reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    ID              reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    RETURN          reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    DEL             reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FOR             reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    BREAK           reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    LET             reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    WHILE           reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    NAMESPACE       reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    CLASS           reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FUNC            reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    PYTHON_CODE_EXEC reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    PYTHON_CODE     reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    IF              reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    !               reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    \               reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    {               reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    STRING          reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FALSE           reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    TRUE            reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FLOAT           reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    INT             reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    NULL            reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    $end            reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    }               reduce using rule 31 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


state 296

    (32) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .
    (85) expression -> expression . > expression
    (86) expression -> expression . < expression
    (88) expression -> expression . & expression
    (89) expression -> expression . | expression
    (90) expression -> expression . EQ_GREATER expression
    (91) expression -> expression . EQ_LESS expression
    (92) expression -> expression . NOT_EQEQ expression
    (93) expression -> expression . EQEQ expression
    (94) expression -> expression . % expression
    (95) expression -> expression . * expression
    (96) expression -> expression . / expression
    (97) expression -> expression . - expression
    (98) expression -> expression . + expression
    (120) class_attribute -> expression . COLON_COLON ID
    (103) get_index -> expression . [ expression ]
    (25) function_call -> expression . ( empty ) FARROW { program }
    (26) function_call -> expression . ( empty )
    (27) function_call -> expression . ( function_arguments ) FARROW { program }
    (28) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    SANDBOX         reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    LIMPORT         reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    .               reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    IMPORT          reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    ID              reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    RETURN          reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    DEL             reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FOR             reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    BREAK           reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    LET             reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    WHILE           reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    NAMESPACE       reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    CLASS           reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FUNC            reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    PYTHON_CODE_EXEC reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    PYTHON_CODE     reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    IF              reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    !               reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    \               reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    {               reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    STRING          reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FALSE           reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    TRUE            reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FLOAT           reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    INT             reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    NULL            reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    $end            reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    }               reduce using rule 32 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    >               shift and go to state 78
    <               shift and go to state 79
    &               shift and go to state 80
    |               shift and go to state 81
    EQ_GREATER      shift and go to state 82
    EQ_LESS         shift and go to state 83
    NOT_EQEQ        shift and go to state 84
    EQEQ            shift and go to state 85
    %               shift and go to state 86
    *               shift and go to state 87
    /               shift and go to state 88
    -               shift and go to state 89
    +               shift and go to state 90
    COLON_COLON     shift and go to state 76
    [               shift and go to state 75
    (               shift and go to state 77


Conflicts:

shift/reduce conflict for - in state 289 resolved as shift
shift/reduce conflict for + in state 289 resolved as shift
shift/reduce conflict for [ in state 289 resolved as shift
shift/reduce conflict for ( in state 289 resolved as shift
shift/reduce conflict for - in state 290 resolved as shift
shift/reduce conflict for + in state 290 resolved as shift
shift/reduce conflict for [ in state 290 resolved as shift
shift/reduce conflict for ( in state 290 resolved as shift
shift/reduce conflict for - in state 295 resolved as shift
shift/reduce conflict for + in state 295 resolved as shift
shift/reduce conflict for [ in state 295 resolved as shift
shift/reduce conflict for ( in state 295 resolved as shift
shift/reduce conflict for - in state 296 resolved as shift
shift/reduce conflict for + in state 296 resolved as shift
shift/reduce conflict for [ in state 296 resolved as shift
shift/reduce conflict for ( in state 296 resolved as shift